/** @file boiler_direct_test.cpp
*/

/**
 *    Copyright (C) 2008 10gen Inc.
 *
 *    This program is free software: you can redistribute it and/or  modify
 *    it under the terms of the GNU Affero General Public License, version 3,
 *    as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the GNU Affero General Public License in all respects
 *    for all of the code used other than as permitted herein. If you modify
 *    file(s) with this exception, you may extend this exception to your
 *    version of the file(s), but you are not obligated to do so. If you do not
 *    wish to do so, delete this exception statement from your version. If you
 *    delete this exception statement from all source files in the program,
 *    then also delete it in the license file.
 */

#include "mongo/pch.h"

#include "mongo/db/db.h"
#include "mongo/db/instance.h"
#include "mongo/db/json.h"
#include "mongo/db/lasterror.h"
#include "mongo/dbtests/dbtests.h"
#include "mongo/unittest/scoped_probe.h"

// NOTE: The queries within this file are automatically generated from the NLTK grammer
//       defined in QA-352.  Changes to the infrastructure should be made in the boiler
//       plate code; otherwise they may be overwritten.
namespace GeneratedTests {

    static const std::string& kNameSpace = "qry.QA401";

    // helper
    std::string getNextId() {
        static int id = 0;
        stringstream s;
        s << id++;
        return s.str();
    }

    // Base client helper
    struct ClientBase {
        ClientBase() { mongo::lastError.reset(new LastError()); }
        virtual ~ClientBase() { }

    protected:
        static bool error() {
            return !_client.getPrevError().getField( "err" ).isNull();
        }
        static DBDirectClient _client;
    };
    DBDirectClient ClientBase::_client;

    // Runner for generated queries
    template <typename Q>
    struct GeneratedQueryRunner : ClientBase {
        virtual void run(){
            ::mongo::unittest::ScopedProbe::lastQuery = Q::getQuery();
            ::mongo::unittest::ScopedProbe::lastLimit = Q::nToLimit();
            ::mongo::unittest::ScopedProbe::lastSkip = Q::nToSkip();
            ::mongo::unittest::ScopedProbe::lastProjection = Q::getProjection();
            ::mongo::unittest::ScopedProbe::lastCount = -1;
            auto_ptr<DBClientCursor> cursor = _client.query(kNameSpace,
                                                            Q::getQuery(),
                                                            Q::nToLimit(),
                                                            Q::nToSkip(),
                                                            Q::getProjection());
            ASSERT(!error());
            int count = 0;
            while (cursor->more()) {
                ++count;
                cursor->next();
            }
            ::mongo::unittest::ScopedProbe::lastCount = count;
        }
    };

    // Dataset used by generated queries
    struct InsertDocuments : ClientBase {
        virtual void run() {
            _client.dropCollection(kNameSpace);
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 25, 'lat': 0.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":true}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-33.3,90],\"a\":{\"a\":'Echa de menos el 100 por ciento de los tiros que nunca toma.',\"b\":[null,[['Usted debe ser el cambio que deseas ver en el mundo.']],['Usted debe ser el cambio que deseas ver en el mundo.']]},\"locHaystack\":{ 'lng': 25, 'lat': -89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Usted puede hacer cualquier cosa, pero no todo.',\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,0.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You must be the change you wish to see in the world. anything','Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-25,25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-90]},\"loc\":{\"type\":\"Point\",\"coordinates\":[25,-89.9]},\"b\":{\"arrayField\":[{\"locHaystack\":[33.3,-89.9]}]}},''],\"arrayField\":[{\"c\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[25,90.0]},\"locLegacy\":[180,90]},\"c\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',\"locHaystack\":{ 'lng': 25, 'lat': -25}},{\"a\":[{\"_id\":{\"b\":[]}},314159265017,{\"c\":'Usted debe ser el cambio que deseas ver en el mundo.'},[{\"d\":{\"$date\": 1500000}},[['Echa de menos el 100 por ciento de los tiros que nunca toma.'],0]],{\"d\":true}]},['The richest man is not he who has the most, but he who needs the least. anything',{\"locHaystack\":{ 'lng': -180, 'lat': -90.0}}],{\"a\":[null,{\"c\":null}]}]},{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0.0]}},'Usted puede hacer cualquier cosa, pero no todo.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"b\":'Usted puede hacer cualquier cosa, pero no todo.',\"c\":{\"locHaystack\":[179.9,89.9]}},\"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null],\"d\":'The richest man is not he who has the most, but he who needs the least. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[0],'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything',{\"arrayField\":[[314159265001,'The richest man is not he who has the most, but he who needs the least. anything']]},null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -180.0, 'lat': 33.3}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[0.0,90.0],\"arrayField\":[[null,{},{\"loc\":{\"type\":\"Point\",\"coordinates\":[180,89.9]}}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 180, 'lat': 25}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[false]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"locLegacy\":[0,25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[25,90.0]},\"b\":{\"arrayField\":[true]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.'],\"a\":true}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"b\":[314159265019],\"arrayField\":[{\"a\":'You can do anything, but not everything.'}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[''],\"d\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,-33.3]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":null,\"_id\":{\"arrayField\":['I quit therapy because my analyst was trying to help me behind my back. anything',[1,{\"b\":['Usted debe ser el cambio que deseas ver en el mundo.',false]},false],{\"arrayField\":[1]},{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,0]}},314159265015,'']}]},\"_id\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-25,89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":314159265011}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"d\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[180,-33.3]}}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.',\"locHaystack\":[180.0,-25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,-90.0]}},314159265004],\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[''],\"arrayField\":[1,'Echa de menos el 100 por ciento de los tiros que nunca toma.']},'',{\"locHaystack\":[-180.0,-90.0],\"locLegacy\":[-180,-90]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[0.0,25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265006,{\"c\":{\"locLegacy\":[180,90.0],\"locHaystack\":{ 'lng': 25, 'lat': -89.9}}},{\"c\":1},{\"arrayField\":[{\"arrayField\":[{\"arrayField\":['The richest man is not he who has the most, but he who needs the least. anything']}]}]},'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[180.0,90.0],\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,0.0]},\"b\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[''],1,{\"$date\": -111100000}],\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,0.0]},\"c\":2225073858072009000.99}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":0}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"arrayField\":[null,{\"c\":true},null,'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything',{},'']}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-90.0]}},null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[180.0,-33.3],\"a\":{\"$date\": 1391633433037}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"arrayField\":['','I quit therapy because my analyst was trying to help me behind my back. anything','When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything']},'You miss 100 percent of the shots you never take. anything',{\"locHaystack\":{ 'lng': -180.0, 'lat': 0}}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1391633433037},[{\"arrayField\":[0,{\"arrayField\":[{\"arrayField\":[]},{\"$date\": 1391633433037}]},{\"a\":{\"a\":'You miss 100 percent of the shots you never take. anything'},\"arrayField\":[true]}]},true],314159265004,false]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":null,\"arrayField\":[{\"arrayField\":[314159265009,'',true,'You can do anything, but not everything.','You can do anything, but not everything.']}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265009]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-25,-90.0],\"arrayField\":[0]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{},'Usted debe ser el cambio que deseas ver en el mundo.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-25,90.0],\"arrayField\":[1]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"arrayField\":[{\"d\":314159265016},{\"b\":null}]},\"arrayField\":[[[{\"a\":{\"_id\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}}]]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"c\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,-90.0]},\"arrayField\":[{\"d\":{}},{\"b\":{\"arrayField\":['You miss 100 percent of the shots you never take. anything','You can do anything, but not everything.',[true]]}},{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,-33.3]}}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null],\"d\":1}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You must be the change you wish to see in the world. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locHaystack\":[-180.0,90.0]},'You can do anything, but not everything.',{\"$date\": 1202331498200},{\"arrayField\":[{\"arrayField\":[]},{\"loc\":{\"type\":\"Point\",\"coordinates\":[25,-33.3]}},{\"arrayField\":[true]}],\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,90]}},'The richest man is not he who has the most, but he who needs the least. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":false}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":314159265011}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything',null,'',{\"arrayField\":[null]},{\"locHaystack\":{ 'lng': 180, 'lat': 0}},'You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locHaystack\":{ 'lng': 180, 'lat': 90.0}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":-3.14159265859}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-180,-89.9],\"c\":{\"b\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[25,-90.0]}}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': 89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"a\":'Usted puede hacer cualquier cosa, pero no todo.'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265011,[1,{\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,0]}}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1500000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[180,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1500000},{\"arrayField\":[0]},'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.',{},1,'']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[],\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,-89.9]},\"d\":'You can do anything, but not everything.',\"loc\":{\"type\":\"Point\",\"coordinates\":[25,-25]},\"b\":true}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":2225073858072009000.99,\"locLegacy\":[33.3,33.3],\"d\":314159265018}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":{\"$date\": 1391633433037}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[1],null,314159265015,{\"arrayField\":[{\"arrayField\":[''],\"arrayField\":[{\"b\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[180,90]},\"b\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',\"arrayField\":['Usted puede hacer cualquier cosa, pero no todo.','You can do anything, but not everything.','Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.',{\"locHaystack\":[0.0,25]}]}}]}]},{\"b\":null},{\"locHaystack\":[179.9,-90.0]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -179.9, 'lat': -89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything',{\"locHaystack\":{ 'lng': -25, 'lat': -90.0}},[0.00000000049406564841,'You can do anything, but not everything.'],'You can do anything, but not everything.','Echa de menos el 100 por ciento de los tiros que nunca toma.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"$date\": 1500000}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 179.9, 'lat': 33.3}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"d\":'I quit therapy because my analyst was trying to help me behind my back. anything'},true,314159265006,false,314159265001]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[179.9,89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You must be the change you wish to see in the world. anything',\"b\":[{\"arrayField\":[{\"locLegacy\":[33.3,33.3]}]},{\"c\":{\"arrayField\":[[true]]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":null,\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,0.0]},\"arrayField\":['When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything','',{\"locHaystack\":{ 'lng': -25, 'lat': -89.9}}],\"a\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything'}],\"c\":{}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0,25]},\"locLegacy\":[180,90],\"arrayField\":[{\"$date\": 1500000}],\"arrayField\":[{\"d\":'Usted puede hacer cualquier cosa, pero no todo.'},{\"$date\": 1500000},{\"a\":[[{\"$date\": 1391633433037}],{\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,-89.9]}}],\"loc\":{\"type\":\"Point\",\"coordinates\":[180,0.0]}},{\"d\":[]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-180,0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[1]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":314159265010}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['I quit therapy because my analyst was trying to help me behind my back. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 33.3, 'lat': 33.3}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1202331498200}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-89.9]},\"loc\":{\"type\":\"Point\",\"coordinates\":[180,90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"_id\":-3.14159265859}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-33.3,-90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"arrayField\":[{\"$date\": 1391633433037},{\"arrayField\":[{\"arrayField\":[['Usted puede hacer cualquier cosa, pero no todo.',{\"$date\": -111100000},1797693134862315799999],{\"d\":'Usted puede hacer cualquier cosa, pero no todo.',\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-25]}}]}]}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":true}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"arrayField\":[{\"locHaystack\":[33.3,-89.9]}]}]},[314159265008,'You can do anything, but not everything.'],1,true,'',1,{\"a\":null}],\"arrayField\":[{\"a\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',\"locLegacy\":[-179.9,90]},{\"$date\": 1500000},{\"a\":'',\"c\":{\"d\":'You can do anything, but not everything.'}},'Usted puede hacer cualquier cosa, pero no todo.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-179.9,0.0],\"locLegacy\":[-180.0,90]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"locHaystack\":{ 'lng': 33.3, 'lat': 0.0},\"c\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[null,314159265007]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":[{\"arrayField\":['',{\"locHaystack\":[-180.0,89.9]},{},{\"b\":'You can do anything, but not everything.',\"b\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[25,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -179.9, 'lat': -90.0},\"arrayField\":[{\"arrayField\":['You can do anything, but not everything.']},{\"b\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-33.3]},\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,90]}}},{\"locHaystack\":[180,-89.9]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You miss 100 percent of the shots you never take. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":0}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":'The richest man is not he who has the most, but he who needs the least. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null,{\"$date\": -111100000},{\"arrayField\":['You can do anything, but not everything.']},{\"c\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'},[{},null],{\"$date\": 1391633433037}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-179.9,33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":-3.14159265359}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"b\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 0, 'lat': -25}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-179.9,0.0],\"b\":{\"d\":{\"b\":'You miss 100 percent of the shots you never take. anything'}},\"arrayField\":[{\"locHaystack\":[-180.0,90.0],\"_id\":{\"$date\": 1500000}}],\"d\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.',{\"locHaystack\":[33.3,-25]},{\"d\":'You miss 100 percent of the shots you never take. anything'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":{\"d\":314159265001}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[true,{\"a\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[33.3,-90]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-180,25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[0.0,90]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":{\"arrayField\":[{\"d\":[[{\"locHaystack\":{ 'lng': 179.9, 'lat': -90.0}},{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,25]},\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,90.0]}},{},-314159265359,'You can do anything, but not everything.'],{\"arrayField\":[null]}]}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":314159265001}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"arrayField\":['',{\"arrayField\":['I quit therapy because my analyst was trying to help me behind my back. anything']},{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0]}},'You can do anything, but not everything.']}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 180, 'lat': -25}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":{\"arrayField\":[{\"$date\": 1202331498200},'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything',0.00002225073858072014]}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 0, 'lat': -33.3},\"_id\":{\"locHaystack\":{ 'lng': 0, 'lat': 89.9}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1391633433037},{\"d\":[{\"arrayField\":[{\"locHaystack\":{ 'lng': -180.0, 'lat': -33.3},\"b\":{\"b\":{\"b\":314159265012}}}]},'']}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1500000}],\"locLegacy\":[-180.0,-90],\"loc\":{\"type\":\"Point\",\"coordinates\":[0,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -180, 'lat': 90}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[['Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.']],\"c\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-180.0,25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"d\":{\"arrayField\":[{\"locLegacy\":[180,89.9]}]}},{},1],{\"locHaystack\":[-180,33.3]},{\"arrayField\":[{\"locHaystack\":[0,90.0]},{\"locLegacy\":[-25,90]}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'],1797693134862315799999],\"arrayField\":[0,['You can do anything, but not everything.']],\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,-90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"$date\": 1391633433037}]}],\"locHaystack\":[180.0,89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locHaystack\":{ 'lng': 25, 'lat': 33.3}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['The richest man is not he who has the most, but he who needs the least. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": -111100000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locLegacy\":[-33.3,90.0]},1]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,90.0]},\"locHaystack\":[33.3,90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-179.9,90.0],\"arrayField\":[null,'']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 180, 'lat': 90}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-180,33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locHaystack\":{ 'lng': 180, 'lat': -33.3}},{\"locHaystack\":[0.0,89.9]},null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"d\":'You can do anything, but not everything.'},null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': 90.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-180.0,-89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -33.3, 'lat': 90.0},\"locLegacy\":[0,90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"a\":{\"b\":0,\"arrayField\":[{\"b\":'You can do anything, but not everything.',\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0]}}]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'You can do anything, but not everything.',\"d\":{\"b\":{\"arrayField\":['When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything','Echa de menos el 100 por ciento de los tiros que nunca toma.']}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"b\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'},\"locHaystack\":[-25,-89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[179.9,-89.9],\"b\":{\"$date\": 1202331498200}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[33.3,-89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"arrayField\":[{\"a\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'},{\"arrayField\":[0.0]}]}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":null,\"c\":{\"locLegacy\":[-180.0,-33.3],\"arrayField\":[{\"b\":'You can do anything, but not everything.'}],\"locLegacy\":[-180.0,89.9]},\"arrayField\":[{\"arrayField\":['',{\"arrayField\":[{\"arrayField\":[{\"locLegacy\":[-180,90.0],\"arrayField\":[{\"$date\": 1202331498200},null,{\"b\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}],\"arrayField\":[[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,-33.3]}}]]},{\"arrayField\":[{\"$date\": 1500000}]},'You can do anything, but not everything.']}]},'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.']}],\"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,-90]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[179.9,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['The richest man is not he who has the most, but he who needs the least. anything',{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,-89.9]}},[{\"arrayField\":[{\"c\":'You can do anything, but not everything.',\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,-25]}},-314159265359],\"locHaystack\":[-180.0,89.9]}]],\"b\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"b\":{\"$date\": 1202331498200},\"a\":{\"arrayField\":[null]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"c\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',\"arrayField\":[{\"locHaystack\":[180.0,-25]},{\"locHaystack\":{ 'lng': -180, 'lat': -90.0}},{\"arrayField\":[2225073858072009000.99]},314159265011,1,'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything','I quit therapy because my analyst was trying to help me behind my back. anything','',1,{\"locLegacy\":[0.0,-89.9]},{\"locHaystack\":{ 'lng': 179.9, 'lat': 25}},{\"b\":{\"locLegacy\":[-180.0,25]}}]},false,{\"d\":'You can do anything, but not everything.'},{\"loc\":{\"type\":\"Point\",\"coordinates\":[25,0.0]}},{\"locLegacy\":[-180.0,25]},{\"c\":'I quit therapy because my analyst was trying to help me behind my back. anything',\"a\":'The richest man is not he who has the most, but he who needs the least. anything'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":{\"arrayField\":[null,314159265009]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null,0.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-180.0,0.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0,-25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null,true]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 0, 'lat': -33.3}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":[{\"b\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0]},\"arrayField\":[false,{\"arrayField\":[{\"$date\": 1202331498200}]},null,3.14159265359,'']}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"_id\":'You can do anything, but not everything.'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"arrayField\":[{\"b\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'},'You can do anything, but not everything.']},\"arrayField\":['You miss 100 percent of the shots you never take. anything'],\"locHaystack\":{ 'lng': 180.0, 'lat': 33.3},\"arrayField\":[314159265019],\"locHaystack\":{ 'lng': -33.3, 'lat': 33.3},\"c\":{\"arrayField\":['The richest man is not he who has the most, but he who needs the least. anything',{\"b\":{\"d\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'},\"arrayField\":[null]},'You miss 100 percent of the shots you never take. anything']},\"arrayField\":[null],\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"b\":null,\"locHaystack\":{ 'lng': -180.0, 'lat': 0},\"d\":{\"b\":{\"arrayField\":[]}},\"locLegacy\":[-179.9,-90]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":314159265017}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"locHaystack\":[180,-90.0],\"c\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[180,33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'I quit therapy because my analyst was trying to help me behind my back. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,90.0]},\"d\":'You must be the change you wish to see in the world. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[false],\"b\":{\"b\":'You miss 100 percent of the shots you never take. anything'},\"locHaystack\":{ 'lng': -179.9, 'lat': 25}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You must be the change you wish to see in the world. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[0,{}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"a\":''},0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"arrayField\":[{}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[25,-90],\"b\":{\"arrayField\":['I quit therapy because my analyst was trying to help me behind my back. anything']}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":true,\"arrayField\":['Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',{\"locHaystack\":{ 'lng': 25, 'lat': -90}},true,{\"locHaystack\":[179.9,25]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":0.00000000049406564841}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,-89.9]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"_id\":{\"locHaystack\":{ 'lng': 33.3, 'lat': 90.0}}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,90]},\"d\":true}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,25]},\"locHaystack\":[179.9,-90]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"$date\": 1391633433037}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[],\"locLegacy\":[-180.0,-33.3],\"arrayField\":['When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[[null]],\"arrayField\":[{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[25,90.0]}},{\"a\":{\"arrayField\":[{\"$date\": 1202331498200}]},\"locHaystack\":{ 'lng': 180.0, 'lat': -89.9},\"arrayField\":[false,''],\"c\":true},{\"a\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-90]}},\"arrayField\":[{\"_id\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}]},[{\"$date\": 1500000}]]}],\"locLegacy\":[180.0,90.0],\"loc\":{\"type\":\"Point\",\"coordinates\":[180,89.9]},\"b\":{\"locHaystack\":{ 'lng': 179.9, 'lat': -25}}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'You miss 100 percent of the shots you never take. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['','Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything',{\"locLegacy\":[-25,-89.9]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"$date\": 1202331498200},\"_id\":{\"arrayField\":['You can do anything, but not everything.'],\"b\":{\"$date\": 1500000},\"b\":{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0.0]}}],\"c\":{\"locLegacy\":[-179.9,-33.3]},\"d\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Usted puede hacer cualquier cosa, pero no todo.',\"locLegacy\":[-33.3,25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": -111100000},null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[],\"arrayField\":[{},{\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,-25]},\"a\":{\"locLegacy\":[-180.0,-33.3]},\"c\":['To the man who only has a hammer, everything he encounters begins to look like a nail. anything'],\"arrayField\":[{\"arrayField\":[]},'You can do anything, but not everything.',[314159265009]],\"arrayField\":[]},'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',[{\"arrayField\":[]}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[0.0,0],\"arrayField\":[{\"locHaystack\":{ 'lng': 25, 'lat': 33.3}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You must be the change you wish to see in the world. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',\"d\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"c\":['You can do anything, but not everything.'],\"arrayField\":[{},{\"$date\": 1202331498200},'']}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,25]}},\"locLegacy\":[180,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['',{\"a\":{\"$date\": 1391633433037}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":[{\"c\":'You can do anything, but not everything.',\"locHaystack\":[180,90]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"c\":{\"arrayField\":[true,'You can do anything, but not everything.',{\"a\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'},{},{\"locLegacy\":[180.0,-89.9]}],\"arrayField\":[{\"_id\":'You can do anything, but not everything.'},[[{\"arrayField\":[null],\"_id\":['Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'],\"arrayField\":[{\"locHaystack\":[-179.9,-89.9],\"_id\":'You can do anything, but not everything.',\"arrayField\":[]}]}]],{\"arrayField\":[false,{\"$date\": 1391633433037}]}]},\"arrayField\":['The richest man is not he who has the most, but he who needs the least. anything']},{\"arrayField\":['You must be the change you wish to see in the world. anything',{},0.00002225073858072014,[null],[{\"locHaystack\":{ 'lng': -33.3, 'lat': 33.3}}]]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -179.9, 'lat': 25},\"arrayField\":[{\"_id\":{\"$date\": 1202331498200}},{\"arrayField\":[{\"arrayField\":[{\"a\":{\"locHaystack\":{ 'lng': -25, 'lat': 25}}}]}],\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[false,1]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"b\":null}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-33.3,90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"$date\": 1202331498200}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[0.0,0.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": -111100000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[false]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-25,-90],\"arrayField\":[{\"$date\": 1500000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"c\":'',\"loc\":{\"type\":\"Point\",\"coordinates\":[25,33.3]}},0],\"arrayField\":[3.14159265359]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null,{\"$date\": 1500000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265004,{\"loc\":{\"type\":\"Point\",\"coordinates\":[180,90]},\"locHaystack\":{ 'lng': 0.0, 'lat': 33.3}},{\"$date\": 1202331498200},{\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,90.0]}},{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-25]},\"locLegacy\":[179.9,90.0]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":314159265019}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":null,\"arrayField\":[{\"$date\": 1391633433037},{\"d\":['Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',{\"d\":{\"arrayField\":['Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas']}},[true],'Usted puede hacer cualquier cosa, pero no todo.']}],\"arrayField\":['Usted debe ser el cambio que deseas ver en el mundo.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"$date\": 1391633433037},\"locLegacy\":[-33.3,-89.9],\"locHaystack\":[0.0,0.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":null,\"arrayField\":[null,314159265006,0,'Echa de menos el 100 por ciento de los tiros que nunca toma.'],\"b\":0,\"b\":true}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-33.3,25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-180,-89.9],\"arrayField\":['','',{\"b\":false},'You can do anything, but not everything.','',{\"arrayField\":[{\"_id\":{\"arrayField\":['You miss 100 percent of the shots you never take. anything'],\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,90]}}},true,'Usted debe ser el cambio que deseas ver en el mundo.',314159265002,{\"arrayField\":[0,'You can do anything, but not everything.']}],\"arrayField\":[{\"d\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',\"locHaystack\":[180.0,-33.3]}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-180.0,-90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',\"arrayField\":['']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[1,{\"arrayField\":[{\"locHaystack\":{ 'lng': 179.9, 'lat': 0},\"arrayField\":['When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything']}]},{\"arrayField\":[{\"a\":'You can do anything, but not everything.'},{\"$date\": 1202331498200},{\"a\":{\"arrayField\":[314159265004,1,{\"a\":{\"arrayField\":[[{\"c\":''},{\"$date\": 1500000},true,{\"$date\": -111100000},[{\"$date\": 1202331498200},'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything']],{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,90]}}]},\"arrayField\":[{}]},'Echa de menos el 100 por ciento de los tiros que nunca toma.']}}]}],\"loc\":{\"type\":\"Point\",\"coordinates\":[180,-90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[false]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265011,'You miss 100 percent of the shots you never take. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":['Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'],\"locLegacy\":[33.3,-25],\"locLegacy\":[180.0,-33.3],\"arrayField\":[{\"a\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'},'Echa de menos el 100 por ciento de los tiros que nunca toma.',{\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,25]},\"b\":314159265002,\"locLegacy\":[-33.3,89.9]},{\"arrayField\":[null,null,[null],314159265005]},null],\"arrayField\":[0],\"locHaystack\":[179.9,0],\"b\":{\"b\":'You can do anything, but not everything.',\"_id\":false},\"arrayField\":[{\"_id\":{\"a\":314159265002}},[{\"a\":null}]],\"locLegacy\":[0,-89.9]}],\"loc\":{\"type\":\"Point\",\"coordinates\":[25,-25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['',314159265006],\"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"c\":{\"$date\": 1391633433037}}],\"locHaystack\":[180,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[179.9,0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{},'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'],\"a\":{\"locLegacy\":[0,25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You must be the change you wish to see in the world. anything'],\"arrayField\":[314159265013]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[180.0,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'The richest man is not he who has the most, but he who needs the least. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":0.0}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['',[{\"$date\": 1202331498200}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Echa de menos el 100 por ciento de los tiros que nunca toma.']}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"b\":['']},0,{\"a\":1,\"locHaystack\":{ 'lng': 180.0, 'lat': -89.9}},{\"locHaystack\":{ 'lng': -180, 'lat': 0}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-25,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1500000},{\"arrayField\":[[]]},'',0,{\"locHaystack\":[25,90.0]},'You can do anything, but not everything.',[{\"locLegacy\":[180.0,25]},'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'],{\"arrayField\":[],\"d\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,90]},\"b\":{\"locHaystack\":{ 'lng': -180, 'lat': 33.3}}}},null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-25,25]},\"locHaystack\":[180.0,33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': 89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"arrayField\":[314159265017]},\"locLegacy\":[-33.3,-89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":314159265007}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"arrayField\":[{\"arrayField\":[{\"d\":''},{\"$date\": 1500000}]}]}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"a\":{\"arrayField\":[]}},314159265002],\"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[180.0,-90.0],\"arrayField\":[['',{\"$date\": 1202331498200}],'',{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-89.9]}}],\"arrayField\":[false,'You can do anything, but not everything.',{\"a\":'You can do anything, but not everything.'},'You can do anything, but not everything.','You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You can do anything, but not everything.',\"c\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,0.0]},\"_id\":'You must be the change you wish to see in the world. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Usted debe ser el cambio que deseas ver en el mundo.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"c\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":[{\"locHaystack\":[180.0,90.0],\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-90]}},'You can do anything, but not everything.',[1]]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"$date\": -111100000}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 180, 'lat': 0.0},\"b\":{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[180,90]},\"locHaystack\":{ 'lng': 180, 'lat': 90.0}},{\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,25]}},{\"$date\": 1202331498200},{\"locLegacy\":[25,25],\"arrayField\":[{\"b\":'You can do anything, but not everything.'}]},'You can do anything, but not everything.'],\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-90]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":true,\"d\":'The richest man is not he who has the most, but he who needs the least. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0]},\"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"$date\": 1391633433037},null],\"locLegacy\":[0,33.3]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"c\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'}],\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Usted puede hacer cualquier cosa, pero no todo.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"locHaystack\":[-33.3,-90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":1,\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 180, 'lat': 90}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -179.9, 'lat': -25},\"locLegacy\":[0.0,-25],\"arrayField\":[{\"a\":'You miss 100 percent of the shots you never take. anything'},{\"arrayField\":['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'],\"locLegacy\":[179.9,0],\"d\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'},314159265013]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265007],\"locHaystack\":{ 'lng': 0.0, 'lat': 90.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[0.0,-90],\"a\":{\"d\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything',\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-90.0]}}],\"b\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[false,{\"$date\": 1391633433037}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":'You can do anything, but not everything.',\"arrayField\":[314159265019]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"d\":'You can do anything, but not everything.'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['',{\"locHaystack\":{ 'lng': -180.0, 'lat': -90.0},\"arrayField\":['']}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"_id\":true}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[25,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 180.0, 'lat': 0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Usted debe ser el cambio que deseas ver en el mundo.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[''],\"arrayField\":[{\"_id\":{\"locHaystack\":{ 'lng': 0, 'lat': 33.3}}},{\"arrayField\":[]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'I quit therapy because my analyst was trying to help me behind my back. anything',\"locHaystack\":{ 'lng': -180, 'lat': 89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[179.9,0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Usted debe ser el cambio que deseas ver en el mundo.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Usted puede hacer cualquier cosa, pero no todo.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": -111100000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":['You can do anything, but not everything.'],\"d\":{}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"arrayField\":['You can do anything, but not everything.',-3.14159265359,null,['To the man who only has a hammer, everything he encounters begins to look like a nail. anything'],{\"a\":{\"locLegacy\":[-180,90]},\"d\":'You can do anything, but not everything.'},{\"$date\": 1500000},['To the man who only has a hammer, everything he encounters begins to look like a nail. anything'],{\"arrayField\":['','When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything',['You can do anything, but not everything.']],\"arrayField\":[[314159265007,{\"arrayField\":[{\"$date\": 1391633433037}]}],null]},'You must be the change you wish to see in the world. anything']}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[180,-25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"$date\": -111100000}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":true}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":314159265007,\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['',{\"arrayField\":[null,{\"arrayField\":['Usted debe ser el cambio que deseas ver en el mundo.','',''],\"locLegacy\":[-180,33.3],\"locHaystack\":[-33.3,33.3]}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['I quit therapy because my analyst was trying to help me behind my back. anything',{\"$date\": 1202331498200}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'',\"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,90]},\"arrayField\":[{\"arrayField\":['','I quit therapy because my analyst was trying to help me behind my back. anything']},{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-33.3]}},[{\"_id\":null}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,90.0]},\"arrayField\":['Echa de menos el 100 por ciento de los tiros que nunca toma.'],\"arrayField\":[{\"arrayField\":[{\"$date\": 1500000},[{\"arrayField\":[{\"arrayField\":[true]}]}]],\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,-89.9]}},{\"$date\": 1202331498200},null,'I quit therapy because my analyst was trying to help me behind my back. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.',true,{\"arrayField\":[{\"arrayField\":['You must be the change you wish to see in the world. anything']},{\"$date\": 1500000},{\"arrayField\":[0.00000000049406564841]},1]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[0.0,-25],\"locLegacy\":[25,-90.0],\"arrayField\":[[['You can do anything, but not everything.']],{\"c\":'I quit therapy because my analyst was trying to help me behind my back. anything'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"$date\": 1391633433037},\"c\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[2225073858072009000.99]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['',{\"arrayField\":['You can do anything, but not everything.',{\"arrayField\":[null],\"b\":[{\"d\":'You can do anything, but not everything.'},'The richest man is not he who has the most, but he who needs the least. anything']}]}],\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"arrayField\":[null]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[2225073858072009000.99],\"arrayField\":[[{\"arrayField\":['',{\"$date\": 1391633433037},314159265010]},false],{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,89.9]}}],\"arrayField\":[{\"_id\":{\"locHaystack\":[180,-25],\"a\":{}}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'',\"d\":'The richest man is not he who has the most, but he who needs the least. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"arrayField\":[]},\"b\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"d\":'Usted debe ser el cambio que deseas ver en el mundo.',\"locLegacy\":[-25,-33.3]}],\"arrayField\":['']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":['','You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"$date\": 1391633433037}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 25, 'lat': 25}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 33.3, 'lat': 0.0},\"_id\":-314159265359}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['',false]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[180.0,0],\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You must be the change you wish to see in the world. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"arrayField\":[{\"arrayField\":['',{\"arrayField\":[true,'I quit therapy because my analyst was trying to help me behind my back. anything','When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'],\"arrayField\":['Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas','You miss 100 percent of the shots you never take. anything',{\"d\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}]},{\"c\":{\"locHaystack\":{ 'lng': 0, 'lat': -90}}},314159265008]}]}],[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,0.0]}}],false,{\"locHaystack\":{ 'lng': 180, 'lat': -90}},{\"b\":[{\"b\":{\"arrayField\":[0,1],\"arrayField\":[{\"d\":{\"locHaystack\":[-180.0,-25],\"d\":'You can do anything, but not everything.',\"arrayField\":[{}],\"c\":314159265010},\"a\":'You can do anything, but not everything.'}],\"arrayField\":[[{\"b\":'You can do anything, but not everything.'}]],\"locLegacy\":[-25,-25]}}]},{\"locHaystack\":[33.3,-89.9]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"c\":'You can do anything, but not everything.'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"b\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',\"arrayField\":['Echa de menos el 100 por ciento de los tiros que nunca toma.',{},['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything']]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You must be the change you wish to see in the world. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-179.9,0],\"arrayField\":[{\"arrayField\":[{\"arrayField\":['Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.',{\"arrayField\":[[{\"d\":'You can do anything, but not everything.'},0],'']},314159265019,{\"b\":[[null],[{\"locHaystack\":[180.0,-89.9],\"c\":false},{\"d\":''}]]}]},null,[null],{\"arrayField\":[{\"arrayField\":[{\"$date\": 1500000}]}],\"_id\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,-25]}}},{\"arrayField\":[true]},'You must be the change you wish to see in the world. anything',{\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,0]},\"locHaystack\":{ 'lng': -180.0, 'lat': -90}}]},{\"locHaystack\":[-180,25]},{\"b\":314159265004,\"locHaystack\":{ 'lng': 179.9, 'lat': 90},\"arrayField\":[{\"a\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything'},{\"d\":{\"arrayField\":['Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything',[{\"a\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,25]}},\"locHaystack\":[25,-90]},{\"$date\": -111100000}],{\"_id\":'The richest man is not he who has the most, but he who needs the least. anything'}]}}]},{\"$date\": 1500000}],\"arrayField\":[-3.14159265000,'You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"locHaystack\":{ 'lng': -25, 'lat': 33.3},\"arrayField\":['']}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 33.3, 'lat': 90.0},\"arrayField\":['You can do anything, but not everything.',314159265019]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1500000},{\"arrayField\":['The richest man is not he who has the most, but he who needs the least. anything']},[[{\"arrayField\":[0.0]}],'You can do anything, but not everything.'],'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.','You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[-3.14159265000]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Echa de menos el 100 por ciento de los tiros que nunca toma.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': -25}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -33.3, 'lat': 90.0},\"arrayField\":[],\"locHaystack\":{ 'lng': 180.0, 'lat': 0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,0]},\"arrayField\":[{\"locHaystack\":[-180.0,0.0]},2225073858072009000.99,'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything']},'The richest man is not he who has the most, but he who needs the least. anything']}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,90]},\"arrayField\":[null],\"arrayField\":[-314159265359]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[25,-89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":['You can do anything, but not everything.']}],\"a\":'You can do anything, but not everything.',\"locLegacy\":[-33.3,33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-25,89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.',null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[180.0,90.0],\"arrayField\":[314159265007]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"a\":314159265007,\"arrayField\":[{\"arrayField\":[{\"d\":''}]},{\"arrayField\":[true,'']}]},'']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":['You can do anything, but not everything.']}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[0],\"arrayField\":[[null,'You can do anything, but not everything.',{\"c\":{\"locHaystack\":[0.0,0.0],\"arrayField\":[{\"$date\": -111100000}]}}],{\"loc\":{\"type\":\"Point\",\"coordinates\":[25,90.0]},\"arrayField\":[null]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"arrayField\":[{\"c\":{\"d\":'',\"locHaystack\":{ 'lng': -33.3, 'lat': -90}},\"arrayField\":['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'],\"arrayField\":[314159265004]},{\"arrayField\":[{\"arrayField\":[true]}]},314159265004]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 0, 'lat': 90}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":false}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":2225073858072009000.99}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locHaystack\":[0,-25]},'You can do anything, but not everything.',{\"$date\": 1202331498200}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[0.0,89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"arrayField\":[1,'You can do anything, but not everything.',{\"d\":{\"arrayField\":[]}}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"b\":'You can do anything, but not everything.'}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-179.9,0.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":314159265007}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265019,'']}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[0,-89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": -111100000},{\"$date\": -111100000}],\"arrayField\":[[0.0],{\"arrayField\":[-3.14159265000]},true,'Usted debe ser el cambio que deseas ver en el mundo.',{\"a\":[[{\"arrayField\":[0]}]]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[0.00002225073858072014,0.00002225073858072014]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[180.0,89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 0.0, 'lat': -89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['The richest man is not he who has the most, but he who needs the least. anything','I quit therapy because my analyst was trying to help me behind my back. anything'],\"locHaystack\":[25,-25],\"b\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": -111100000},{\"locHaystack\":[-25,25]},{\"arrayField\":[['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'],'To the man who only has a hammer, everything he encounters begins to look like a nail. anything']}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'The richest man is not he who has the most, but he who needs the least. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null],\"arrayField\":[{\"$date\": 1202331498200}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You miss 100 percent of the shots you never take. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['The richest man is not he who has the most, but he who needs the least. anything',314159265012,0,true,{\"arrayField\":[{\"arrayField\":[0.00000000049406564841,-3.14159265000]},{\"arrayField\":[{\"a\":true},false,{\"$date\": 1500000}],\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,90]}}]},314159265012],\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['',null]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":314159265018}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":314159265009,\"d\":'You miss 100 percent of the shots you never take. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"locHaystack\":{ 'lng': -25, 'lat': 90}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"$date\": 1500000}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-25,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'You must be the change you wish to see in the world. anything',\"arrayField\":[[[{\"arrayField\":[[{\"d\":{\"arrayField\":['When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'],\"c\":{\"arrayField\":[]}}}],'Usted debe ser el cambio que deseas ver en el mundo.']}],{\"$date\": 1500000},null,{\"arrayField\":[]}],null,{\"arrayField\":[true,'Echa de menos el 100 por ciento de los tiros que nunca toma.'],\"a\":'You can do anything, but not everything.'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[],\"locLegacy\":[33.3,-90.0],\"arrayField\":[{\"$date\": 1391633433037}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"locHaystack\":[25,0.0]},\"locHaystack\":[33.3,0],\"d\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1202331498200}],\"arrayField\":[true,'','To the man who only has a hammer, everything he encounters begins to look like a nail. anything',{\"_id\":'You can do anything, but not everything.'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,0.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[33.3,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'You must be the change you wish to see in the world. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null],\"arrayField\":[{\"locHaystack\":[0.0,-90]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Usted debe ser el cambio que deseas ver en el mundo.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locLegacy\":[180,0.0]},'You can do anything, but not everything.','You can do anything, but not everything.',314159265007]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[25,-33.3],\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,90.0]},\"locHaystack\":{ 'lng': -33.3, 'lat': 33.3}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.',{\"c\":'You can do anything, but not everything.',\"a\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"d\":{\"d\":{\"c\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,0.0]},\"locHaystack\":[-180.0,25],\"arrayField\":[{\"a\":'You can do anything, but not everything.'},'',0,{\"arrayField\":[{},{\"arrayField\":[],\"arrayField\":[314159265018,{\"c\":'You can do anything, but not everything.'}]},{\"locHaystack\":{ 'lng': 0.0, 'lat': -89.9}}],\"locHaystack\":{ 'lng': 0, 'lat': 90}},0,{\"locHaystack\":[180.0,33.3]},0,{\"arrayField\":[[{\"locHaystack\":{ 'lng': 180, 'lat': 25}},{\"arrayField\":[{\"locHaystack\":{ 'lng': 180.0, 'lat': 0},\"_id\":{\"_id\":{\"locLegacy\":[25,0.0],\"d\":'You can do anything, but not everything.'}}}]}]]}]}}},\"arrayField\":[null,[314159265015,[[null]]]]},\"a\":-3.14159265859,\"locHaystack\":[-179.9,-90]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"c\":'You must be the change you wish to see in the world. anything'}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 0.0, 'lat': 89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"c\":'You can do anything, but not everything.'},[{\"$date\": -111100000}],{\"arrayField\":['','Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas']},'You miss 100 percent of the shots you never take. anything',{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,89.9]}}],\"c\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"locHaystack\":[-25,90.0]}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'Usted puede hacer cualquier cosa, pero no todo.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[179.9,90],\"c\":{}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-25,90]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265000]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -33.3, 'lat': -89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,90]},\"c\":'Usted puede hacer cualquier cosa, pero no todo.',\"locHaystack\":{ 'lng': 33.3, 'lat': 90.0},\"d\":null,\"locLegacy\":[-180,33.3],\"d\":'You can do anything, but not everything.'}],0,{\"locHaystack\":[180.0,-89.9]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,-25]},\"locHaystack\":[25,0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,25]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":{\"$date\": 1202331498200},\"d\":{\"a\":'You can do anything, but not everything.',\"arrayField\":[{}]},\"a\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 0, 'lat': 89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[0.0,-25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"a\":'You can do anything, but not everything.'},'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1202331498200}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'I quit therapy because my analyst was trying to help me behind my back. anything',\"a\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":false}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['To the man who only has a hammer, everything he encounters begins to look like a nail. anything',{\"$date\": 1500000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[],\"c\":{\"b\":{\"a\":''}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -180, 'lat': -25}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"arrayField\":[]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{}],\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locLegacy\":[179.9,-25]},{\"locLegacy\":[33.3,-33.3]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":1797693134862315799999}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You can do anything, but not everything.',\"b\":2225073858072009000.99}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[33.3,-89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You miss 100 percent of the shots you never take. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"c\":0.00000000049406564841,\"b\":{\"$date\": 1202331498200}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 0, 'lat': -33.3}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -33.3, 'lat': 0.0},\"c\":'You can do anything, but not everything.',\"b\":'Usted debe ser el cambio que deseas ver en el mundo.',\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything',{},'You can do anything, but not everything.']],\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-180.0,-89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -180, 'lat': -89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -180.0, 'lat': 90.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-33.3,89.9],\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[180,-25]}},[1]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': 0},\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,25]},\"arrayField\":[1],\"arrayField\":[{\"c\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'},{\"arrayField\":[[{\"arrayField\":['']},{\"$date\": 1202331498200}]],\"arrayField\":[1797693134862315799999]},'','',{\"$date\": 1500000},null]}],\"_id\":{\"locLegacy\":[-180,-89.9]},\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,89.9]}}],\"arrayField\":[314159265011,['You must be the change you wish to see in the world. anything'],['Usted puede hacer cualquier cosa, pero no todo.']],\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-90]},\"loc\":{\"type\":\"Point\",\"coordinates\":[25,-89.9]},\"arrayField\":[{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,-90]}}]},true]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything',{\"a\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,-25]}}}],\"b\":{\"arrayField\":[null]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.','Usted puede hacer cualquier cosa, pero no todo.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 25, 'lat': -89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{},{\"locLegacy\":[-25,-25]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': 0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"locLegacy\":[-25,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-180.0,90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -179.9, 'lat': -90}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -33.3, 'lat': -25},\"b\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,33.3]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-180,25],\"a\":null,\"a\":{\"locHaystack\":[-25,-89.9],\"arrayField\":[{\"a\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-25]}}},{\"arrayField\":[{\"locHaystack\":[-179.9,-90.0]}]},-314159265359]},\"arrayField\":[{\"arrayField\":[false]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[true,'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas']}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'I quit therapy because my analyst was trying to help me behind my back. anything',\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"arrayField\":[{\"d\":314159265015},{\"arrayField\":['']}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1391633433037}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-179.9,33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-180,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[['Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas',314159265001,[{\"_id\":{\"_id\":{\"_id\":{\"$date\": 1202331498200},\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,89.9]},\"a\":''}}}]],{\"locHaystack\":[-180,90]}],{\"_id\":'',\"arrayField\":[{\"locHaystack\":{ 'lng': 25, 'lat': 0.0}}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"a\":{\"a\":{\"arrayField\":[{\"a\":{\"locHaystack\":[33.3,90.0],\"arrayField\":['You miss 100 percent of the shots you never take. anything'],\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,90]}},null]},\"arrayField\":[]},{\"arrayField\":[[null],{\"b\":{\"arrayField\":[{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-89.9]},\"arrayField\":[{\"arrayField\":[false]},{\"arrayField\":[{\"$date\": 1500000},null,{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,25]}}],\"arrayField\":[['You can do anything, but not everything.'],[{\"arrayField\":[314159265008]},'','You can do anything, but not everything.',{},null,'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'],{\"$date\": 1391633433037},'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'],\"arrayField\":[{\"b\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}]}]}]},{\"arrayField\":[{\"$date\": 1391633433037},null]},false],\"d\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'},\"locHaystack\":{ 'lng': 25, 'lat': -89.9},\"locLegacy\":[-180.0,90.0],\"arrayField\":[{\"d\":1,\"arrayField\":[{\"locHaystack\":[0,-90],\"arrayField\":[{\"c\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'},true]}]},'You can do anything, but not everything.']}],\"_id\":['']}]}}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,90.0]}}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"b\":[null]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,25]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'I quit therapy because my analyst was trying to help me behind my back. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,25]},\"b\":'You can do anything, but not everything.',\"arrayField\":[{\"a\":''},{\"$date\": 1202331498200},['The richest man is not he who has the most, but he who needs the least. anything']]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[0,{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,90]}},'',null,1,{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,25]},\"a\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'},{\"a\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'},{\"a\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything',\"c\":{\"$date\": 1391633433037}},'']}],\"a\":{\"arrayField\":['','You miss 100 percent of the shots you never take. anything']},\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'The richest man is not he who has the most, but he who needs the least. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[-314159265359]},[{}],'']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-180.0,0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"_id\":314159265000,\"arrayField\":[{\"arrayField\":[null]},{}]},\"arrayField\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[0,'',{\"arrayField\":[{\"locLegacy\":[179.9,33.3]}]}]},null,{\"_id\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,0]}}]},{\"locHaystack\":[0,-33.3]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"arrayField\":['Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas',{\"c\":314159265014},{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,0.0]}}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[],\"arrayField\":[{\"_id\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,-90]}},\"arrayField\":[{\"$date\": 1391633433037},{\"$date\": -111100000}],\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-33.3]},\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-25]},\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,89.9]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,-90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265006]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1500000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[25,90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"arrayField\":['You miss 100 percent of the shots you never take. anything',{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-90]}},'']},{\"a\":null},null]},{\"arrayField\":[{\"locLegacy\":[-179.9,-25]}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265008,{\"a\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-25]}},{\"locHaystack\":{ 'lng': 0, 'lat': 89.9}},{\"locHaystack\":[33.3,-89.9],\"a\":'You must be the change you wish to see in the world. anything'}],\"locHaystack\":{ 'lng': 25, 'lat': -33.3}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 179.9, 'lat': -33.3},\"arrayField\":[314159265002]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265008]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"a\":{\"arrayField\":[{\"arrayField\":[{\"arrayField\":[null,'',null,1]},{\"b\":null,\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-90.0]}},{\"arrayField\":[null,{\"arrayField\":[{\"_id\":1,\"arrayField\":[{\"arrayField\":[{\"arrayField\":[{\"locHaystack\":[-179.9,0.0]}]},{\"a\":{\"arrayField\":['You can do anything, but not everything.'],\"c\":{\"$date\": 1202331498200}},\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,-89.9]}},'']},{\"locHaystack\":{ 'lng': -180, 'lat': -33.3}},[{}],{\"locLegacy\":[0.0,0],\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-25]}},[]]}]}]},[{\"$date\": 1202331498200}]]}]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265001],\"a\":{}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,0.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 180, 'lat': -33.3}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"arrayField\":[{\"b\":314159265018},{\"locHaystack\":[-180.0,-90]}],\"b\":314159265000},'',{\"arrayField\":['',{\"a\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',\"b\":'You can do anything, but not everything.'}]},{\"locHaystack\":[0,90.0]},{\"a\":'You can do anything, but not everything.'}]},{\"arrayField\":[{\"d\":{\"_id\":false,\"b\":[{\"locLegacy\":[-33.3,-90]}]}}]},['',{\"locHaystack\":[0,90.0]},{\"a\":[-3.14159265359,{\"locLegacy\":[-179.9,-89.9]}]}],{\"$date\": 1202331498200}],\"arrayField\":[{\"arrayField\":['You can do anything, but not everything.']}],\"arrayField\":[0]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-180,-90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'You can do anything, but not everything.',\"locHaystack\":{ 'lng': 0.0, 'lat': 0.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"locHaystack\":{ 'lng': -25, 'lat': 0.0}}]},{}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-25,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,0.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"arrayField\":[]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"$date\": 1202331498200}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[0.0,-89.9],\"locLegacy\":[0.0,89.9],\"arrayField\":[null,null,'You must be the change you wish to see in the world. anything',false,{\"arrayField\":[true,'You can do anything, but not everything.']},'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything',{\"locLegacy\":[-25,90]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You must be the change you wish to see in the world. anything',\"c\":['',-3.14159265359,{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,90.0]},\"arrayField\":[],\"arrayField\":['I quit therapy because my analyst was trying to help me behind my back. anything']},{\"arrayField\":[1797693134862315799999]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[true,'You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-33.3,-90],\"arrayField\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locLegacy\":[180,90]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"c\":314159265014},true,{\"$date\": 1500000},{\"arrayField\":['Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas']},{\"arrayField\":[314159265012,{\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,-89.9]}}],\"arrayField\":[{}],\"loc\":{\"type\":\"Point\",\"coordinates\":[25,90.0]},\"c\":null}],\"locHaystack\":{ 'lng': -33.3, 'lat': -90.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[179.9,33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"d\":{\"$date\": 1202331498200},\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,90]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265002]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[0,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1500000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"$date\": 1500000}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[179.9,90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[],\"arrayField\":['']}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': -90},\"arrayField\":[{\"locHaystack\":[-180.0,-25]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locHaystack\":[0,-89.9],\"locLegacy\":[179.9,0]}],\"arrayField\":[{\"c\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything',\"locHaystack\":{ 'lng': 33.3, 'lat': -90.0},\"d\":'You can do anything, but not everything.',\"b\":{\"arrayField\":[{\"b\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,-90]}},\"arrayField\":[{\"_id\":314159265004},'Usted puede hacer cualquier cosa, pero no todo.']},314159265001]},\"c\":['To the man who only has a hammer, everything he encounters begins to look like a nail. anything','You can do anything, but not everything.']}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': 90.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[],{\"$date\": 1391633433037},{}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1391633433037}],\"arrayField\":[{\"$date\": -111100000},'You miss 100 percent of the shots you never take. anything'],\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"b\":false},\"c\":{\"d\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,90.0]}}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 0.0, 'lat': 89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"a\":'You can do anything, but not everything.'},'You can do anything, but not everything.',{\"$date\": -111100000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -180.0, 'lat': 90.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[true,{\"b\":[null],\"b\":{\"arrayField\":[{\"locHaystack\":{ 'lng': -180.0, 'lat': 90.0}}]},\"_id\":{\"d\":'Echa de menos el 100 por ciento de los tiros que nunca toma.',\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-33.3]}}},[false,{\"locHaystack\":{ 'lng': 33.3, 'lat': -33.3}}],{\"locLegacy\":[-25,90]}],\"locHaystack\":{ 'lng': -25, 'lat': -90}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-33.3,0],\"a\":'Usted puede hacer cualquier cosa, pero no todo.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,0.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"_id\":null},{\"_id\":'I quit therapy because my analyst was trying to help me behind my back. anything'},1]},{\"a\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'},{\"arrayField\":[null]},true]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-25,90]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265011,0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[0,0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locLegacy\":[-33.3,89.9]}],\"locLegacy\":[0.0,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"a\":{\"d\":null,\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,-25]},\"locLegacy\":[-180.0,-90.0]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -33.3, 'lat': -90}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': 90},\"locHaystack\":{ 'lng': -179.9, 'lat': 0},\"arrayField\":[[[{\"arrayField\":['',{\"locHaystack\":{ 'lng': 0, 'lat': 0},\"a\":{\"a\":{\"$date\": 1500000}}},'You can do anything, but not everything.','You miss 100 percent of the shots you never take. anything']}]]],\"c\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"locHaystack\":[-33.3,33.3]}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Echa de menos el 100 por ciento de los tiros que nunca toma.',\"arrayField\":[[-3.14159265000,'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything']],\"a\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[180.0,33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":{\"locHaystack\":[180,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"locHaystack\":[-33.3,-90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything',\"locLegacy\":[-25,-89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":[{\"_id\":'You can do anything, but not everything.',\"arrayField\":[null]}],\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-90.0]},\"locHaystack\":{ 'lng': 180.0, 'lat': -33.3}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 180, 'lat': 0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[0.0,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.',[{\"arrayField\":[],\"arrayField\":[314159265010]},1,{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,-89.9]}},null,{\"arrayField\":['Echa de menos el 100 por ciento de los tiros que nunca toma.'],\"a\":1,\"b\":2225073858072009000.99},{\"locHaystack\":[0.0,-89.9]}],'',{\"a\":{\"arrayField\":[null]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":true}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-25,90.0]},\"arrayField\":[{\"arrayField\":[{},true,{\"locLegacy\":[25,-89.9]}],\"c\":314159265001},{\"a\":{}},'You can do anything, but not everything.','Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',false,true]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[0,90]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null,{\"arrayField\":[{\"arrayField\":[0,[-3.14159265859,false]]}]},{}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[0.0,0.0],\"locHaystack\":[0,-90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0,90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'',\"arrayField\":[{\"arrayField\":['Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything']}],\"arrayField\":[{\"b\":{\"arrayField\":[{\"arrayField\":[{},{\"arrayField\":[{\"d\":{\"$date\": 1391633433037}}]}]}]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,33.3]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'',\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":-3.14159265359}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'The richest man is not he who has the most, but he who needs the least. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[-314159265359,'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"locHaystack\":[-180.0,0.0],\"b\":''},\"a\":'Usted debe ser el cambio que deseas ver en el mundo.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"a\":null}],\"arrayField\":[{\"$date\": 1202331498200}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":[314159265016],\"arrayField\":['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas',\"arrayField\":[0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":1,\"arrayField\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,25]},\"arrayField\":[{\"c\":{\"b\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"c\":false}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[25,0.0]}},{\"$date\": 1500000},{\"c\":'You can do anything, but not everything.'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-25,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[314159265006]},{\"locLegacy\":[180,90.0]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"b\":'You can do anything, but not everything.'},{\"locHaystack\":{ 'lng': -180, 'lat': 89.9}}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.',null,314159265007,'You can do anything, but not everything.',{\"arrayField\":[{\"locHaystack\":{ 'lng': 0.0, 'lat': -33.3}}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":[{\"arrayField\":[{\"c\":''},{\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,90.0]}},{\"arrayField\":[[],'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything']},1]},314159265014,0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-25,25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[25,0.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'You miss 100 percent of the shots you never take. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Usted puede hacer cualquier cosa, pero no todo.',\"arrayField\":['To the man who only has a hammer, everything he encounters begins to look like a nail. anything',{\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,0.0]}},{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,-89.9]}},'',{\"$date\": 1202331498200}],\"arrayField\":[{\"locLegacy\":[-180,25]}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"locLegacy\":[-33.3,90.0]}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.',\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,-25]}},{\"b\":-314159265359}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,89.9]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[25,90.0],\"c\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,90]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"b\":'You can do anything, but not everything.'},\"arrayField\":[0.00002225073858072014,314159265003,'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything','Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null,2225073858072009000.99]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[180,-90]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"locLegacy\":[179.9,89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":0}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":true}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[180,90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0,0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-180,90],\"_id\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[0,[{\"arrayField\":[{\"$date\": 1500000}]}]],\"locLegacy\":[25,-33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[0,-90]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,90]}},{\"d\":'The richest man is not he who has the most, but he who needs the least. anything'},0.0,{\"arrayField\":[null]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Usted debe ser el cambio que deseas ver en el mundo.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,90.0]}},\"d\":{\"c\":{\"arrayField\":[['Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything']],\"locLegacy\":[180,90]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1391633433037},{\"locHaystack\":[179.9,90.0]}],\"d\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,90.0]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":'The richest man is not he who has the most, but he who needs the least. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-25]},\"locLegacy\":[-180,90]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 179.9, 'lat': -90}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"c\":true},{\"arrayField\":[314159265004]}],\"b\":'You can do anything, but not everything.',\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-89.9]},\"b\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything',\"locHaystack\":[180.0,25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"_id\":'Echa de menos el 100 por ciento de los tiros que nunca toma.',\"d\":'You must be the change you wish to see in the world. anything'}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"$date\": 1391633433037}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You miss 100 percent of the shots you never take. anything','You can do anything, but not everything.',{\"$date\": 1500000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"b\":{\"b\":['You can do anything, but not everything.',314159265004]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[0,-25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[33.3,25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': -90.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -180.0, 'lat': 90.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":null,\"a\":{\"arrayField\":[{\"_id\":true},{\"c\":'You can do anything, but not everything.'},{\"a\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.',\"locHaystack\":{ 'lng': 179.9, 'lat': 33.3}},[''],'You can do anything, but not everything.',{\"locHaystack\":[-33.3,0]},{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,90]},\"arrayField\":['You must be the change you wish to see in the world. anything']},{\"locLegacy\":[0,90.0],\"arrayField\":[{\"_id\":null},{\"a\":''},{\"arrayField\":['You can do anything, but not everything.']},null,{\"$date\": 1391633433037}]},'You can do anything, but not everything.',false],\"_id\":0.0,\"arrayField\":[null,{\"a\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'},{\"arrayField\":[false,{\"c\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}]}],\"locLegacy\":[-179.9,90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265004]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-180,89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locHaystack\":[-33.3,-89.9]}],\"c\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Usted debe ser el cambio que deseas ver en el mundo.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,0.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 180.0, 'lat': 0.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,25]}}]},-3.14159265859]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-179.9,90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0.0]},\"a\":{\"arrayField\":[null]}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0,90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":null,\"arrayField\":[314159265005]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': -33.3}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('528550d1ce5c8a109ee12275')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,0.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"arrayField\":['']}],{\"arrayField\":[{\"$date\": 1391633433037}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You miss 100 percent of the shots you never take. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['You miss 100 percent of the shots you never take. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 0, 'lat': 90.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-33.3,89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'Echa de menos el 100 por ciento de los tiros que nunca toma.',\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[25,0]},\"arrayField\":[[{\"$date\": 1500000}]]},true,{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,25]}},{\"arrayField\":[],\"arrayField\":[{\"b\":'You can do anything, but not everything.',\"d\":{\"$date\": 1500000}},{\"locHaystack\":[-25,33.3]}],\"b\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything',\"loc\":{\"type\":\"Point\",\"coordinates\":[25,90.0]},\"arrayField\":[{\"locHaystack\":{ 'lng': 0.0, 'lat': 0.0}},'Usted puede hacer cualquier cosa, pero no todo.']}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"arrayField\":[{\"locHaystack\":{ 'lng': -25, 'lat': 0},\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,25]}}]}]],\"c\":[{\"locHaystack\":{ 'lng': 179.9, 'lat': 0}}],\"d\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': 179.9, 'lat': -90}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-25,-89.9]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,0]},\"loc\":{\"type\":\"Point\",\"coordinates\":[25,0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":false,\"arrayField\":['When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'You can do anything, but not everything.',\"locHaystack\":[33.3,-90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-25,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":true}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": -111100000},{\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,90]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,-25]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,-90]}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[314159265016],\"locLegacy\":[0,25],\"a\":{\"a\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,90]}},\"loc\":{\"type\":\"Point\",\"coordinates\":[180,33.3]},\"d\":0.0}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"arrayField\":['Echa de menos el 100 por ciento de los tiros que nunca toma.',{\"arrayField\":[{\"arrayField\":[null],\"b\":'I quit therapy because my analyst was trying to help me behind my back. anything'}],\"arrayField\":[true,{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,0.0]},\"locHaystack\":[-25,90]},{\"a\":0}]}]},\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-25,-90],\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,-33.3]},\"b\":{\"arrayField\":[{\"a\":''},'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything',{\"b\":'You must be the change you wish to see in the world. anything'}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"_id\":{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[180,-90]}}],\"c\":['Usted puede hacer cualquier cosa, pero no todo.','I quit therapy because my analyst was trying to help me behind my back. anything',{\"arrayField\":[true]}],\"arrayField\":[{\"locHaystack\":[-33.3,90]}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":314159265013}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[-180,-25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"arrayField\":[['You can do anything, but not everything.',{\"$date\": 1500000},314159265008,[0,{\"locLegacy\":[0,-89.9]},{},'You can do anything, but not everything.'],{\"arrayField\":[{\"b\":{\"b\":null,\"arrayField\":[{\"arrayField\":[{\"d\":'You must be the change you wish to see in the world. anything'}]},null]}},{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,89.9]},\"c\":{\"$date\": 1391633433037},\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-89.9]}}]},false]]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[0,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[-180,90],\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[0,{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,90.0]}},{\"locLegacy\":[-180.0,0.0]}],\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,33.3]}}],\"loc\":{\"type\":\"Point\",\"coordinates\":[0,25]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[25,0]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"b\":[null,'You miss 100 percent of the shots you never take. anything','You can do anything, but not everything.',{\"$date\": 1500000}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,0.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[1]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[180,0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":[180,33.3]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854ffcce5c8a109ee12274')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[false]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,0]},\"locLegacy\":[0,90.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['',null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":-314159265359}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': 89.9},\"_id\":{\"arrayField\":[{\"arrayField\":['']},[0,{\"arrayField\":[314159265010]}]]},\"arrayField\":['You miss 100 percent of the shots you never take. anything',[{\"locHaystack\":[179.9,-33.3]},{\"$date\": -111100000}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":{\"locLegacy\":[-180,-33.3]},\"arrayField\":[1]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":[{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[180,89.9]}},{\"$date\": 1500000},[[1797693134862315799999],'You can do anything, but not everything.'],314159265003,{\"arrayField\":[{\"$date\": 1202331498200},{\"c\":'I quit therapy because my analyst was trying to help me behind my back. anything'},'',{\"c\":{\"arrayField\":[-3.14159265000]}},true,'',1,{\"arrayField\":['Usted puede hacer cualquier cosa, pero no todo.']},{\"$date\": 1500000},'']},2225073858072009000.99,[]]}],\"arrayField\":[[{\"$date\": -111100000}],'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.',null,'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.',{\"$date\": 1391633433037},true]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[{\"a\":'I quit therapy because my analyst was trying to help me behind my back. anything'}]},{\"locHaystack\":{ 'lng': 180, 'lat': 25}}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180,90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"d\":{\"$date\": 1391633433037}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"$date\": 1391633433037},[{\"_id\":'You can do anything, but not everything.'}]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['',{\"a\":'You can do anything, but not everything.'},{\"arrayField\":[{\"arrayField\":[-3.14159265359]}]},[-3.14159265859]]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-33.3]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"$date\": -111100000},{\"c\":{\"locLegacy\":[-25,89.9]},\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-25]}}],{\"a\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[179.9,0.0]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[0],null,null,'Echa de menos el 100 por ciento de los tiros que nunca toma.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":null}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,0]},\"arrayField\":[314159265013]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locHaystack\":{ 'lng': -25, 'lat': -89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('507f1f77bcf86cd799439011')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-180,0.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":[{\"arrayField\":[{\"arrayField\":[314159265010,{\"d\":'The richest man is not he who has the most, but he who needs the least. anything'},null]},'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything','','You can do anything, but not everything.',314159265004,[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,-90]}},[{\"d\":314159265014,\"locHaystack\":[0,-33.3]},{\"arrayField\":[null,'The richest man is not he who has the most, but he who needs the least. anything']}],{},[{\"c\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'},null]],314159265013]},{\"c\":'You can do anything, but not everything.',\"locHaystack\":[0.0,0.0]},[],{\"$date\": 1500000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[180,-90]}},\"a\":{\"a\":'You must be the change you wish to see in the world. anything'}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null,'You can do anything, but not everything.'],\"arrayField\":[0.00000000049406564841,'The richest man is not he who has the most, but he who needs the least. anything'],\"arrayField\":[{\"d\":'',\"locHaystack\":{ 'lng': 180.0, 'lat': 0.0}},1,{\"locHaystack\":{ 'lng': -179.9, 'lat': -33.3}},314159265002,[[['','You miss 100 percent of the shots you never take. anything']]],{\"arrayField\":[{\"$date\": 1500000},{\"_id\":{\"$date\": -111100000}},''],\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,89.9]},\"arrayField\":[null,false,'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything']}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[179.9,0],\"c\":{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,89.9]},\"arrayField\":[true,{\"arrayField\":[{\"locHaystack\":[-25,33.3]}]},null,314159265002,null]}],\"c\":{\"$date\": 1202331498200}}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[[{\"arrayField\":['',true],\"locHaystack\":[-179.9,90.0],\"arrayField\":[{\"locHaystack\":[33.3,-90],\"locHaystack\":[-180.0,33.3]}],\"arrayField\":[false,{\"$date\": 1391633433037}]},'You can do anything, but not everything.'],'You can do anything, but not everything.','You can do anything, but not everything.',false,{\"b\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[null,[null],{\"b\":'You can do anything, but not everything.'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":[]},[{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-89.9]}},314159265019,null],{\"locHaystack\":[-180,90.0]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + "}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-90]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"locLegacy\":[0.0,25]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":{\"a\":'Usted puede hacer cualquier cosa, pero no todo.',\"arrayField\":[{\"a\":[[{\"arrayField\":[{\"$date\": 1202331498200},[''],null]}]]}]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"b\":'You can do anything, but not everything.'},{\"arrayField\":[{\"b\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'},null,{\"arrayField\":[{\"locHaystack\":{ 'lng': 0, 'lat': 0}}]}],\"b\":'You can do anything, but not everything.'}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-25]},\"locHaystack\":{ 'lng': 179.9, 'lat': -89.9}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"locHaystack\":[0.0,89.9]}]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',\"arrayField\":[{\"$date\": 1500000},'']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":'You must be the change you wish to see in the world. anything'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"b\":2225073858072009000.99}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[{\"arrayField\":['To the man who only has a hammer, everything he encounters begins to look like a nail. anything'],\"locHaystack\":[0,-25]},{\"$date\": -111100000}]}" ));
_client.insert(kNameSpace, fromjson("{_id:ObjectId('52854feace5c8a109ee12273')}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":{\"locHaystack\":[179.9,89.9]},\"d\":false,\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-90.0]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":''}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":[[{\"b\":null},'']]}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"loc\":{\"type\":\"Point\",\"coordinates\":[25,-89.9]}}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"a\":'You can do anything, but not everything.'}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"arrayField\":['Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything','','You can do anything, but not everything.']}" ));
_client.insert(kNameSpace, fromjson("{_id:" + getNextId() + ", \"c\":'I quit therapy because my analyst was trying to help me behind my back. anything'}" ));
        }
    };

    // Queries generated from NLTK are in the following format:
    // struct GeneratedQueryN {
    //     static BSONObj getQuery() { return query; }
    //     static BSONObj query;
    // };
    // BSONObj GeneratedQueryN::query = fromjson("{a:1}");

struct GeneratedQuery1 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery1::query("{\"arrayField\":null}");    Query GeneratedQuery1::sortedQuery = appendSort(GeneratedQuery1::query);    
struct GeneratedQuery2 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery2::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");    BSONObj GeneratedQuery2::projection = fromjson("{c:1,\"d\":1}");
struct GeneratedQuery3 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery3::query("{\"$or\":[{\"d\":{\"$mod\":[314159265,314159265]}},{\"c\":0}]}");    BSONObj GeneratedQuery3::projection = fromjson("{\"c\":1}");
struct GeneratedQuery4 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery4::query("{d:{\"$date\": 1202331498200}}");    BSONObj GeneratedQuery4::projection = fromjson("{\"b\":1,\"a\":1,\"d\":1}");
struct GeneratedQuery5 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery5::query("{\"$and\":[{\"loc\":{\"$near\":[33.3,33.3]}},{\"arrayField.a\":{\"$elemMatch\":{c:true,\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}}}]}");
struct GeneratedQuery6 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery6::query("{\"$where\":'this.d != undefined'}");    Query GeneratedQuery6::sortedQuery = appendSort(GeneratedQuery6::query);    
struct GeneratedQuery7 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery7::query("{\"$and\":[{\"arrayField.c\":{\"$elemMatch\":{\"b\":{\"$date\": 1391633433037}}}},{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'},{c:314159265012}]}");
struct GeneratedQuery8 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery8::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");    BSONObj GeneratedQuery8::projection = fromjson("{\"b\":1}");
struct GeneratedQuery9 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return -1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery9::query("{\"b\":{\"$size\":NumberInt(0)}}");    BSONObj GeneratedQuery9::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery10 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery10::query("{c:{\"$mod\":[314159265,314159215]}}");    BSONObj GeneratedQuery10::projection = fromjson("{\"_id\":1,_id:1}");
struct GeneratedQuery11 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery11::query("{\"b\":314159265007}");    BSONObj GeneratedQuery11::projection = fromjson("{a:1}");
struct GeneratedQuery12 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery12::query("{\"arrayField\":314159265011}");
struct GeneratedQuery13 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery13::query("{a:'You can do anything, but not everything.'}");
struct GeneratedQuery14 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery14::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");
struct GeneratedQuery15 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery15::query("{\"$nor\":[{\"d\":3.14159265359}]}");
struct GeneratedQuery16 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery16::query("{\"a\":{\"$gt\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything'}}");    BSONObj GeneratedQuery16::projection = fromjson("{b:1}");
struct GeneratedQuery17 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery17::query("{\"loc\":{\"$geoIntersects\":{\"$geometry\":{\"type\":\"Polygon\",\"coordinates\":[[ [0,0],[3,1], [3,2], [2,7],[-1,10], [-2,5], [-3,2],[-9,-1], [-7,-3], [-2,-7],[2,-9], [3,-6], [4,-2],[0,0]]]}}}}");
struct GeneratedQuery18 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery18::query("{c:{\"$gte\":''}}");    Query GeneratedQuery18::sortedQuery = appendSort(GeneratedQuery18::query);    BSONObj GeneratedQuery18::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery19 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{d:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery19::query("{_id:'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'}");    Query GeneratedQuery19::sortedQuery = appendSort(GeneratedQuery19::query);    
struct GeneratedQuery20 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery20::query("{\"$and\":[{\"loc\":{\"$geoIntersects\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-33.3,33.3]}}}}]}");    Query GeneratedQuery20::sortedQuery = appendSort(GeneratedQuery20::query);    BSONObj GeneratedQuery20::projection = fromjson("{\"b\":1}");
struct GeneratedQuery21 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery21::query("{\"b\":{\"$not\":{\"$mod\":[314159215,314159255]}}}");    BSONObj GeneratedQuery21::projection = fromjson("{\"d\":1}");
struct GeneratedQuery22 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery22::query("{\"arrayField\":314159265017}");
struct GeneratedQuery23 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery23::query("{\"arrayField._id\":{\"$exists\":1}}");    Query GeneratedQuery23::sortedQuery = appendSort(GeneratedQuery23::query);    
struct GeneratedQuery24 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery24::query("{\"$nor\":[{\"b\":{\"$not\":{\"$all\":[]}}}]}");
struct GeneratedQuery25 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery25::query("{\"$and\":[{\"d\":{\"$date\": -111100000}},{\"c\":3.14159265359}]}");
struct GeneratedQuery26 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery26::query("{\"b\":314159265013}");
struct GeneratedQuery27 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery27::query("{\"c\":{\"arrayField\":[{\"locHaystack\":[0.0,-90.0],\"b\":null,\"locLegacy\":[180,-25]}],\"c\":{\"arrayField\":[null]}}}");    Query GeneratedQuery27::sortedQuery = appendSort(GeneratedQuery27::query);    BSONObj GeneratedQuery27::projection = fromjson("{\"c\":1,\"d\":1}");
struct GeneratedQuery28 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery28::query("{\"b\":314159265018}");
struct GeneratedQuery29 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery29::query("{\"$nor\":[{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'},{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}]}");
struct GeneratedQuery30 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery30::query("{\"a\":{\"$date\": -111100000}}");
struct GeneratedQuery31 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery31::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");    Query GeneratedQuery31::sortedQuery = appendSort(GeneratedQuery31::query);    BSONObj GeneratedQuery31::projection = fromjson("{c:1}");
struct GeneratedQuery32 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery32::query("{\"$and\":[{\"arrayField.d\":{\"$lte\":false,\"$type\":4,\"$not\":{\"$elemMatch\":{\"d\":'You miss 100 percent of the shots you never take. anything'}},\"$mod\":[314159265,314159285]}}]}");    BSONObj GeneratedQuery32::projection = fromjson("{\"c\":1}");
struct GeneratedQuery33 {      static Query getQuery() { return query; }      static int nToSkip() { return 100; }      static int nToLimit() { return 100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery33::query("{\"arrayField\":{\"$size\":NumberLong(314159265358979393)}}");
struct GeneratedQuery34 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery34::query("{\"arrayField\":{\"$elemMatch\":{a:0}}}");    BSONObj GeneratedQuery34::projection = fromjson("{b:1}");
struct GeneratedQuery35 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return -10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery35::query("{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}");
struct GeneratedQuery36 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery36::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");    Query GeneratedQuery36::sortedQuery = appendSort(GeneratedQuery36::query);    BSONObj GeneratedQuery36::projection = fromjson("{\"b\":1}");
struct GeneratedQuery37 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery37::query("{\"$nor\":[{\"arrayField\":'Usted puede hacer cualquier cosa, pero no todo.'}]}");    BSONObj GeneratedQuery37::projection = fromjson("{\"a\":1}");
struct GeneratedQuery38 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery38::query("{b:{\"$date\": 1391633433037}}");    BSONObj GeneratedQuery38::projection = fromjson("{\"a\":1}");
struct GeneratedQuery39 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery39::query("{b:{\"$not\":{\"$lt\":null}}}");
struct GeneratedQuery40 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery40::query("{\"a\":314159265016}");
struct GeneratedQuery41 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery41::query("{\"c\":{\"$mod\":[2147483647,314159235]}}");    BSONObj GeneratedQuery41::projection = fromjson("{\"arrayField.$\":1,\"c.c\":1,\"d.b\":1}");
struct GeneratedQuery42 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return -100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery42::query("{\"d\":null}");
struct GeneratedQuery43 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery43::query("{\"d\":{\"$date\": 1202331498200}}");
struct GeneratedQuery44 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery44::query("{\"arrayField\":'You miss 100 percent of the shots you never take. anything'}");
struct GeneratedQuery45 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery45::query("{\"arrayField\":{\"$all\":['You can do anything, but not everything.',{\"a\":null}]}}");    Query GeneratedQuery45::sortedQuery = appendSort(GeneratedQuery45::query);    BSONObj GeneratedQuery45::projection = fromjson("{\"d\":1}");
struct GeneratedQuery46 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery46::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");    Query GeneratedQuery46::sortedQuery = appendSort(GeneratedQuery46::query);    BSONObj GeneratedQuery46::projection = fromjson("{\"d\":1}");
struct GeneratedQuery47 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery47::query("{\"arrayField\":{\"$elemMatch\":{\"arrayField\":{\"$not\":{\"$type\":2},\"$lte\":'',\"$all\":['The richest man is not he who has the most, but he who needs the least. anything'],\"$exists\":'',\"$exists\":1,\"$mod\":[314159215,2147483647]},\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}}}");    BSONObj GeneratedQuery47::projection = fromjson("{\"arrayField.$\":1,b:1}");
struct GeneratedQuery48 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery48::query("{\"_id\":{\"$mod\":[314159265,314159245]}}");    Query GeneratedQuery48::sortedQuery = appendSort(GeneratedQuery48::query);    
struct GeneratedQuery49 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery49::query("{\"arrayField\":{\"$size\":NumberInt(314159265)}}");
struct GeneratedQuery50 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery50::query("{\"d\":{\"$type\":18}}");
struct GeneratedQuery51 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery51::query("{\"$or\":[{\"c\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'mm'}}]}");    BSONObj GeneratedQuery51::projection = fromjson("{c:1}");
struct GeneratedQuery52 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery52::query("{\"arrayField\":{\"$date\": -111100000}}");    Query GeneratedQuery52::sortedQuery = appendSort(GeneratedQuery52::query);    
struct GeneratedQuery53 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery53::query("{\"arrayField.c\":{\"$size\":NumberLong(0)}}");
struct GeneratedQuery54 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery54::query("{\"arrayField\":{\"$date\": -111100000}}");    BSONObj GeneratedQuery54::projection = fromjson("{\"c\":1}");
struct GeneratedQuery55 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery55::query("{\"b\":{\"$regex\":\"/^abc(\\d+)/\"}}");
struct GeneratedQuery56 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery56::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");    Query GeneratedQuery56::sortedQuery = appendSort(GeneratedQuery56::query);    
struct GeneratedQuery57 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery57::query("{\"$nor\":[{\"a\":'You can do anything, but not everything.'}]}");    BSONObj GeneratedQuery57::projection = fromjson("{\"a\":{$elemMatch:{a:{\"$type\":15}}}}");
struct GeneratedQuery58 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery58::query("{d:0}");
struct GeneratedQuery59 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery59::query("{\"d\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''}}");
struct GeneratedQuery60 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery60::query("{\"arrayField.c\":{\"$elemMatch\":{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;',\"c\":{\"$regex\":\"/\\d?[A-E]\\*/\"}}}}");    Query GeneratedQuery60::sortedQuery = appendSort(GeneratedQuery60::query);    BSONObj GeneratedQuery60::projection = fromjson("{a:1,\"a\":1}");
struct GeneratedQuery61 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery61::query("{\"d.b\":null}");
struct GeneratedQuery62 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery62::query("{\"b\":{\"$mod\":[314159205,314159235]}}");    Query GeneratedQuery62::sortedQuery = appendSort(GeneratedQuery62::query);    
struct GeneratedQuery63 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery63::query("{\"$and\":[{\"$where\":'function myFunction() { return this.d != undefined; }'},{\"a\":{\"$mod\":[314159265,314159245]}}]}");    Query GeneratedQuery63::sortedQuery = appendSort(GeneratedQuery63::query);    
struct GeneratedQuery64 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery64::query("{\"b\":{\"$date\": -111100000}}");    BSONObj GeneratedQuery64::projection = fromjson("{\"b\":{$elemMatch:{c:null,_id:{\"$elemMatch\":{\"b\":{\"$exists\":0}}}}}}");
struct GeneratedQuery65 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery65::query("{\"d\":{\"$regex\":\"/\\d?[A-E]\\*/\"},\"d\":{\"$nin\":[1,true,'',null,314159265003,'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.']},\"c\":{\"$regex\":\"c a t #looks for cats\",\"$options\":''},\"c\":314159265000,\"a\":{\"$not\":{\"$not\":{\"$elemMatch\":{\"$where\":'function myFunction() { var x = 1 + 2; }',\"b\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'m'}}}},\"$exists\":0,\"$not\":{\"$not\":{\"$not\":{\"$mod\":[314159285,314159225]}}},\"$exists\":false,\"$not\":{\"$type\":14},\"$not\":{\"$all\":[{\"locHaystack\":{ 'lng': 25, 'lat': -90},\"_id\":'You can do anything, but not everything.'},{\"locLegacy\":[180,90.0]}]},\"$not\":{\"$not\":{\"$elemMatch\":{\"arrayField._id\":{\"$all\":[{\"_id\":['You can do anything, but not everything.']},{\"$date\": 1500000}]},\"$where\":'(this.a || this.b || this.c || this.d) > 10'}}},\"$mod\":[314159245,2147483647],\"$mod\":[314159275,314159245]},\"d\":{\"$not\":{\"$type\":2}}}");    Query GeneratedQuery65::sortedQuery = appendSort(GeneratedQuery65::query);    BSONObj GeneratedQuery65::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery66 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery66::query("{\"b\":314159265002}");
struct GeneratedQuery67 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery67::query("{\"d\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'mms'}}");
struct GeneratedQuery68 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery68::query("{\"d\":false}");
struct GeneratedQuery69 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery69::query("{\"arrayField\":[{\"c\":'You can do anything, but not everything.',\"arrayField\":['You miss 100 percent of the shots you never take. anything']},{\"arrayField\":[''],\"locLegacy\":[-33.3,-89.9]}]}");
struct GeneratedQuery70 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery70::query("{c:'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}");    BSONObj GeneratedQuery70::projection = fromjson("{b:1}");
struct GeneratedQuery71 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery71::query("{\"a\":{\"$exists\":0.00002225073858072014}}");
struct GeneratedQuery72 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery72::query("{\"loc\":{\"$nearSphere\":[25,0.0],\"$maxDistance\":0}}");    Query GeneratedQuery72::sortedQuery = appendSort(GeneratedQuery72::query);    BSONObj GeneratedQuery72::projection = fromjson("{\"d\":1}");
struct GeneratedQuery73 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery73::query("{\"a\":{\"$date\": 1391633433037}}");    Query GeneratedQuery73::sortedQuery = appendSort(GeneratedQuery73::query);    BSONObj GeneratedQuery73::projection = fromjson("{\"c\":1}");
struct GeneratedQuery74 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery74::query("{\"arrayField\":{\"$exists\":false}}");    BSONObj GeneratedQuery74::projection = fromjson("{\"a\":1}");
struct GeneratedQuery75 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery75::query("{\"_id.a\":{\"$not\":{\"$mod\":[314159265,2147483647]}}}");    Query GeneratedQuery75::sortedQuery = appendSort(GeneratedQuery75::query);    
struct GeneratedQuery76 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery76::query("{\"d\":{\"$date\": 1391633433037}}");    Query GeneratedQuery76::sortedQuery = appendSort(GeneratedQuery76::query);    BSONObj GeneratedQuery76::projection = fromjson("{\"d.a\":1,\"b\":1,\"a\":{$elemMatch:{\"arrayField\":{\"$elemMatch\":{\"$where\":'this.d != undefined',a:{\"$date\": 1391633433037}}},\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}},\"_id\":1}");
struct GeneratedQuery77 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery77::query("{\"$or\":[{\"a\":{\"$date\": 1202331498200}}]}");    Query GeneratedQuery77::sortedQuery = appendSort(GeneratedQuery77::query);    
struct GeneratedQuery78 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 100; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery78::query("{\"arrayField\":{\"$date\": 1500000}}");    BSONObj GeneratedQuery78::projection = fromjson("{d:1}");
struct GeneratedQuery79 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery79::query("{\"$and\":[{\"a\":{\"$date\": -111100000}}]}");
struct GeneratedQuery80 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery80::query("{d:314159265007}");    BSONObj GeneratedQuery80::projection = fromjson("{\"b\":1}");
struct GeneratedQuery81 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery81::query("{\"c\":{\"$date\": 1391633433037}}");    Query GeneratedQuery81::sortedQuery = appendSort(GeneratedQuery81::query);    BSONObj GeneratedQuery81::projection = fromjson("{\"a\":1}");
struct GeneratedQuery82 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery82::query("{\"arrayField\":{\"$type\":15,\"$not\":{\"$elemMatch\":{_id:null}},\"$mod\":[314159255,0]}}");    BSONObj GeneratedQuery82::projection = fromjson("{\"b\":1}");
struct GeneratedQuery83 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery83::query("{d:{\"$in\":[{\"$date\": 1500000}]}}");
struct GeneratedQuery84 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery84::query("{\"$and\":[{\"a\":{\"$date\": 1500000}}]}");
struct GeneratedQuery85 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery85::query("{\"arrayField.c.b\":{\"$mod\":[314159215,2147483647],\"$elemMatch\":{\"$where\":'function myFunction() { var x = 1 + 2; }'},\"$not\":{\"$size\":NumberInt(314159215)}}}");
struct GeneratedQuery86 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery86::query("{\"arrayField\":-3.14159265859}");
struct GeneratedQuery87 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery87::query("{\"arrayField.b\":{\"$ne\":314159265002}}");    Query GeneratedQuery87::sortedQuery = appendSort(GeneratedQuery87::query);    BSONObj GeneratedQuery87::projection = fromjson("{a:1}");
struct GeneratedQuery88 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery88::query("{\"$and\":[{\"loc\":{\"$geoIntersects\":{\"$geometry\":{\"type\":\"Polygon\",\"coordinates\":[[ [0,0],[4,0], [2,3], [1,7], [1,8],[-2,5], [-4,9], [-10,10], [-11,20],[-7,-2], [-5,-5], [-1,-19],[1,-20], [3,-10], [2,-3],[0,0]]]}}}},{\"d\":0}]}");
struct GeneratedQuery89 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery89::query("{\"$where\":'this.d != undefined'}");    BSONObj GeneratedQuery89::projection = fromjson("{\"arrayField.$\":1,\"d\":1}");
struct GeneratedQuery90 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery90::query("{\"arrayField.d.d.d\":{\"$not\":{\"$not\":{\"$exists\":false}},\"$type\":14}}");    Query GeneratedQuery90::sortedQuery = appendSort(GeneratedQuery90::query);    BSONObj GeneratedQuery90::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery91 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery91::query("{\"arrayField\":{\"$lt\":false}}");    BSONObj GeneratedQuery91::projection = fromjson("{\"d\":{$elemMatch:{\"arrayField\":true,\"c\":{\"$not\":{\"$not\":{\"$type\":5}}}}}}");
struct GeneratedQuery92 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery92::query("{\"b\":{\"$not\":{\"$gte\":0},\"$gte\":{\"arrayField\":[{\"locLegacy\":[180.0,-33.3]},{\"locHaystack\":{ 'lng': 0, 'lat': -90}}]}}}");
struct GeneratedQuery93 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery93::query("{\"$where\":'function myFunction() { return this.d != undefined; }'}");    Query GeneratedQuery93::sortedQuery = appendSort(GeneratedQuery93::query);    BSONObj GeneratedQuery93::projection = fromjson("{a:1}");
struct GeneratedQuery94 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery94::query("{\"$or\":[{\"arrayField\":{\"$size\":NumberInt(314159215)}}]}");
struct GeneratedQuery95 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery95::query("{\"d\":{\"$mod\":[2147483647,314159235]}}");
struct GeneratedQuery96 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery96::query("{b:{\"$elemMatch\":{\"arrayField\":{\"$date\": 1500000}}}}");    BSONObj GeneratedQuery96::projection = fromjson("{d:1}");
struct GeneratedQuery97 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery97::query("{\"arrayField.b.a\":{\"$size\":314159285}}");
struct GeneratedQuery98 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery98::query("{\"d\":null}");    BSONObj GeneratedQuery98::projection = fromjson("{b:{$elemMatch:{\"$where\":'function myFunction() { var x = 1 + 2; }',\"d\":'You can do anything, but not everything.'}}}");
struct GeneratedQuery99 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery99::query("{\"$nor\":[{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}]}");    Query GeneratedQuery99::sortedQuery = appendSort(GeneratedQuery99::query);    BSONObj GeneratedQuery99::projection = fromjson("{\"b\":1}");
struct GeneratedQuery100 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return -10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery100::query("{\"$or\":[{\"d\":''},{\"a\":{\"$mod\":[2147483647,314159285]}},{\"c\":0.00000000049406564841}]}");
struct GeneratedQuery101 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery101::query("{a:{\"$mod\":[314159225,2147483647]}}");
struct GeneratedQuery102 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery102::query("{\"a\":314159265011}");    Query GeneratedQuery102::sortedQuery = appendSort(GeneratedQuery102::query);    
struct GeneratedQuery103 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery103::query("{\"$or\":[{\"$where\":'this.d != undefined'}]}");
struct GeneratedQuery104 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery104::query("{\"d\":{\"$exists\":1}}");
struct GeneratedQuery105 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery105::query("{c:''}");
struct GeneratedQuery106 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery106::query("{\"$or\":[{a:false},{\"b\":[-3.14159265859,{\"locLegacy\":[-180.0,-33.3]},{\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-90]}},'You can do anything, but not everything.',[314159265006],{\"arrayField\":[{\"d\":'You can do anything, but not everything.'},314159265006]},'You can do anything, but not everything.',{\"locHaystack\":{ 'lng': 0, 'lat': 90.0}}]},{\"b\":-3.14159265000},{\"d\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'},{\"$where\":'function myFunction() { return this.d != undefined; }'}]}");
struct GeneratedQuery107 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery107::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");    BSONObj GeneratedQuery107::projection = fromjson("{\"a\":1,\"c\":1}");
struct GeneratedQuery108 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery108::query("{_id:{\"$size\":NumberLong(314159265358979373)}}");
struct GeneratedQuery109 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery109::query("{\"c\":{\"$regex\":\"c a t #looks for cats\",\"$options\":'ms'}}");
struct GeneratedQuery110 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery110::query("{\"_id\":{\"$in\":[{\"d\":'You miss 100 percent of the shots you never take. anything',\"arrayField\":[{\"arrayField\":[{\"arrayField\":[{\"a\":'You can do anything, but not everything.',\"c\":[[{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,-90.0]}}]},{\"arrayField\":[]}],{\"arrayField\":[{\"arrayField\":[{},{\"c\":{\"arrayField\":[{\"$date\": 1500000}],\"arrayField\":['You miss 100 percent of the shots you never take. anything',['The richest man is not he who has the most, but he who needs the least. anything'],'You can do anything, but not everything.','']}}]}]}]},{\"d\":'You can do anything, but not everything.',\"arrayField\":['The richest man is not he who has the most, but he who needs the least. anything','',{\"locHaystack\":{ 'lng': 0.0, 'lat': -90},\"arrayField\":[false,{\"locLegacy\":[-33.3,-33.3],\"a\":{\"b\":'You can do anything, but not everything.'}},{\"locHaystack\":[-180.0,90.0]}]}]},0.0,{\"_id\":314159265011},['You can do anything, but not everything.',{\"b\":null},'I quit therapy because my analyst was trying to help me behind my back. anything',0],'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas']},''],\"arrayField\":['Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything','You must be the change you wish to see in the world. anything','Usted debe ser el cambio que deseas ver en el mundo.',{\"arrayField\":['']}]}]}]}}");
struct GeneratedQuery111 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery111::query("{\"_id\":true}");
struct GeneratedQuery112 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery112::query("{b:'Usted puede hacer cualquier cosa, pero no todo.'}");
struct GeneratedQuery113 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery113::query("{\"$where\":'this.d != undefined'}");    Query GeneratedQuery113::sortedQuery = appendSort(GeneratedQuery113::query);    
struct GeneratedQuery114 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery114::query("{a:{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''}}");    BSONObj GeneratedQuery114::projection = fromjson("{\"a\":1}");
struct GeneratedQuery115 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery115::query("{\"$nor\":[{\"arrayField\":null},{\"c\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'ims'}}]}");    BSONObj GeneratedQuery115::projection = fromjson("{b:1}");
struct GeneratedQuery116 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery116::query("{\"_id\":{\"$regex\":\"/caseless/i\"}}");
struct GeneratedQuery117 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery117::query("{\"b\":{\"$not\":{\"$mod\":[314159255,314159255]}}}");    Query GeneratedQuery117::sortedQuery = appendSort(GeneratedQuery117::query);    
struct GeneratedQuery118 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery118::query("{\"$and\":[{\"arrayField\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'},{\"$where\":'function myFunction() { var x = 1 + 2; }'},{d:{\"arrayField\":[314159265018,'You miss 100 percent of the shots you never take. anything']}},{\"b\":{\"$date\": 1391633433037}},{\"arrayField\":314159265015}]}");
struct GeneratedQuery119 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery119::query("{b:{\"$regex\":\"c a t #looks for cats\",\"$options\":''}}");
struct GeneratedQuery120 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery120::query("{\"a\":'You can do anything, but not everything.'}");    BSONObj GeneratedQuery120::projection = fromjson("{\"b\":1}");
struct GeneratedQuery121 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery121::query("{\"a\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,0]},\"locHaystack\":[-25,90],\"locHaystack\":[0,33.3],\"d\":null}}");    Query GeneratedQuery121::sortedQuery = appendSort(GeneratedQuery121::query);    BSONObj GeneratedQuery121::projection = fromjson("{\"a\":1}");
struct GeneratedQuery122 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery122::query("{\"arrayField\":{\"$exists\":true}}");
struct GeneratedQuery123 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery123::query("{\"arrayField\":['','You miss 100 percent of the shots you never take. anything','You must be the change you wish to see in the world. anything',{\"a\":'You can do anything, but not everything.'}]}");
struct GeneratedQuery124 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery124::query("{\"$nor\":[{\"arrayField\":{\"$size\":NumberInt(314159255)}}]}");
struct GeneratedQuery125 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery125::query("{\"b\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}");
struct GeneratedQuery126 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery126::query("{_id:0}");
struct GeneratedQuery127 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery127::query("{\"arrayField\":{\"$date\": 1202331498200}}");
struct GeneratedQuery128 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery128::query("{\"$and\":[{\"arrayField\":null}]}");
struct GeneratedQuery129 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery129::query("{\"loc\":{\"$geoIntersects\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[33.3,90]}}}}");    Query GeneratedQuery129::sortedQuery = appendSort(GeneratedQuery129::query);    
struct GeneratedQuery130 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery130::query("{\"$or\":[{\"a\":{\"$regex\":\"/^abc(\\d+)/\"}},{\"_id\":{\"$date\": -111100000}}]}");    Query GeneratedQuery130::sortedQuery = appendSort(GeneratedQuery130::query);    
struct GeneratedQuery131 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery131::query("{d:{\"$regex\":\"/(a)|(b)/\"}}");
struct GeneratedQuery132 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery132::query("{\"arrayField\":{\"$elemMatch\":{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9',\"arrayField\":false}}}");    BSONObj GeneratedQuery132::projection = fromjson("{\"_id\":{$elemMatch:{\"d\":'Usted debe ser el cambio que deseas ver en el mundo.',\"a\":{\"$date\": 1500000}}}}");
struct GeneratedQuery133 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery133::query("{\"a\":{\"$regex\":\"/caseless/i\"}}");    Query GeneratedQuery133::sortedQuery = appendSort(GeneratedQuery133::query);    
struct GeneratedQuery134 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery134::query("{\"b\":true}");    Query GeneratedQuery134::sortedQuery = appendSort(GeneratedQuery134::query);    BSONObj GeneratedQuery134::projection = fromjson("{\"a\":1}");
struct GeneratedQuery135 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery135::query("{b:false}");
struct GeneratedQuery136 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery136::query("{\"$or\":[{b:false}]}");
struct GeneratedQuery137 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery137::query("{\"$or\":[{\"arrayField\":314159265008},{\"arrayField\":{\"$not\":{\"$elemMatch\":{a:{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":'i'}}}}}]}");
struct GeneratedQuery138 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery138::query("{\"$or\":[{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'},{\"arrayField\":{\"$all\":[['Usted debe ser el cambio que deseas ver en el mundo.'],{\"a\":{\"locHaystack\":{ 'lng': 0.0, 'lat': -25},\"b\":null,\"b\":{\"b\":3.14159265359}}}]}}]}");    Query GeneratedQuery138::sortedQuery = appendSort(GeneratedQuery138::query);    
struct GeneratedQuery139 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery139::query("{b:{\"$elemMatch\":{\"c\":{\"$type\":15},\"a\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'s'}}}}");    BSONObj GeneratedQuery139::projection = fromjson("{\"a\":1,\"_id\":1}");
struct GeneratedQuery140 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery140::query("{\"a.a\":{\"$nin\":[3.14159265359,314159265000,0.0,'You miss 100 percent of the shots you never take. anything']}}");    Query GeneratedQuery140::sortedQuery = appendSort(GeneratedQuery140::query);    BSONObj GeneratedQuery140::projection = fromjson("{\"a\":1}");
struct GeneratedQuery141 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery141::query("{\"arrayField\":1}");
struct GeneratedQuery142 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery142::query("{\"d.b\":{\"$not\":{\"$not\":{\"$elemMatch\":{\"d\":{\"$not\":{\"$not\":{\"$all\":[null,{\"b\":{\"arrayField\":['You can do anything, but not everything.']}},314159265018,[{},[true,''],314159265010]]}}}}}}}}");
struct GeneratedQuery143 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery143::query("{\"$where\":'this.d != undefined'}");    BSONObj GeneratedQuery143::projection = fromjson("{c:1,c:1}");
struct GeneratedQuery144 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery144::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");
struct GeneratedQuery145 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery145::query("{\"d\":{\"$type\":15}}");    BSONObj GeneratedQuery145::projection = fromjson("{\"a\":1}");
struct GeneratedQuery146 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery146::query("{\"arrayField.a\":{\"$elemMatch\":{\"arrayField.b.b.b._id\":{\"$elemMatch\":{\"loc\":{\"$nearSphere\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[179.9,90.0]}}},\"$where\":'function myFunction() { return this.d != undefined; }',\"a\":{\"$mod\":[2147483647,314159285]}}},\"_id\":{\"locHaystack\":[-180,-90],\"locHaystack\":[0,-90.0]}}}}");    Query GeneratedQuery146::sortedQuery = appendSort(GeneratedQuery146::query);    
struct GeneratedQuery147 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery147::query("{\"b\":{\"$date\": 1391633433037}}");    Query GeneratedQuery147::sortedQuery = appendSort(GeneratedQuery147::query);    BSONObj GeneratedQuery147::projection = fromjson("{\"d\":1}");
struct GeneratedQuery148 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery148::query("{\"$or\":[{b:'You can do anything, but not everything.'},{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'},{\"_id\":{\"$regex\":\"/\\d?[A-E]\\*/\"}}]}");
struct GeneratedQuery149 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery149::query("{\"arrayField\":'You can do anything, but not everything.'}");
struct GeneratedQuery150 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery150::query("{\"d\":314159265001}");    BSONObj GeneratedQuery150::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery151 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery151::query("{\"arrayField\":{\"$exists\":true}}");
struct GeneratedQuery152 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery152::query("{\"b\":314159265015}");
struct GeneratedQuery153 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery153::query("{\"$nor\":[{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}]}");
struct GeneratedQuery154 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery154::query("{\"d\":''}");    BSONObj GeneratedQuery154::projection = fromjson("{\"c\":1,\"d\":1}");
struct GeneratedQuery155 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery155::query("{\"_id\":{\"$regex\":\"/(tang|tangerine|tan)/\"}}");
struct GeneratedQuery156 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{d:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery156::query("{\"arrayField\":{\"$date\": 1500000}}");    Query GeneratedQuery156::sortedQuery = appendSort(GeneratedQuery156::query);    
struct GeneratedQuery157 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery157::query("{\"d\":{\"$size\":NumberInt(-314159265)}}");
struct GeneratedQuery158 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery158::query("{\"b\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'iim'}}");
struct GeneratedQuery159 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery159::query("{c:{\"$regex\":\"/abc\\def/\"}}");    Query GeneratedQuery159::sortedQuery = appendSort(GeneratedQuery159::query);    BSONObj GeneratedQuery159::projection = fromjson("{_id:1}");
struct GeneratedQuery160 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery160::query("{\"arrayField\":{\"$elemMatch\":{\"loc\":{\"$geoWithin\":{\"$geometry\":{\"type\":\"Polygon\",\"coordinates\":[[ [0,0],[3,0], [4,2], [2,3],[-1,2], [-2,6], [-3,1],[-14,-1], [-10,-4], [-3,-20],[2,-9], [3,-6], [4,-2],[0,0]]]}}},\"arrayField\":{\"$size\":NumberInt(314159295)},\"arrayField\":314159265008,_id:314159265010}}}");    Query GeneratedQuery160::sortedQuery = appendSort(GeneratedQuery160::query);    
struct GeneratedQuery161 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery161::query("{\"b\":{\"$regex\":\"/^abc/m\"}}");
struct GeneratedQuery162 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery162::query("{\"loc\":{\"$near\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[33.3,0.0]}}}}");    BSONObj GeneratedQuery162::projection = fromjson("{\"d\":1}");
struct GeneratedQuery163 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery163::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");
struct GeneratedQuery164 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery164::query("{\"arrayField\":{\"$date\": 1500000}}");    Query GeneratedQuery164::sortedQuery = appendSort(GeneratedQuery164::query);    
struct GeneratedQuery165 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery165::query("{\"arrayField\":{\"$gt\":{\"$date\": 1391633433037}}}");
struct GeneratedQuery166 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery166::query("{\"$nor\":[{\"b\":314159265016},{\"arrayField\":null},{\"arrayField\":'You can do anything, but not everything.'},{\"arrayField\":{\"$all\":[{\"locHaystack\":{ 'lng': -180.0, 'lat': -90}},{}]}},{d:{\"$not\":{\"$in\":[false,{\"$date\": 1391633433037},{\"_id\":{\"$date\": 1500000},\"b\":{\"$date\": 1391633433037},\"locLegacy\":[25,-25]},'']}}},{d:{\"$date\": 1500000}}]}");
struct GeneratedQuery167 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery167::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");
struct GeneratedQuery168 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b._id.b\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery168::query("{\"_id\":{\"$not\":{\"$not\":{\"$type\":13}}}}");    Query GeneratedQuery168::sortedQuery = appendSort(GeneratedQuery168::query);    BSONObj GeneratedQuery168::projection = fromjson("{\"a\":1}");
struct GeneratedQuery169 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery169::query("{c:{\"$regex\":\"/\\d?[A-E]\\*/\"}}");    Query GeneratedQuery169::sortedQuery = appendSort(GeneratedQuery169::query);    BSONObj GeneratedQuery169::projection = fromjson("{\"c\":1,c:1}");
struct GeneratedQuery170 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery170::query("{\"a.b\":{\"$date\": 1500000}}");
struct GeneratedQuery171 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery171::query("{_id:{\"$exists\":true}}");
struct GeneratedQuery172 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery172::query("{\"_id\":true}");    BSONObj GeneratedQuery172::projection = fromjson("{\"a\":1}");
struct GeneratedQuery173 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery173::query("{\"a\":{\"$not\":{\"$type\":7}}}");    BSONObj GeneratedQuery173::projection = fromjson("{\"b\":1}");
struct GeneratedQuery174 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery174::query("{\"arrayField\":1}");
struct GeneratedQuery175 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery175::query("{\"arrayField\":{\"$date\": -111100000}}");
struct GeneratedQuery176 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery176::query("{\"arrayField\":{\"$size\":NumberInt(314159215)}}");
struct GeneratedQuery177 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery177::query("{\"_id\":{\"$not\":{\"$elemMatch\":{\"loc\":{\"$geoWithin\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-25,-90]}}}}}}}");
struct GeneratedQuery178 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery178::query("{\"$and\":[{\"$where\":'this.d != undefined'}]}");
struct GeneratedQuery179 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery179::query("{\"$and\":[{c:{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}},{\"c\":{\"$elemMatch\":{\"d\":314159265009,\"_id\":[null,'',true]}}},{\"_id\":{\"$not\":{\"$exists\":1}}}]}");
struct GeneratedQuery180 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery180::query("{\"arrayField._id\":{\"$mod\":[314159255,314159245]}}");    Query GeneratedQuery180::sortedQuery = appendSort(GeneratedQuery180::query);    BSONObj GeneratedQuery180::projection = fromjson("{\"b\":1}");
struct GeneratedQuery181 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery181::query("{\"arrayField.c\":{\"$not\":{\"$all\":[314159265003,{\"arrayField\":['',{\"c\":{\"a\":''},\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,-90]}},{\"a\":{\"locHaystack\":[180,-89.9],\"loc\":{\"type\":\"Point\",\"coordinates\":[25,-33.3]},\"locHaystack\":[-180,89.9],\"b\":0,\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,90]}}}]},'You can do anything, but not everything.']},\"$lt\":'The richest man is not he who has the most, but he who needs the least. anything',\"$lt\":'You can do anything, but not everything.'}}");
struct GeneratedQuery182 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery182::query("{c:{\"$regex\":\"(a|bc)x+yz\",\"$options\":'s'}}");
struct GeneratedQuery183 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery183::query("{\"b\":{\"$not\":{\"$type\":14}}}");
struct GeneratedQuery184 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery184::query("{\"c\":{\"locHaystack\":[0,25]}}");    BSONObj GeneratedQuery184::projection = fromjson("{d:1}");
struct GeneratedQuery185 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery185::query("{\"$nor\":[{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}]}");
struct GeneratedQuery186 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery186::query("{\"arrayField.d\":{\"$exists\":true}}");    Query GeneratedQuery186::sortedQuery = appendSort(GeneratedQuery186::query);    BSONObj GeneratedQuery186::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery187 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery187::query("{\"$nor\":[{b:314159265019},{\"arrayField\":'Usted puede hacer cualquier cosa, pero no todo.'},{\"c\":{\"$date\": -111100000}}]}");    Query GeneratedQuery187::sortedQuery = appendSort(GeneratedQuery187::query);    BSONObj GeneratedQuery187::projection = fromjson("{\"b\":1,\"b\":{$elemMatch:{\"arrayField\":{\"$nin\":[1],\"$mod\":[314159215,2147483647]}}}}");
struct GeneratedQuery188 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery188::query("{\"a\":1}");
struct GeneratedQuery189 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery189::query("{\"$nor\":[{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'},{\"d\":{\"$regex\":\"/^\\d?\\d(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\d\\d$/\"}}]}");    BSONObj GeneratedQuery189::projection = fromjson("{\"c\":1}");
struct GeneratedQuery190 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery190::query("{\"$where\":'function myFunction() { return this.d != undefined; }'}");
struct GeneratedQuery191 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery191::query("{\"a\":{\"$regex\":\"c a t #looks for cats\",\"$options\":'smi'}}");    BSONObj GeneratedQuery191::projection = fromjson("{\"a\":{$slice:1},\"c\":1,\"a\":1}");
struct GeneratedQuery192 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery192::query("{\"$or\":[{\"a\":{\"$type\":-1}},{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}]}");    BSONObj GeneratedQuery192::projection = fromjson("{\"b\":1}");
struct GeneratedQuery193 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery193::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");    Query GeneratedQuery193::sortedQuery = appendSort(GeneratedQuery193::query);    
struct GeneratedQuery194 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery194::query("{\"arrayField.a\":{\"$size\":NumberInt(314159225)}}");
struct GeneratedQuery195 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery195::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");    Query GeneratedQuery195::sortedQuery = appendSort(GeneratedQuery195::query);    BSONObj GeneratedQuery195::projection = fromjson("{\"c\":1}");
struct GeneratedQuery196 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery196::query("{\"_id\":'You can do anything, but not everything.'}");    Query GeneratedQuery196::sortedQuery = appendSort(GeneratedQuery196::query);    BSONObj GeneratedQuery196::projection = fromjson("{\"a\":1}");
struct GeneratedQuery197 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery197::query("{\"arrayField\":false}");
struct GeneratedQuery198 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery198::query("{\"c\":false,\"arrayField\":2225073858072009000.99,\"arrayField\":{\"$all\":[[{\"locLegacy\":[-179.9,-89.9],\"arrayField\":['']}],[{\"a\":null,\"d\":false},{\"arrayField\":['Usted debe ser el cambio que deseas ver en el mundo.','Echa de menos el 100 por ciento de los tiros que nunca toma.',['You can do anything, but not everything.',314159265017],{\"d\":'You can do anything, but not everything.',\"c\":'You can do anything, but not everything.'}]},null],{\"$date\": 1202331498200}]}}");
struct GeneratedQuery199 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery199::query("{\"$nor\":[{\"b\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'m'}},{\"arrayField\":{\"$date\": 1391633433037}}]}");    BSONObj GeneratedQuery199::projection = fromjson("{a:1}");
struct GeneratedQuery200 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery200::query("{\"_id\":{\"$gte\":0.0}}");
struct GeneratedQuery201 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery201::query("{\"d\":{\"$lt\":0}}");
struct GeneratedQuery202 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery202::query("{d:{\"$type\":14}}");
struct GeneratedQuery203 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery203::query("{\"a\":{\"$lt\":'Echa de menos el 100 por ciento de los tiros que nunca toma.',\"$not\":{\"$not\":{\"$gt\":{\"_id\":null}}},\"$lt\":true}}");    Query GeneratedQuery203::sortedQuery = appendSort(GeneratedQuery203::query);    BSONObj GeneratedQuery203::projection = fromjson("{\"b\":1}");
struct GeneratedQuery204 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery204::query("{_id:314159265018}");    BSONObj GeneratedQuery204::projection = fromjson("{\"arrayField.$\":1,\"c\":1}");
struct GeneratedQuery205 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery205::query("{c:{\"$regex\":\"/^abc/m\"}}");
struct GeneratedQuery206 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery206::query("{_id:''}");
struct GeneratedQuery207 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery207::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");
struct GeneratedQuery208 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery208::query("{\"b\":{\"$size\":314159275}}");
struct GeneratedQuery209 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery209::query("{\"b\":{\"$date\": -111100000}}");
struct GeneratedQuery210 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery210::query("{c:''}");    Query GeneratedQuery210::sortedQuery = appendSort(GeneratedQuery210::query);    
struct GeneratedQuery211 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery211::query("{\"arrayField\":false}");
struct GeneratedQuery212 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery212::query("{\"$nor\":[{\"$where\":'function myFunction() { return this.d != undefined; }'}]}");
struct GeneratedQuery213 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery213::query("{\"$nor\":[{b:{\"$lte\":'You can do anything, but not everything.'}},{\"a.b\":{\"$mod\":[314159285,2147483647]}}]}");
struct GeneratedQuery214 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery214::query("{\"$nor\":[{\"c\":false},{d:1},{\"_id\":314159265009}]}");
struct GeneratedQuery215 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery215::query("{\"arrayField\":['When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything','Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything',[0.00002225073858072014],[{\"$date\": 1391633433037}],false,{\"$date\": -111100000},'',[{\"$date\": 1202331498200}]]}");
struct GeneratedQuery216 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery216::query("{\"c\":{\"$date\": 1202331498200}}");
struct GeneratedQuery217 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery217::query("{\"arrayField\":{\"$size\":314159285}}");
struct GeneratedQuery218 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery218::query("{\"loc\":{\"$near\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-180,-89.9]},\"$maxDistance\":314159265009}}}");    Query GeneratedQuery218::sortedQuery = appendSort(GeneratedQuery218::query);    
struct GeneratedQuery219 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery219::query("{\"$nor\":[{a:{\"$type\":3}}]}");
struct GeneratedQuery220 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery220::query("{\"c\":{\"$date\": 1202331498200}}");
struct GeneratedQuery221 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery221::query("{\"arrayField\":{\"$date\": 1500000}}");
struct GeneratedQuery222 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery222::query("{d:{\"$date\": -111100000}}");    BSONObj GeneratedQuery222::projection = fromjson("{_id:1,\"b\":{$elemMatch:{\"loc\":{\"$near\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-25,-90]}}},\"d\":2225073858072009000.99}}}");
struct GeneratedQuery223 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery223::query("{\"a\":-3.14159265359}");
struct GeneratedQuery224 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery224::query("{\"arrayField\":'Usted debe ser el cambio que deseas ver en el mundo.'}");    Query GeneratedQuery224::sortedQuery = appendSort(GeneratedQuery224::query);    BSONObj GeneratedQuery224::projection = fromjson("{\"d\":1}");
struct GeneratedQuery225 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery225::query("{\"$or\":[{\"b\":-3.14159265859}]}");    Query GeneratedQuery225::sortedQuery = appendSort(GeneratedQuery225::query);    
struct GeneratedQuery226 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery226::query("{\"_id\":{\"$type\":10}}");    Query GeneratedQuery226::sortedQuery = appendSort(GeneratedQuery226::query);    BSONObj GeneratedQuery226::projection = fromjson("{\"d\":1,b:1}");
struct GeneratedQuery227 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery227::query("{\"_id\":{\"$all\":[{\"_id\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything'},{\"a\":{\"locHaystack\":[33.3,-90]},\"locHaystack\":[-180,-33.3]},null]}}");
struct GeneratedQuery228 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery228::query("{\"b\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'s'}}");
struct GeneratedQuery229 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery229::query("{\"d\":0}");    Query GeneratedQuery229::sortedQuery = appendSort(GeneratedQuery229::query);    BSONObj GeneratedQuery229::projection = fromjson("{\"b\":1}");
struct GeneratedQuery230 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery230::query("{d:{\"$regex\":\"c a t #looks for cats\",\"$options\":'s'}}");
struct GeneratedQuery231 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery231::query("{\"$or\":[{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'},{b:{\"$date\": 1202331498200}}]}");    BSONObj GeneratedQuery231::projection = fromjson("{\"arrayField.$\":1,\"b\":1}");
struct GeneratedQuery232 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery232::query("{\"a\":{\"$date\": 1391633433037}}");
struct GeneratedQuery233 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery233::query("{\"$nor\":[{\"a\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''}}]}");
struct GeneratedQuery234 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery234::query("{\"c\":{\"$not\":{\"$gt\":{\"$date\": 1202331498200}}}}");
struct GeneratedQuery235 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery235::query("{\"arrayField._id\":{\"$size\":NumberLong(314159265358979373)}}");    Query GeneratedQuery235::sortedQuery = appendSort(GeneratedQuery235::query);    BSONObj GeneratedQuery235::projection = fromjson("{\"c\":1}");
struct GeneratedQuery236 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery236::query("{\"$or\":[{\"_id\":{\"$mod\":[314159285,2147483647]}}]}");    Query GeneratedQuery236::sortedQuery = appendSort(GeneratedQuery236::query);    
struct GeneratedQuery237 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery237::query("{\"arrayField\":{\"$all\":['Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.',{\"a\":['','I quit therapy because my analyst was trying to help me behind my back. anything',{\"a\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}]}]},\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }',\"$where\":'String(this.a || this.b || this.c || this.d).length > 9',\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");    BSONObj GeneratedQuery237::projection = fromjson("{\"d\":1,\"_id\":1}");
struct GeneratedQuery238 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery238::query("{\"b\":{\"$mod\":[314159215,314159265],\"$mod\":[314159245,314159205],\"$not\":{\"$not\":{\"$nin\":[{\"locLegacy\":[-25,0]},'']}},\"$lte\":true,\"$not\":{\"$type\":13}}}");    Query GeneratedQuery238::sortedQuery = appendSort(GeneratedQuery238::query);    
struct GeneratedQuery239 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery239::query("{\"$where\":'function myFunction() { return this.d != undefined; }'}");    Query GeneratedQuery239::sortedQuery = appendSort(GeneratedQuery239::query);    BSONObj GeneratedQuery239::projection = fromjson("{\"c\":1}");
struct GeneratedQuery240 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery240::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");
struct GeneratedQuery241 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery241::query("{\"$or\":[{\"arrayField\":0}]}");    Query GeneratedQuery241::sortedQuery = appendSort(GeneratedQuery241::query);    
struct GeneratedQuery242 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery242::query("{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}");    Query GeneratedQuery242::sortedQuery = appendSort(GeneratedQuery242::query);    
struct GeneratedQuery243 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery243::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");
struct GeneratedQuery244 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery244::query("{\"arrayField\":{\"$size\":314159295}}");    Query GeneratedQuery244::sortedQuery = appendSort(GeneratedQuery244::query);    BSONObj GeneratedQuery244::projection = fromjson("{\"c\":1}");
struct GeneratedQuery245 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery245::query("{\"c\":'You can do anything, but not everything.'}");    BSONObj GeneratedQuery245::projection = fromjson("{a:1}");
struct GeneratedQuery246 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery246::query("{\"a\":{\"$ne\":false}}");
struct GeneratedQuery247 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery247::query("{\"arrayField\":true}");
struct GeneratedQuery248 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery248::query("{\"b\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}");    BSONObj GeneratedQuery248::projection = fromjson("{\"a\":1}");
struct GeneratedQuery249 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery249::query("{\"a\":null}");
struct GeneratedQuery250 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery250::query("{\"d\":['You can do anything, but not everything.','The richest man is not he who has the most, but he who needs the least. anything',1]}");    Query GeneratedQuery250::sortedQuery = appendSort(GeneratedQuery250::query);    
struct GeneratedQuery251 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery251::query("{d:0}");
struct GeneratedQuery252 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery252::query("{\"arrayField\":''}");
struct GeneratedQuery253 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return -10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery253::query("{\"d\":{\"$ne\":'You can do anything, but not everything.',\"$type\":18}}");
struct GeneratedQuery254 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery254::query("{\"arrayField.c.d\":{\"$elemMatch\":{\"b\":{\"$date\": 1391633433037}}}}");    Query GeneratedQuery254::sortedQuery = appendSort(GeneratedQuery254::query);    BSONObj GeneratedQuery254::projection = fromjson("{\"c\":1,\"b\":1}");
struct GeneratedQuery255 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery255::query("{\"a.b\":0}");    BSONObj GeneratedQuery255::projection = fromjson("{\"a\":1}");
struct GeneratedQuery256 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery256::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");
struct GeneratedQuery257 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery257::query("{\"$nor\":[{\"arrayField.d\":{\"$not\":{\"$not\":{\"$lte\":0.00002225073858072014}}}}]}");    BSONObj GeneratedQuery257::projection = fromjson("{\"c\":1}");
struct GeneratedQuery258 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery258::query("{\"$where\":'function myFunction() { return this.d != undefined; }'}");
struct GeneratedQuery259 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery259::query("{\"c\":1}");
struct GeneratedQuery260 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery260::query("{\"d\":{\"$gt\":{\"$date\": 1500000}}}");
struct GeneratedQuery261 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery261::query("{\"c\":{\"$not\":{\"$all\":[{\"locLegacy\":[-33.3,0.0],\"c\":null},null,null,{\"$date\": -111100000},-3.14159265859,[0]]}}}");
struct GeneratedQuery262 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery262::query("{\"$or\":[{\"b\":{\"$mod\":[2147483647,314159205]}}]}");
struct GeneratedQuery263 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery263::query("{\"$and\":[{\"b\":{\"$date\": 1500000}}]}");
struct GeneratedQuery264 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery264::query("{\"arrayField\":{\"$not\":{\"$not\":{\"$exists\":true}},\"$ne\":'Usted debe ser el cambio que deseas ver en el mundo.',\"$ne\":true,\"$elemMatch\":{d:{\"$regex\":\"/^abc/m\"}},\"$type\":8,\"$nin\":[0.00000000049406564841,null],\"$mod\":[314159235,314159235],\"$not\":{\"$mod\":[314159215,314159235]},\"$size\":314159255,\"$all\":[[314159265014],'You can do anything, but not everything.'],\"$nin\":[{\"$date\": 1500000},'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything'],\"$size\":NumberInt(314159295)}}");    Query GeneratedQuery264::sortedQuery = appendSort(GeneratedQuery264::query);    
struct GeneratedQuery265 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery265::query("{\"$nor\":[{\"b\":true}]}");
struct GeneratedQuery266 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery266::query("{\"_id\":{\"$date\": 1391633433037}}");    BSONObj GeneratedQuery266::projection = fromjson("{\"a\":1,\"b\":{$elemMatch:{b:{\"$nin\":[null,1,{\"$date\": 1202331498200}]}}},\"b\":1}");
struct GeneratedQuery267 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery267::query("{\"a\":{\"$exists\":0}}");    Query GeneratedQuery267::sortedQuery = appendSort(GeneratedQuery267::query);    BSONObj GeneratedQuery267::projection = fromjson("{\"_id\":1,d:1}");
struct GeneratedQuery268 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery268::query("{b:''}");    BSONObj GeneratedQuery268::projection = fromjson("{\"b\":1,a:1}");
struct GeneratedQuery269 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery269::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");    BSONObj GeneratedQuery269::projection = fromjson("{\"b\":{$elemMatch:{\"c\":{\"$date\": -111100000}}},\"c\":1}");
struct GeneratedQuery270 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery270::query("{_id:{\"$in\":['','You can do anything, but not everything.']}}");
struct GeneratedQuery271 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery271::query("{\"arrayField\":{\"$date\": 1202331498200}}");
struct GeneratedQuery272 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery272::query("{\"$and\":[{\"a\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''}}]}");
struct GeneratedQuery273 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery273::query("{\"d\":314159265016}");
struct GeneratedQuery274 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery274::query("{\"b\":{\"$gt\":['You miss 100 percent of the shots you never take. anything','You can do anything, but not everything.']}}");
struct GeneratedQuery275 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery275::query("{\"$nor\":[{\"arrayField.a\":{\"$elemMatch\":{\"d\":{\"$elemMatch\":{\"$where\":'this.d != undefined',\"b\":{\"$size\":NumberLong(0)},\"arrayField\":{\"$mod\":[314159205,314159245]},\"arrayField.a\":{\"$type\":8}}},c:{\"locHaystack\":[-33.3,90]},\"_id\":{\"$date\": 1500000},\"arrayField\":{\"$elemMatch\":{\"a\":{\"$date\": 1202331498200},\"arrayField\":{\"$not\":{\"$not\":{\"$type\":7}}}}},a:{\"$regex\":\"c a t #looks for cats\",\"$options\":'iim'}}}},{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}]}");    Query GeneratedQuery275::sortedQuery = appendSort(GeneratedQuery275::query);    
struct GeneratedQuery276 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery276::query("{\"arrayField\":{\"$date\": 1500000}}");
struct GeneratedQuery277 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery277::query("{\"arrayField\":314159265012}");    BSONObj GeneratedQuery277::projection = fromjson("{b:1}");
struct GeneratedQuery278 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery278::query("{\"b\":0}");
struct GeneratedQuery279 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery279::query("{c:'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}");    Query GeneratedQuery279::sortedQuery = appendSort(GeneratedQuery279::query);    BSONObj GeneratedQuery279::projection = fromjson("{c:1}");
struct GeneratedQuery280 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery280::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");
struct GeneratedQuery281 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery281::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");
struct GeneratedQuery282 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery282::query("{\"$nor\":[{\"a\":{\"$not\":{\"$mod\":[314159265,314159245]}}},{\"_id\":{\"$date\": 1202331498200}},{\"c\":''}]}");
struct GeneratedQuery283 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery283::query("{\"loc\":{\"$geoWithin\":{\"$box\":[[-180,33.3],[-25,-89.9]],\"$uniqueDocs\":1}}}");
struct GeneratedQuery284 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery284::query("{\"arrayField.b\":{\"$elemMatch\":{\"b\":0,b:{\"$date\": 1202331498200}},\"$mod\":[314159215,314159215]}}");    BSONObj GeneratedQuery284::projection = fromjson("{a:{$slice:1},\"c\":1}");
struct GeneratedQuery285 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery285::query("{\"_id\":{\"locHaystack\":[-180,0.0]}}");    Query GeneratedQuery285::sortedQuery = appendSort(GeneratedQuery285::query);    
struct GeneratedQuery286 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery286::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");    Query GeneratedQuery286::sortedQuery = appendSort(GeneratedQuery286::query);    
struct GeneratedQuery287 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery287::query("{\"_id\":{\"$regex\":\"/^abc/m\"}}");
struct GeneratedQuery288 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery288::query("{\"arrayField\":1}");
struct GeneratedQuery289 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery289::query("{\"$nor\":[{\"b\":-314159265359},{\"arrayField.a\":{\"$all\":[{\"arrayField\":['','',{\"arrayField\":[314159265003,'']}]}]}},{_id:{\"$not\":{\"$elemMatch\":{\"b\":'',\"_id\":true}}}},{\"$where\":'function myFunction() { var x = 1 + 2; }'}]}");    BSONObj GeneratedQuery289::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery290 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery290::query("{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}");    Query GeneratedQuery290::sortedQuery = appendSort(GeneratedQuery290::query);    
struct GeneratedQuery291 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery291::query("{\"arrayField\":{\"$date\": 1391633433037}}");    BSONObj GeneratedQuery291::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery292 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery292::query("{\"arrayField\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}");    BSONObj GeneratedQuery292::projection = fromjson("{\"arrayField.$\":1,c:1}");
struct GeneratedQuery293 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery293::query("{\"$and\":[{\"arrayField.d\":{\"$not\":{\"$all\":[]},\"$lt\":'',\"$all\":[[{\"$date\": 1500000},true],{\"arrayField\":['Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',{\"arrayField\":[{\"a\":{\"c\":{\"d\":'You can do anything, but not everything.'}}},'',false]},[{\"$date\": 1391633433037},{\"arrayField\":[false]}],null,{\"$date\": -111100000}],\"c\":{\"a\":{\"locHaystack\":[180,-89.9]}}}]}}]}");
struct GeneratedQuery294 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery294::query("{\"$nor\":[{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}]}");
struct GeneratedQuery295 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery295::query("{\"_id\":{\"$not\":{\"$not\":{\"$not\":{\"$mod\":[314159265,314159265]}}}}}");
struct GeneratedQuery296 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery296::query("{\"$or\":[{d:false}]}");
struct GeneratedQuery297 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery297::query("{\"$or\":[{\"_id\":'You can do anything, but not everything.'},{\"a\":-3.14159265000}]}");
struct GeneratedQuery298 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery298::query("{\"arrayField\":{\"$date\": 1500000}}");
struct GeneratedQuery299 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery299::query("{\"$or\":[{\"c\":{\"$regex\":\"/(tang|tangerine|tan)/\"}}]}");
struct GeneratedQuery300 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery300::query("{\"arrayField\":''}");
struct GeneratedQuery301 {      static Query getQuery() { return query; }      static int nToSkip() { return 100; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery301::query("{\"a\":true}");
struct GeneratedQuery302 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery302::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");
struct GeneratedQuery303 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery303::query("{\"$nor\":[{\"b\":[{\"b\":'Usted debe ser el cambio que deseas ver en el mundo.',\"d\":314159265018}]},{\"loc\":{\"$geoWithin\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-180.0,-89.9]},\"$uniqueDocs\":true}}}]}");    BSONObj GeneratedQuery303::projection = fromjson("{\"d\":1}");
struct GeneratedQuery304 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery304::query("{d:{\"$regex\":\"/^abc/\"}}");
struct GeneratedQuery305 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery305::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");    Query GeneratedQuery305::sortedQuery = appendSort(GeneratedQuery305::query);    
struct GeneratedQuery306 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery306::query("{\"b\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":'m'}}");    BSONObj GeneratedQuery306::projection = fromjson("{\"c\":1,_id:1}");
struct GeneratedQuery307 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery307::query("{\"arrayField\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}");
struct GeneratedQuery308 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery308::query("{\"d\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything'}");    BSONObj GeneratedQuery308::projection = fromjson("{\"d\":1}");
struct GeneratedQuery309 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery309::query("{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}");    Query GeneratedQuery309::sortedQuery = appendSort(GeneratedQuery309::query);    BSONObj GeneratedQuery309::projection = fromjson("{a:1}");
struct GeneratedQuery310 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery310::query("{d:{\"$regex\":\"/\\d?[A-E]\\*/\"}}");    Query GeneratedQuery310::sortedQuery = appendSort(GeneratedQuery310::query);    
struct GeneratedQuery311 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery311::query("{\"_id\":314159265014,\"b\":1}");
struct GeneratedQuery312 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery312::query("{\"_id\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''}}");    BSONObj GeneratedQuery312::projection = fromjson("{a:1}");
struct GeneratedQuery313 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery313::query("{\"b\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'mi'}}");    BSONObj GeneratedQuery313::projection = fromjson("{\"b\":1}");
struct GeneratedQuery314 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery314::query("{\"arrayField\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}");
struct GeneratedQuery315 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery315::query("{\"c\":{\"$type\":-1}}");
struct GeneratedQuery316 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery316::query("{\"b\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''}}");
struct GeneratedQuery317 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery317::query("{\"$where\":'function myFunction() { return this.d != undefined; }'}");
struct GeneratedQuery318 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery318::query("{\"arrayField\":-314159265359}");    Query GeneratedQuery318::sortedQuery = appendSort(GeneratedQuery318::query);    
struct GeneratedQuery319 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery319::query("{\"a\":{\"$all\":[1,'',null,{\"$date\": 1500000}]}}");
struct GeneratedQuery320 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery320::query("{\"c\":0.00002225073858072014}");
struct GeneratedQuery321 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery321::query("{\"_id\":{\"$regex\":\"/(a|bc)x+yz/\"}}");
struct GeneratedQuery322 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery322::query("{\"$where\":'function myFunction() { return this.d != undefined; }'}");
struct GeneratedQuery323 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery323::query("{\"_id\":{\"$all\":[[{\"arrayField\":['When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'],\"locLegacy\":[180,33.3]},{\"$date\": 1500000},314159265016,null],{\"arrayField\":['You can do anything, but not everything.']}]}}");
struct GeneratedQuery324 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery324::query("{\"b\":'Usted puede hacer cualquier cosa, pero no todo.'}");    BSONObj GeneratedQuery324::projection = fromjson("{\"c\":1}");
struct GeneratedQuery325 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery325::query("{\"$where\":'this.d != undefined'}");    BSONObj GeneratedQuery325::projection = fromjson("{\"c\":1}");
struct GeneratedQuery326 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery326::query("{\"b\":{\"$regex\":\"/(a)|(b)/\"}}");    Query GeneratedQuery326::sortedQuery = appendSort(GeneratedQuery326::query);    
struct GeneratedQuery327 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery327::query("{a:-3.14159265859}");    BSONObj GeneratedQuery327::projection = fromjson("{\"b\":1}");
struct GeneratedQuery328 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery328::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");    BSONObj GeneratedQuery328::projection = fromjson("{\"a\":1}");
struct GeneratedQuery329 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery329::query("{\"arrayField\":{\"arrayField\":[{\"$date\": 1500000}]}}");    BSONObj GeneratedQuery329::projection = fromjson("{d:1}");
struct GeneratedQuery330 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery330::query("{\"d\":{\"$exists\":1}}");
struct GeneratedQuery331 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery331::query("{\"_id\":1797693134862315799999}");
struct GeneratedQuery332 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery332::query("{\"$nor\":[{\"d\":false},{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'},{a:{\"$regex\":\"c a t #looks for cats\",\"$options\":''}},{\"arrayField.b\":{\"$all\":[{\"arrayField\":['']}]}}]}");    Query GeneratedQuery332::sortedQuery = appendSort(GeneratedQuery332::query);    
struct GeneratedQuery333 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery333::query("{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}");    BSONObj GeneratedQuery333::projection = fromjson("{\"a\":{$elemMatch:{\"loc\":{\"$geoWithin\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[180,33.3]}}},\"b\":true,\"d.b.b\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}}}");
struct GeneratedQuery334 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id.c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery334::query("{\"$where\":'this.d != undefined'}");    Query GeneratedQuery334::sortedQuery = appendSort(GeneratedQuery334::query);    
struct GeneratedQuery335 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery335::query("{\"arrayField.a\":{\"$not\":{\"$type\":4},\"$nin\":[{\"$date\": 1391633433037}],\"$all\":['When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything',false,[null]]}}");    BSONObj GeneratedQuery335::projection = fromjson("{\"d\":1}");
struct GeneratedQuery336 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery336::query("{\"arrayField\":314159265013}");    BSONObj GeneratedQuery336::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery337 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery337::query("{\"arrayField.b.a\":{\"$all\":[{\"arrayField\":[]},'The richest man is not he who has the most, but he who needs the least. anything',{\"locHaystack\":{ 'lng': 180, 'lat': 90.0}},{\"$date\": 1202331498200}]}}");
struct GeneratedQuery338 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery338::query("{\"$nor\":[{\"c\":{\"$regex\":\"/abc\\def/\"}},{b:{\"$not\":{\"$size\":NumberLong(314159265358979383)},\"$type\":5,\"$ne\":true,\"$exists\":true}}]}");    Query GeneratedQuery338::sortedQuery = appendSort(GeneratedQuery338::query);    BSONObj GeneratedQuery338::projection = fromjson("{a:1}");
struct GeneratedQuery339 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery339::query("{\"b\":false}");
struct GeneratedQuery340 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery340::query("{\"b\":'Usted puede hacer cualquier cosa, pero no todo.'}");
struct GeneratedQuery341 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery341::query("{\"a\":314159265015}");    BSONObj GeneratedQuery341::projection = fromjson("{\"b\":1}");
struct GeneratedQuery342 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery342::query("{\"b\":{\"$regex\":\"/(a)|(b)/\"}}");
struct GeneratedQuery343 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery343::query("{\"arrayField\":-3.14159265000}");
struct GeneratedQuery344 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery344::query("{\"d\":{\"$elemMatch\":{\"d\":{\"$all\":[1]},\"d\":{\"$date\": 1391633433037},\"arrayField\":314159265009,c:{\"$date\": -111100000}}}}");    BSONObj GeneratedQuery344::projection = fromjson("{c:1}");
struct GeneratedQuery345 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery345::query("{\"arrayField\":'You can do anything, but not everything.'}");
struct GeneratedQuery346 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery346::query("{\"$or\":[{\"b\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,-89.9]}}]},{\"arrayField\":[1]},{\"a\":{\"$regex\":\"/cat/\"}}]}");    Query GeneratedQuery346::sortedQuery = appendSort(GeneratedQuery346::query);    
struct GeneratedQuery347 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery347::query("{b:'You miss 100 percent of the shots you never take. anything'}");
struct GeneratedQuery348 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery348::query("{\"$nor\":[{b:null}]}");    Query GeneratedQuery348::sortedQuery = appendSort(GeneratedQuery348::query);    BSONObj GeneratedQuery348::projection = fromjson("{\"d\":{$elemMatch:{\"arrayField.b\":{\"$not\":{\"$nin\":[{\"$date\": 1500000}]}}}}}");
struct GeneratedQuery349 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery349::query("{\"arrayField._id.c\":{\"$elemMatch\":{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}}}");
struct GeneratedQuery350 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{_id:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery350::query("{\"b\":{\"$date\": 1500000}}");    Query GeneratedQuery350::sortedQuery = appendSort(GeneratedQuery350::query);    
struct GeneratedQuery351 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery351::query("{\"arrayField\":1}");    BSONObj GeneratedQuery351::projection = fromjson("{\"b\":1}");
struct GeneratedQuery352 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery352::query("{\"arrayField.a.a.c._id\":{\"$all\":[{\"$date\": 1500000}]}}");
struct GeneratedQuery353 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery353::query("{\"d\":{\"$not\":{\"$size\":314159255}}}");    BSONObj GeneratedQuery353::projection = fromjson("{\"arrayField.$\":1,\"a\":1,b:1}");
struct GeneratedQuery354 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery354::query("{\"a\":{\"$exists\":null}}");
struct GeneratedQuery355 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery355::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");
struct GeneratedQuery356 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery356::query("{\"arrayField\":1}");    Query GeneratedQuery356::sortedQuery = appendSort(GeneratedQuery356::query);    BSONObj GeneratedQuery356::projection = fromjson("{d:{$slice:1}}");
struct GeneratedQuery357 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery357::query("{\"a\":{\"$regex\":\"c a t #looks for cats\",\"$options\":''}}");    Query GeneratedQuery357::sortedQuery = appendSort(GeneratedQuery357::query);    BSONObj GeneratedQuery357::projection = fromjson("{b:1}");
struct GeneratedQuery358 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery358::query("{\"arrayField\":1797693134862315799999}");    BSONObj GeneratedQuery358::projection = fromjson("{\"d\":1}");
struct GeneratedQuery359 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery359::query("{\"c\":{\"$regex\":\"/\\d?[A-E]\\*/\"}}");
struct GeneratedQuery360 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery360::query("{b:{\"$not\":{\"$not\":{\"$all\":[null,{\"c\":{\"locHaystack\":[-180,25]}}]}}}}");    Query GeneratedQuery360::sortedQuery = appendSort(GeneratedQuery360::query);    
struct GeneratedQuery361 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery361::query("{\"_id.d.d\":{\"$lte\":314159265013}}");
struct GeneratedQuery362 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery362::query("{\"arrayField\":-314159265359}");
struct GeneratedQuery363 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery363::query("{d:1}");    BSONObj GeneratedQuery363::projection = fromjson("{_id:1}");
struct GeneratedQuery364 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery364::query("{\"arrayField\":'Usted debe ser el cambio que deseas ver en el mundo.'}");
struct GeneratedQuery365 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery365::query("{\"c.a.b.d\":{\"$all\":[['Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas',false]],\"$mod\":[314159265,2147483647],\"$lte\":'I quit therapy because my analyst was trying to help me behind my back. anything'}}");    BSONObj GeneratedQuery365::projection = fromjson("{\"b\":1,\"_id\":1}");
struct GeneratedQuery366 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery366::query("{\"c\":{\"$in\":['To the man who only has a hammer, everything he encounters begins to look like a nail. anything']}}");    Query GeneratedQuery366::sortedQuery = appendSort(GeneratedQuery366::query);    BSONObj GeneratedQuery366::projection = fromjson("{\"c\":1}");
struct GeneratedQuery367 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery367::query("{\"$nor\":[{\"a\":{\"$gte\":'You miss 100 percent of the shots you never take. anything'}},{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}]}");
struct GeneratedQuery368 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery368::query("{\"$nor\":[{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'},{\"arrayField\":{\"$exists\":0}}]}");    BSONObj GeneratedQuery368::projection = fromjson("{d:{$slice:2}}");
struct GeneratedQuery369 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery369::query("{c:0.0}");    BSONObj GeneratedQuery369::projection = fromjson("{\"c\":1}");
struct GeneratedQuery370 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery370::query("{\"_id\":{\"$date\": 1391633433037}}");
struct GeneratedQuery371 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery371::query("{\"b\":{\"$not\":{\"$not\":{\"$type\":1}}}}");    BSONObj GeneratedQuery371::projection = fromjson("{\"a\":1}");
struct GeneratedQuery372 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery372::query("{\"d\":314159265017}");    BSONObj GeneratedQuery372::projection = fromjson("{c:1,c:1,d:1}");
struct GeneratedQuery373 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery373::query("{\"$nor\":[{\"_id\":{\"$date\": 1391633433037}}]}");    BSONObj GeneratedQuery373::projection = fromjson("{a:{$elemMatch:{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}}}");
struct GeneratedQuery374 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery374::query("{\"arrayField.d\":{\"$exists\":0}}");
struct GeneratedQuery375 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery375::query("{\"b\":{\"a\":''}}");
struct GeneratedQuery376 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery376::query("{\"_id\":{\"$in\":[{\"locHaystack\":{ 'lng': 180.0, 'lat': -89.9}}]}}");
struct GeneratedQuery377 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery377::query("{d:{\"$mod\":[314159295,314159235]}}");
struct GeneratedQuery378 {      static Query getQuery() { return query; }      static int nToSkip() { return 100; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery378::query("{\"a\":{\"arrayField\":[{\"arrayField\":[{\"$date\": 1391633433037}]},{\"$date\": 1202331498200}]}}");
struct GeneratedQuery379 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery379::query("{\"arrayField\":{\"$date\": 1500000}}");    BSONObj GeneratedQuery379::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery380 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery380::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");    BSONObj GeneratedQuery380::projection = fromjson("{a:1}");
struct GeneratedQuery381 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery381::query("{\"$where\":'this.d != undefined'}");    BSONObj GeneratedQuery381::projection = fromjson("{\"a\":1}");
struct GeneratedQuery382 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery382::query("{\"d\":0}");    BSONObj GeneratedQuery382::projection = fromjson("{_id:1}");
struct GeneratedQuery383 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery383::query("{\"a\":0}");
struct GeneratedQuery384 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery384::query("{\"arrayField\":false}");
struct GeneratedQuery385 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery385::query("{\"d\":{\"$date\": 1391633433037}}");
struct GeneratedQuery386 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery386::query("{\"$and\":[{d:{\"$mod\":[314159215,314159255]}},{\"a\":{\"$exists\":''}},{\"a\":{\"$type\":5}},{\"a\":{\"$mod\":[314159205,314159245]}},{\"d\":true}]}");
struct GeneratedQuery387 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery387::query("{\"a\":{\"locLegacy\":[179.9,-25],\"arrayField\":[{\"$date\": 1500000}]}}");    BSONObj GeneratedQuery387::projection = fromjson("{b:1}");
struct GeneratedQuery388 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery388::query("{\"d\":{\"$exists\":false}}");    BSONObj GeneratedQuery388::projection = fromjson("{c:1}");
struct GeneratedQuery389 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery389::query("{\"$nor\":[{\"c\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}}]}");    Query GeneratedQuery389::sortedQuery = appendSort(GeneratedQuery389::query);    
struct GeneratedQuery390 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery390::query("{\"c\":{\"$not\":{\"$mod\":[314159265,314159265]}},b:[{\"locHaystack\":[180,-89.9],\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,-90]}}],\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}");
struct GeneratedQuery391 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery391::query("{\"b\":''}");
struct GeneratedQuery392 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery392::query("{\"$or\":[{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'},{\"b\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":'i'}},{\"a\":{\"$lte\":false,\"$gt\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',\"$not\":{\"$not\":{\"$ne\":314159265000}},\"$gt\":314159265007,\"$nin\":[false,'You can do anything, but not everything.']}}]}");
struct GeneratedQuery393 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery393::query("{\"c\":314159265016}");
struct GeneratedQuery394 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery394::query("{\"$where\":'function myFunction() { return this.d != undefined; }'}");    Query GeneratedQuery394::sortedQuery = appendSort(GeneratedQuery394::query);    BSONObj GeneratedQuery394::projection = fromjson("{d:{$elemMatch:{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}}}");
struct GeneratedQuery395 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery395::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");
struct GeneratedQuery396 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery396::query("{b:-3.14159265000}");    Query GeneratedQuery396::sortedQuery = appendSort(GeneratedQuery396::query);    
struct GeneratedQuery397 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery397::query("{\"b\":{\"$regex\":\"/^\\d?\\d(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\d\\d$/\"}}");
struct GeneratedQuery398 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery398::query("{\"arrayField\":{\"$all\":[['',{\"arrayField\":[{\"arrayField\":[{\"c\":'You can do anything, but not everything.'},314159265002,false,'I quit therapy because my analyst was trying to help me behind my back. anything']},null,{\"arrayField\":[],\"arrayField\":[1,{\"arrayField\":[{\"locLegacy\":[-33.3,-89.9]}],\"locHaystack\":[180.0,-89.9]}]},null,[{},'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',{\"b\":{\"$date\": 1391633433037}}]],\"a\":{\"locHaystack\":{ 'lng': 180.0, 'lat': -89.9},\"a\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}}]]}}");    BSONObj GeneratedQuery398::projection = fromjson("{\"b\":1}");
struct GeneratedQuery399 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery399::query("{\"arrayField.a\":{\"$type\":14,\"$exists\":0}}");
struct GeneratedQuery400 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery400::query("{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}");    Query GeneratedQuery400::sortedQuery = appendSort(GeneratedQuery400::query);    BSONObj GeneratedQuery400::projection = fromjson("{\"arrayField.$\":1,\"_id\":{$elemMatch:{\"arrayField.d\":{\"$not\":{\"$not\":{\"$elemMatch\":{\"arrayField\":{\"$date\": 1500000},a:{\"$type\":15},\"d\":{\"$regex\":\"c a t #looks for cats\",\"$options\":''}}}}},\"arrayField\":{\"$all\":[['You can do anything, but not everything.']]}}},\"_id\":1,\"b\":1,\"c\":{$slice:100},_id:{$elemMatch:{\"loc\":{\"$nearSphere\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-25,-25]}}}}}}");
struct GeneratedQuery401 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery401::query("{\"c\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'mm'}}");
struct GeneratedQuery402 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{d:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery402::query("{\"b\":{\"$mod\":[314159205,314159205]}}");    Query GeneratedQuery402::sortedQuery = appendSort(GeneratedQuery402::query);    BSONObj GeneratedQuery402::projection = fromjson("{\"b\":{$slice:1}}");
struct GeneratedQuery403 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery403::query("{\"arrayField\":{\"a\":null,\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,25]},\"loc\":{\"type\":\"Point\",\"coordinates\":[0,89.9]},\"_id\":null,\"arrayField\":[{\"locLegacy\":[0,90.0],\"c\":'I quit therapy because my analyst was trying to help me behind my back. anything',\"arrayField\":[{\"arrayField\":[314159265010,true],\"locHaystack\":[-179.9,90]}],\"arrayField\":['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything','You can do anything, but not everything.',{\"$date\": 1500000}],\"arrayField\":['',{\"arrayField\":[{\"$date\": 1391633433037}],\"arrayField\":[-3.14159265359,{\"d\":'I quit therapy because my analyst was trying to help me behind my back. anything',\"arrayField\":[[0]]},'']},314159265008]}],\"arrayField\":[''],\"arrayField\":[{\"arrayField\":[{\"locHaystack\":{ 'lng': -179.9, 'lat': 0.0}}]},[],0,{\"locHaystack\":[0.0,-25],\"arrayField\":[{\"d\":'You can do anything, but not everything.',\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,-25]}},'You can do anything, but not everything.']}]},null]}}");    BSONObj GeneratedQuery403::projection = fromjson("{_id:1}");
struct GeneratedQuery404 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery404::query("{\"a\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'sssms'}}");
struct GeneratedQuery405 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery405::query("{\"d\":{\"$nin\":['You can do anything, but not everything.']}}");    BSONObj GeneratedQuery405::projection = fromjson("{d:1,a:1}");
struct GeneratedQuery406 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery406::query("{\"d\":{\"$ne\":{\"$date\": 1202331498200}}}");
struct GeneratedQuery407 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery407::query("{\"d\":true}");
struct GeneratedQuery408 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery408::query("{\"$nor\":[{c:314159265019},{\"b\":[-3.14159265859]},{\"b\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}]}");    BSONObj GeneratedQuery408::projection = fromjson("{\"b\":1}");
struct GeneratedQuery409 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery409::query("{b:{\"$mod\":[314159215,314159225]}}");    Query GeneratedQuery409::sortedQuery = appendSort(GeneratedQuery409::query);    
struct GeneratedQuery410 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery410::query("{_id:314159265001}");
struct GeneratedQuery411 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery411::query("{\"c\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'s'}}");    Query GeneratedQuery411::sortedQuery = appendSort(GeneratedQuery411::query);    
struct GeneratedQuery412 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery412::query("{\"a\":{\"$mod\":[314159275,314159255]}}");    Query GeneratedQuery412::sortedQuery = appendSort(GeneratedQuery412::query);    BSONObj GeneratedQuery412::projection = fromjson("{d:1}");
struct GeneratedQuery413 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery413::query("{c:{\"$exists\":{\"$date\": 1391633433037}}}");
struct GeneratedQuery414 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery414::query("{b:1797693134862315799999}");
struct GeneratedQuery415 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery415::query("{\"c\":{\"$not\":{\"$type\":17}}}");    BSONObj GeneratedQuery415::projection = fromjson("{d:1}");
struct GeneratedQuery416 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery416::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");
struct GeneratedQuery417 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery417::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");    Query GeneratedQuery417::sortedQuery = appendSort(GeneratedQuery417::query);    
struct GeneratedQuery418 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery418::query("{\"$or\":[{\"b\":{\"$not\":{\"$mod\":[314159235,314159285]}}},{\"b\":1},{\"arrayField\":{\"$type\":8}}]}");
struct GeneratedQuery419 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery419::query("{\"$or\":[{\"b\":{\"$date\": 1391633433037}},{\"c\":{\"$date\": 1202331498200}}]}");    Query GeneratedQuery419::sortedQuery = appendSort(GeneratedQuery419::query);    
struct GeneratedQuery420 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery420::query("{c:'You can do anything, but not everything.'}");
struct GeneratedQuery421 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery421::query("{\"a\":{\"$gte\":{\"$date\": 1500000}}}");
struct GeneratedQuery422 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery422::query("{\"loc\":{\"$nearSphere\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-179.9,-25]},\"$maxDistance\":314159265006}}}");
struct GeneratedQuery423 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery423::query("{\"$or\":[{_id:{\"$regex\":\"c a t #looks for cats\",\"$options\":'sssii'}}]}");
struct GeneratedQuery424 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery424::query("{c:2225073858072009000.99}");    Query GeneratedQuery424::sortedQuery = appendSort(GeneratedQuery424::query);    BSONObj GeneratedQuery424::projection = fromjson("{\"a\":1}");
struct GeneratedQuery425 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery425::query("{b:0}");
struct GeneratedQuery426 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery426::query("{a:{\"$date\": 1202331498200}}");
struct GeneratedQuery427 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery427::query("{c:314159265002}");
struct GeneratedQuery428 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery428::query("{\"arrayField\":false}");    Query GeneratedQuery428::sortedQuery = appendSort(GeneratedQuery428::query);    
struct GeneratedQuery429 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery429::query("{\"arrayField.b\":{\"$not\":{\"$exists\":{\"$date\": 1500000}},\"$exists\":true,\"$lte\":{\"locLegacy\":[-180,-90.0]},\"$all\":['You can do anything, but not everything.',{\"c\":'You can do anything, but not everything.'}]}}");    BSONObj GeneratedQuery429::projection = fromjson("{\"b\":1}");
struct GeneratedQuery430 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery430::query("{\"d\":{\"$not\":{\"$lte\":1}}}");    Query GeneratedQuery430::sortedQuery = appendSort(GeneratedQuery430::query);    
struct GeneratedQuery431 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery431::query("{d:{\"$nin\":[1]}}");
struct GeneratedQuery432 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery432::query("{\"_id\":{\"$regex\":\"/^abc(\\d+)/\"}}");
struct GeneratedQuery433 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery433::query("{d:'',\"arrayField\":{\"$mod\":[314159265,314159205]},\"b\":{\"locHaystack\":[25,-90.0]}}");
struct GeneratedQuery434 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery434::query("{\"d\":{\"$date\": 1202331498200}}");
struct GeneratedQuery435 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery435::query("{b:{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":'s'}}");
struct GeneratedQuery436 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery436::query("{\"_id\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'s'}}");    BSONObj GeneratedQuery436::projection = fromjson("{\"c\":1}");
struct GeneratedQuery437 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery437::query("{\"arrayField\":{\"$elemMatch\":{\"arrayField\":{\"$size\":314159265}}}}");
struct GeneratedQuery438 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery438::query("{\"a\":314159265015}");
struct GeneratedQuery439 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery439::query("{\"_id\":[{\"arrayField\":[{\"locHaystack\":[25,90]},'Echa de menos el 100 por ciento de los tiros que nunca toma.','The richest man is not he who has the most, but he who needs the least. anything',null,{\"$date\": 1391633433037},false],\"locLegacy\":[-33.3,-90.0]},{\"$date\": 1391633433037}]}");    Query GeneratedQuery439::sortedQuery = appendSort(GeneratedQuery439::query);    
struct GeneratedQuery440 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery440::query("{\"a\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'s'}}");
struct GeneratedQuery441 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return -1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery441::query("{\"$or\":[{\"c\":{\"$regex\":\"c a t #looks for cats\",\"$options\":'mi'}}]}");
struct GeneratedQuery442 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery442::query("{\"d\":{\"$date\": 1391633433037}}");
struct GeneratedQuery443 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery443::query("{\"b\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}}");
struct GeneratedQuery444 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery444::query("{\"arrayField\":{\"$date\": 1500000}}");
struct GeneratedQuery445 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery445::query("{\"a\":{\"$size\":NumberLong(314159265358979313)}}");    Query GeneratedQuery445::sortedQuery = appendSort(GeneratedQuery445::query);    
struct GeneratedQuery446 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery446::query("{\"a\":true}");
struct GeneratedQuery447 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return -10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery447::query("{\"c.a\":{\"$type\":16}}");
struct GeneratedQuery448 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery448::query("{\"arrayField\":{\"$elemMatch\":{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9',\"b\":{\"$date\": 1500000}}}}");
struct GeneratedQuery449 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery449::query("{\"$nor\":[{\"a\":{\"$exists\":false}}]}");    BSONObj GeneratedQuery449::projection = fromjson("{\"b\":1}");
struct GeneratedQuery450 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery450::query("{\"arrayField.b\":{\"$mod\":[314159215,314159235]}}");    Query GeneratedQuery450::sortedQuery = appendSort(GeneratedQuery450::query);    BSONObj GeneratedQuery450::projection = fromjson("{\"c\":1}");
struct GeneratedQuery451 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery451::query("{\"$and\":[{\"arrayField\":{\"locLegacy\":[0,0.0]}}]}");
struct GeneratedQuery452 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery452::query("{\"a\":null}");
struct GeneratedQuery453 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery453::query("{\"arrayField\":{\"$date\": -111100000}}");    BSONObj GeneratedQuery453::projection = fromjson("{\"b\":1}");
struct GeneratedQuery454 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery454::query("{\"$or\":[{\"arrayField.a\":{\"$size\":314159235}},{\"b\":-3.14159265359}]}");
struct GeneratedQuery455 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 100; }      static int nToLimit() { return 10; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery455::query("{\"$nor\":[{\"$where\":'(this.a || this.b || this.c || this.d) > 10'},{d:{\"$date\": 1500000}},{\"loc\":{\"$geoWithin\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-180.0,90]},\"$uniqueDocs\":1}}}]}");    BSONObj GeneratedQuery455::projection = fromjson("{\"b\":1}");
struct GeneratedQuery456 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery456::query("{\"arrayField\":{\"$mod\":[314159295,314159225]}}");
struct GeneratedQuery457 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery457::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");
struct GeneratedQuery458 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery458::query("{\"_id\":{\"$regex\":\"/(a)|(b)/\"}}");    Query GeneratedQuery458::sortedQuery = appendSort(GeneratedQuery458::query);    
struct GeneratedQuery459 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery459::query("{\"arrayField\":314159265005}");    Query GeneratedQuery459::sortedQuery = appendSort(GeneratedQuery459::query);    
struct GeneratedQuery460 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{d:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery460::query("{\"a\":{\"$lt\":0.00000000049406564841}}");    Query GeneratedQuery460::sortedQuery = appendSort(GeneratedQuery460::query);    
struct GeneratedQuery461 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery461::query("{\"$and\":[{c:{\"$not\":{\"$size\":NumberLong(314159265358979343)}}}]}");
struct GeneratedQuery462 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery462::query("{b:{\"$mod\":[314159245,314159275]}}");
struct GeneratedQuery463 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery463::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");    Query GeneratedQuery463::sortedQuery = appendSort(GeneratedQuery463::query);    
struct GeneratedQuery464 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery464::query("{a:null}");
struct GeneratedQuery465 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery465::query("{d:{\"$gt\":-3.14159265000}}");    Query GeneratedQuery465::sortedQuery = appendSort(GeneratedQuery465::query);    
struct GeneratedQuery466 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery466::query("{\"arrayField\":''}");    BSONObj GeneratedQuery466::projection = fromjson("{d:1,\"d\":1}");
struct GeneratedQuery467 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery467::query("{\"c\":{\"$regex\":\"/^\\d?\\d(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\d\\d$/\"}}");
struct GeneratedQuery468 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery468::query("{\"arrayField\":{\"$size\":NumberLong(-9223372036854775808)}}");    Query GeneratedQuery468::sortedQuery = appendSort(GeneratedQuery468::query);    BSONObj GeneratedQuery468::projection = fromjson("{a:1,_id:1}");
struct GeneratedQuery469 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery469::query("{\"d\":{\"$all\":[{\"$date\": 1500000},314159265012,'I quit therapy because my analyst was trying to help me behind my back. anything']}}");    BSONObj GeneratedQuery469::projection = fromjson("{b:1}");
struct GeneratedQuery470 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery470::query("{\"b\":{\"$gte\":{\"$date\": 1500000}}}");    Query GeneratedQuery470::sortedQuery = appendSort(GeneratedQuery470::query);    
struct GeneratedQuery471 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return -10; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery471::query("{\"$or\":[{\"a\":{\"c\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',\"d\":'You can do anything, but not everything.',\"d\":0}}]}");    BSONObj GeneratedQuery471::projection = fromjson("{d:1}");
struct GeneratedQuery472 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery472::query("{b:{\"$all\":[{\"_id\":{\"b\":{\"arrayField\":[{}]}}},{\"locHaystack\":[25,-90.0]}]}}");    Query GeneratedQuery472::sortedQuery = appendSort(GeneratedQuery472::query);    BSONObj GeneratedQuery472::projection = fromjson("{a:1}");
struct GeneratedQuery473 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery473::query("{\"a\":{\"$type\":-1,\"$mod\":[314159285,2147483647],\"$not\":{\"$mod\":[2147483647,0]},\"$mod\":[314159245,2147483647]}}");
struct GeneratedQuery474 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery474::query("{\"loc\":{\"$geoIntersects\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-180.0,-90]}}}}");
struct GeneratedQuery475 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{d:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery475::query("{\"a\":'You can do anything, but not everything.'}");    Query GeneratedQuery475::sortedQuery = appendSort(GeneratedQuery475::query);    BSONObj GeneratedQuery475::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery476 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery476::query("{a:{\"$date\": -111100000}}");
struct GeneratedQuery477 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery477::query("{\"$where\":'function myFunction() { return this.d != undefined; }'}");
struct GeneratedQuery478 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery478::query("{\"c\":{\"$date\": 1500000}}");
struct GeneratedQuery479 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -100; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery479::query("{\"arrayField\":{\"$elemMatch\":{c:0,\"c\":{\"$not\":{\"$mod\":[2147483647,314159295]}},\"arrayField\":314159265000}}}");    BSONObj GeneratedQuery479::projection = fromjson("{\"b\":1}");
struct GeneratedQuery480 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery480::query("{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}");
struct GeneratedQuery481 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery481::query("{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}");    Query GeneratedQuery481::sortedQuery = appendSort(GeneratedQuery481::query);    
struct GeneratedQuery482 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery482::query("{\"a\":{\"$exists\":false},a:''}");    BSONObj GeneratedQuery482::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery483 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{_id:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery483::query("{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}");    Query GeneratedQuery483::sortedQuery = appendSort(GeneratedQuery483::query);    BSONObj GeneratedQuery483::projection = fromjson("{\"a\":1}");
struct GeneratedQuery484 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery484::query("{_id:{\"$regex\":\"/caseless/i\"}}");
struct GeneratedQuery485 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery485::query("{\"b\":''}");    Query GeneratedQuery485::sortedQuery = appendSort(GeneratedQuery485::query);    
struct GeneratedQuery486 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery486::query("{\"arrayField\":{\"$date\": 1500000}}");
struct GeneratedQuery487 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery487::query("{b:{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''}}");    BSONObj GeneratedQuery487::projection = fromjson("{\"c\":1}");
struct GeneratedQuery488 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery488::query("{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}");    BSONObj GeneratedQuery488::projection = fromjson("{\"a\":1}");
struct GeneratedQuery489 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery489::query("{\"b\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'m'}}");
struct GeneratedQuery490 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery490::query("{\"arrayField\":3.14159265359}");    BSONObj GeneratedQuery490::projection = fromjson("{\"a\":1}");
struct GeneratedQuery491 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery491::query("{d:{\"$date\": -111100000}}");
struct GeneratedQuery492 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery492::query("{\"d\":{\"$date\": 1500000}}");
struct GeneratedQuery493 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery493::query("{_id:{\"$date\": 1500000}}");
struct GeneratedQuery494 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery494::query("{\"$or\":[{b:{\"$size\":NumberLong(-314159265358979323)}}]}");
struct GeneratedQuery495 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery495::query("{\"arrayField.c\":{\"$exists\":0}}");    BSONObj GeneratedQuery495::projection = fromjson("{\"c\":{$slice:2},\"b\":{$elemMatch:{\"loc\":{\"$nearSphere\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[33.3,-90.0]}}},\"a\":'The richest man is not he who has the most, but he who needs the least. anything',\"arrayField\":{\"$date\": 1391633433037},\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}}}");
struct GeneratedQuery496 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery496::query("{\"$and\":[{\"arrayField\":{\"$lt\":{\"arrayField\":[{\"arrayField\":[{\"locHaystack\":[-179.9,-89.9],\"locLegacy\":[25,-33.3]}]},'Usted debe ser el cambio que deseas ver en el mundo.'],\"loc\":{\"type\":\"Point\",\"coordinates\":[0.0,0]}}}},{d:''},{a:''},{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}]}");    Query GeneratedQuery496::sortedQuery = appendSort(GeneratedQuery496::query);    
struct GeneratedQuery497 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery497::query("{\"a\":{\"$date\": -111100000}}");
struct GeneratedQuery498 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery498::query("{\"c\":{\"$mod\":[314159205,2147483647]}}");    BSONObj GeneratedQuery498::projection = fromjson("{d:1}");
struct GeneratedQuery499 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery499::query("{\"arrayField.a\":{\"$type\":14}}");    Query GeneratedQuery499::sortedQuery = appendSort(GeneratedQuery499::query);    
struct GeneratedQuery500 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery500::query("{b:{\"$regex\":\"/\\d?[A-E]\\*/\"}}");
struct GeneratedQuery501 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 100; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery501::query("{\"b\":'I quit therapy because my analyst was trying to help me behind my back. anything'}");    BSONObj GeneratedQuery501::projection = fromjson("{a:1}");
struct GeneratedQuery502 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery502::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");
struct GeneratedQuery503 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 100; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery503::query("{\"arrayField.b\":{\"$type\":11}}");    Query GeneratedQuery503::sortedQuery = appendSort(GeneratedQuery503::query);    
struct GeneratedQuery504 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery504::query("{\"arrayField\":{\"$all\":['You can do anything, but not everything.']}}");
struct GeneratedQuery505 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery505::query("{\"arrayField.c\":{\"$size\":314159255}}");    Query GeneratedQuery505::sortedQuery = appendSort(GeneratedQuery505::query);    
struct GeneratedQuery506 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery506::query("{\"d\":'I quit therapy because my analyst was trying to help me behind my back. anything'}");
struct GeneratedQuery507 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery507::query("{\"a\":{\"$not\":{\"$elemMatch\":{\"arrayField\":false}}}}");    BSONObj GeneratedQuery507::projection = fromjson("{c:1}");
struct GeneratedQuery508 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery508::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");    Query GeneratedQuery508::sortedQuery = appendSort(GeneratedQuery508::query);    BSONObj GeneratedQuery508::projection = fromjson("{_id:1}");
struct GeneratedQuery509 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return -100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery509::query("{\"d\":{\"$exists\":false}}");
struct GeneratedQuery510 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery510::query("{\"arrayField\":{\"$date\": -111100000}}");    BSONObj GeneratedQuery510::projection = fromjson("{a:1}");
struct GeneratedQuery511 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery511::query("{c:{\"$elemMatch\":{\"c\":'You can do anything, but not everything.',b:{\"b\":0}},\"$mod\":[314159225,314159215],\"$elemMatch\":{\"arrayField\":'You can do anything, but not everything.'}}}");
struct GeneratedQuery512 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery512::query("{\"$or\":[{\"arrayField\":{\"$mod\":[314159225,314159295],\"$ne\":314159265009}}]}");
struct GeneratedQuery513 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery513::query("{\"d\":{\"$date\": -111100000}}");    BSONObj GeneratedQuery513::projection = fromjson("{\"a\":1}");
struct GeneratedQuery514 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery514::query("{a:{\"$date\": 1202331498200}}");
struct GeneratedQuery515 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery515::query("{\"$nor\":[{a:false}]}");    Query GeneratedQuery515::sortedQuery = appendSort(GeneratedQuery515::query);    
struct GeneratedQuery516 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery516::query("{\"c\":{\"$regex\":\"/\\Big(\\w\\w)i/\"}}");
struct GeneratedQuery517 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery517::query("{\"arrayField\":{\"$size\":314159295}}");    BSONObj GeneratedQuery517::projection = fromjson("{\"_id._id.c.b\":{$elemMatch:{\"_id\":{\"$ne\":{\"$date\": 1202331498200}}}}}");
struct GeneratedQuery518 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery518::query("{\"arrayField\":true}");
struct GeneratedQuery519 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery519::query("{\"c\":{\"$regex\":\"/abc\\def/\"}}");    Query GeneratedQuery519::sortedQuery = appendSort(GeneratedQuery519::query);    
struct GeneratedQuery520 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery520::query("{\"arrayField.b\":{\"$elemMatch\":{\"a\":''}}}");
struct GeneratedQuery521 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery521::query("{\"arrayField.a\":{\"$all\":[]}}");    Query GeneratedQuery521::sortedQuery = appendSort(GeneratedQuery521::query);    
struct GeneratedQuery522 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery522::query("{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}");    Query GeneratedQuery522::sortedQuery = appendSort(GeneratedQuery522::query);    BSONObj GeneratedQuery522::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery523 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery523::query("{\"$and\":[{\"b\":{\"$not\":{\"$size\":NumberInt(-2147483648)}}},{\"b\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'issi'}}]}");    Query GeneratedQuery523::sortedQuery = appendSort(GeneratedQuery523::query);    BSONObj GeneratedQuery523::projection = fromjson("{c:1}");
struct GeneratedQuery524 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery524::query("{c:{\"$regex\":\"/(tang|tangerine|tan)/\"}}");    Query GeneratedQuery524::sortedQuery = appendSort(GeneratedQuery524::query);    
struct GeneratedQuery525 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery525::query("{\"$or\":[{\"a\":{\"$not\":{\"$size\":314159245}}}]}");    BSONObj GeneratedQuery525::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery526 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery526::query("{\"arrayField\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}");
struct GeneratedQuery527 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery527::query("{\"$and\":[{\"arrayField.c.a\":{\"$type\":8,\"$not\":{\"$not\":{\"$type\":5}},\"$mod\":[314159205,314159275]}},{\"$where\":'this.d != undefined'},{\"$where\":'function myFunction() { return this.d != undefined; }'},{\"_id\":true}]}");
struct GeneratedQuery528 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery528::query("{\"b\":-3.14159265359}");    Query GeneratedQuery528::sortedQuery = appendSort(GeneratedQuery528::query);    
struct GeneratedQuery529 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 100; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery529::query("{\"$or\":[{\"c.c\":314159265019},{c:{\"$date\": 1391633433037}},{\"d\":[[[{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,90.0]}},['',{\"locLegacy\":[-25,33.3]}],{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,25]}}],[{\"arrayField\":[{\"c\":null}]}],{\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,-89.9]}},{\"locLegacy\":[179.9,-90]}]]}]}");    Query GeneratedQuery529::sortedQuery = appendSort(GeneratedQuery529::query);    BSONObj GeneratedQuery529::projection = fromjson("{\"c\":1}");
struct GeneratedQuery530 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery530::query("{\"arrayField\":314159265005}");
struct GeneratedQuery531 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery531::query("{a:'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}");    Query GeneratedQuery531::sortedQuery = appendSort(GeneratedQuery531::query);    BSONObj GeneratedQuery531::projection = fromjson("{\"c\":1}");
struct GeneratedQuery532 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery532::query("{\"d\":null}");
struct GeneratedQuery533 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery533::query("{\"arrayField\":{\"$date\": -111100000},\"arrayField\":0}");
struct GeneratedQuery534 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery534::query("{a:{\"$type\":7}}");    Query GeneratedQuery534::sortedQuery = appendSort(GeneratedQuery534::query);    
struct GeneratedQuery535 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery535::query("{c:{\"$regex\":\"(a|bc)x+yz\",\"$options\":'ss'}}");
struct GeneratedQuery536 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery536::query("{\"$nor\":[{\"arrayField\":{\"$all\":[{\"d\":314159265003,\"arrayField\":[{\"locHaystack\":[-179.9,-90]},{\"arrayField\":['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything']}],\"arrayField\":[{\"$date\": 1500000}]},'You can do anything, but not everything.',{\"arrayField\":[{\"arrayField\":[true]},{\"arrayField\":[{\"arrayField\":[[0.0,1,'You can do anything, but not everything.'],'','',{\"locLegacy\":[-33.3,0],\"locLegacy\":[33.3,-90]}],\"loc\":{\"type\":\"Point\",\"coordinates\":[180,90]}},null]},{\"arrayField\":[{\"locHaystack\":{ 'lng': 0.0, 'lat': -89.9}},'The richest man is not he who has the most, but he who needs the least. anything',1]},{\"a\":{}}]}]}},{\"$where\":'this.d != undefined'}]}");
struct GeneratedQuery537 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery537::query("{\"arrayField\":{\"$date\": 1391633433037}}");    BSONObj GeneratedQuery537::projection = fromjson("{\"c\":1}");
struct GeneratedQuery538 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery538::query("{a:{\"$regex\":\"/(tang|tangerine|tan)/\"}}");
struct GeneratedQuery539 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery539::query("{\"$nor\":[{\"arrayField\":314159265002}]}");
struct GeneratedQuery540 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery540::query("{\"d\":{\"$elemMatch\":{\"arrayField\":0.00000000049406564841,\"d\":{\"$regex\":\"/\\Big(\\w\\w)i/\"}}}}");    Query GeneratedQuery540::sortedQuery = appendSort(GeneratedQuery540::query);    
struct GeneratedQuery541 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery541::query("{\"a\":{\"$mod\":[314159285,314159255],\"$gt\":{\"$date\": -111100000},\"$ne\":3.14159265359}}");
struct GeneratedQuery542 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery542::query("{\"d\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[25,90]}}}");
struct GeneratedQuery543 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery543::query("{\"_id\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}");    Query GeneratedQuery543::sortedQuery = appendSort(GeneratedQuery543::query);    BSONObj GeneratedQuery543::projection = fromjson("{a:{$elemMatch:{\"arrayField\":3.14159265359,\"d\":{\"$regex\":\"c a t #looks for cats\",\"$options\":'simmi'},\"_id\":314159265014}}}");
struct GeneratedQuery544 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return -100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery544::query("{\"$nor\":[{\"a\":'I quit therapy because my analyst was trying to help me behind my back. anything'}]}");
struct GeneratedQuery545 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery545::query("{\"arrayField\":{\"$date\": 1202331498200}}");
struct GeneratedQuery546 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery546::query("{\"a\":{\"$date\": -111100000}}");
struct GeneratedQuery547 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery547::query("{b:{\"$not\":{\"$mod\":[314159295,314159285]}}}");    Query GeneratedQuery547::sortedQuery = appendSort(GeneratedQuery547::query);    BSONObj GeneratedQuery547::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery548 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery548::query("{\"$nor\":[{\"arrayField\":{\"$date\": 1202331498200}}]}");
struct GeneratedQuery549 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery549::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");    Query GeneratedQuery549::sortedQuery = appendSort(GeneratedQuery549::query);    BSONObj GeneratedQuery549::projection = fromjson("{b:1,\"d\":1}");
struct GeneratedQuery550 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id.b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery550::query("{\"$or\":[{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}]}");    Query GeneratedQuery550::sortedQuery = appendSort(GeneratedQuery550::query);    
struct GeneratedQuery551 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery551::query("{\"$nor\":[{\"$where\":'function myFunction() { return this.d != undefined; }'}]}");    Query GeneratedQuery551::sortedQuery = appendSort(GeneratedQuery551::query);    
struct GeneratedQuery552 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery552::query("{\"a\":{\"$regex\":\"/(a)|(b)/\"}}");
struct GeneratedQuery553 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery553::query("{\"c\":314159265014}");
struct GeneratedQuery554 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery554::query("{\"c\":0}");
struct GeneratedQuery555 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 100; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery555::query("{d:{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}}");    Query GeneratedQuery555::sortedQuery = appendSort(GeneratedQuery555::query);    BSONObj GeneratedQuery555::projection = fromjson("{a:1}");
struct GeneratedQuery556 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery556::query("{\"$or\":[{\"arrayField\":''},{\"arrayField\":{\"$date\": 1500000}}]}");
struct GeneratedQuery557 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery557::query("{\"$or\":[{\"d\":314159265013},{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}]}");    Query GeneratedQuery557::sortedQuery = appendSort(GeneratedQuery557::query);    BSONObj GeneratedQuery557::projection = fromjson("{d:1}");
struct GeneratedQuery558 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery558::query("{\"arrayField\":{\"locHaystack\":{ 'lng': 180.0, 'lat': 25}}}");
struct GeneratedQuery559 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery559::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");
struct GeneratedQuery560 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery560::query("{\"$or\":[{\"arrayField\":{\"$all\":['You can do anything, but not everything.']}},{\"_id\":{\"$date\": -111100000}}]}");
struct GeneratedQuery561 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery561::query("{a:{\"$date\": 1202331498200}}");
struct GeneratedQuery562 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery562::query("{\"$and\":[{\"d\":{\"$date\": 1391633433037}},{\"arrayField\":1}]}");    Query GeneratedQuery562::sortedQuery = appendSort(GeneratedQuery562::query);    BSONObj GeneratedQuery562::projection = fromjson("{\"d\":1}");
struct GeneratedQuery563 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery563::query("{\"$or\":[{\"arrayField\":'You can do anything, but not everything.'},{\"$where\":'function myFunction() { return this.d != undefined; }'}]}");
struct GeneratedQuery564 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery564::query("{\"arrayField.a.c\":{\"$not\":{\"$size\":NumberLong(314159265358979353)}}}");    BSONObj GeneratedQuery564::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery565 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery565::query("{\"arrayField\":0.0}");    BSONObj GeneratedQuery565::projection = fromjson("{a:1}");
struct GeneratedQuery566 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery566::query("{\"a\":{\"$mod\":[314159225,314159275]}}");    Query GeneratedQuery566::sortedQuery = appendSort(GeneratedQuery566::query);    
struct GeneratedQuery567 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery567::query("{\"$or\":[{\"d\":{\"$exists\":{\"$date\": 1202331498200}}},{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}]}");
struct GeneratedQuery568 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery568::query("{\"$nor\":[{\"$where\":'function myFunction() { var x = 1 + 2; }'},{\"_id\":{\"$in\":[314159265007]}}]}");
struct GeneratedQuery569 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery569::query("{b:{\"$gt\":314159265010}}");    BSONObj GeneratedQuery569::projection = fromjson("{\"a\":1}");
struct GeneratedQuery570 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{d:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery570::query("{b:[{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-89.9]}}]}]}");    Query GeneratedQuery570::sortedQuery = appendSort(GeneratedQuery570::query);    
struct GeneratedQuery571 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery571::query("{\"_id\":{\"$regex\":\"/^abc/m\"}}");
struct GeneratedQuery572 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery572::query("{\"arrayField\":{\"$date\": 1202331498200}}");
struct GeneratedQuery573 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery573::query("{\"$or\":[{\"_id\":{\"$regex\":\"/^abc(\\d+)/\"}},{\"arrayField\":{\"$not\":{\"$mod\":[314159205,314159235]}}},{\"_id\":{\"$regex\":\"/(a|bc)x+yz/\"}}]}");
struct GeneratedQuery574 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery574::query("{\"a\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}");
struct GeneratedQuery575 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery575::query("{\"arrayField\":{\"$size\":NumberInt(314159225)}}");    Query GeneratedQuery575::sortedQuery = appendSort(GeneratedQuery575::query);    BSONObj GeneratedQuery575::projection = fromjson("{c:1}");
struct GeneratedQuery576 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery576::query("{\"c\":{\"$mod\":[314159235,314159245]}}");    BSONObj GeneratedQuery576::projection = fromjson("{\"a\":1,\"c\":1}");
struct GeneratedQuery577 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery577::query("{\"a\":{\"$regex\":\"/^\\d?\\d(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\d\\d$/\"}}");    BSONObj GeneratedQuery577::projection = fromjson("{\"b\":{$slice:1}}");
struct GeneratedQuery578 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery578::query("{\"$and\":[{_id:314159265012}]}");
struct GeneratedQuery579 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery579::query("{a:314159265008}");    Query GeneratedQuery579::sortedQuery = appendSort(GeneratedQuery579::query);    BSONObj GeneratedQuery579::projection = fromjson("{\"_id\":1,\"b\":1}");
struct GeneratedQuery580 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery580::query("{\"$nor\":[{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'},{\"b\":{\"$elemMatch\":{\"b\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}}},{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'},{\"arrayField\":{\"$date\": 1391633433037}},{\"b\":{\"$date\": 1202331498200}}]}");    BSONObj GeneratedQuery580::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery581 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery581::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");
struct GeneratedQuery582 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery582::query("{\"$nor\":[{\"c\":-3.14159265359}]}");    Query GeneratedQuery582::sortedQuery = appendSort(GeneratedQuery582::query);    BSONObj GeneratedQuery582::projection = fromjson("{\"c\":1}");
struct GeneratedQuery583 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 100; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery583::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");    Query GeneratedQuery583::sortedQuery = appendSort(GeneratedQuery583::query);    
struct GeneratedQuery584 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery584::query("{\"arrayField\":1}");
struct GeneratedQuery585 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery585::query("{\"c\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',\"d\":{\"$type\":17}}");
struct GeneratedQuery586 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery586::query("{\"$or\":[{\"arrayField.d\":{\"$elemMatch\":{d:{\"$regex\":\"/(tang|tangerine|tan)/\"},a:{\"$not\":{\"$mod\":[314159245,314159245]}},\"b\":314159265009,\"b\":'You can do anything, but not everything.',c:true}}}]}");
struct GeneratedQuery587 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery587::query("{\"arrayField\":{\"$date\": 1202331498200}}");
struct GeneratedQuery588 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 100; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery588::query("{\"arrayField\":{\"$mod\":[314159255,314159205]}}");    Query GeneratedQuery588::sortedQuery = appendSort(GeneratedQuery588::query);    BSONObj GeneratedQuery588::projection = fromjson("{\"_id\":1,\"c\":1,\"_id\":1}");
struct GeneratedQuery589 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery589::query("{\"arrayField\":''}");
struct GeneratedQuery590 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery590::query("{\"b\":{\"$not\":{\"$gte\":0.00000000049406564841}}}");
struct GeneratedQuery591 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery591::query("{\"b\":{\"$regex\":\"/caseless/i\"}}");    BSONObj GeneratedQuery591::projection = fromjson("{\"b\":1,a:1}");
struct GeneratedQuery592 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery592::query("{\"c\":{\"$regex\":\"c a t #looks for cats\",\"$options\":'ssmm'}}");
struct GeneratedQuery593 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery593::query("{\"$nor\":[{c:{\"$regex\":\"/cat/\"}},{\"arrayField\":{\"$date\": 1391633433037}}]}");
struct GeneratedQuery594 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery594::query("{\"$or\":[{\"arrayField\":1}]}");    BSONObj GeneratedQuery594::projection = fromjson("{\"arrayField.$\":1,\"_id\":1,b:{$elemMatch:{\"arrayField.d\":{\"$size\":314159255}}}}");
struct GeneratedQuery595 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery595::query("{\"a._id\":{\"$regex\":\"/caseless/i\"}}");    BSONObj GeneratedQuery595::projection = fromjson("{\"b\":1}");
struct GeneratedQuery596 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery596::query("{\"d\":{\"$regex\":\"/^abc/m\"}}");
struct GeneratedQuery597 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery597::query("{\"arrayField\":{\"$type\":17}}");    Query GeneratedQuery597::sortedQuery = appendSort(GeneratedQuery597::query);    BSONObj GeneratedQuery597::projection = fromjson("{\"arrayField.$\":1,c:1}");
struct GeneratedQuery598 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery598::query("{\"a\":''}");    BSONObj GeneratedQuery598::projection = fromjson("{\"c\":1}");
struct GeneratedQuery599 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery599::query("{\"$nor\":[{\"b\":[null]},{\"a\":0}]}");    BSONObj GeneratedQuery599::projection = fromjson("{\"d\":1}");
struct GeneratedQuery600 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery600::query("{\"arrayField\":-3.14159265859}");
struct GeneratedQuery601 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery601::query("{\"arrayField\":{\"$date\": 1391633433037}}");
struct GeneratedQuery602 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery602::query("{\"$nor\":[{c:{\"$lt\":[{\"$date\": -111100000},[[{\"d\":'Usted debe ser el cambio que deseas ver en el mundo.'},{\"$date\": 1391633433037}]],[1]]}}]}");
struct GeneratedQuery603 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery603::query("{\"arrayField\":{\"$date\": 1500000}}");
struct GeneratedQuery604 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery604::query("{\"arrayField\":'Usted puede hacer cualquier cosa, pero no todo.'}");    Query GeneratedQuery604::sortedQuery = appendSort(GeneratedQuery604::query);    BSONObj GeneratedQuery604::projection = fromjson("{\"b\":1,\"c.d\":1}");
struct GeneratedQuery605 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery605::query("{\"arrayField.a\":{\"$size\":NumberInt(-314159265)}}");
struct GeneratedQuery606 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery606::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");
struct GeneratedQuery607 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery607::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");
struct GeneratedQuery608 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery608::query("{\"arrayField\":''}");    Query GeneratedQuery608::sortedQuery = appendSort(GeneratedQuery608::query);    BSONObj GeneratedQuery608::projection = fromjson("{\"b\":1,a:1}");
struct GeneratedQuery609 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery609::query("{\"$nor\":[{\"arrayField\":314159265004},{\"arrayField\":{\"$date\": -111100000}},{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}]}");
struct GeneratedQuery610 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery610::query("{\"$or\":[{\"$where\":'function myFunction() { return this.d != undefined; }'}]}");    BSONObj GeneratedQuery610::projection = fromjson("{\"arrayField.$\":1,\"c\":1}");
struct GeneratedQuery611 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery611::query("{\"arrayField\":'You miss 100 percent of the shots you never take. anything'}");
struct GeneratedQuery612 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery612::query("{\"arrayField\":{\"$elemMatch\":{d:1,d:{\"$mod\":[314159215,314159245]},\"arrayField\":true}}}");    BSONObj GeneratedQuery612::projection = fromjson("{\"arrayField.$\":1,d:1}");
struct GeneratedQuery613 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery613::query("{\"$nor\":[{\"arrayField\":{\"$date\": -111100000}}]}");
struct GeneratedQuery614 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery614::query("{\"d\":{\"$elemMatch\":{\"arrayField.b.c\":{\"$nin\":[1,314159265018,'You can do anything, but not everything.',314159265016,0]}}}}");    BSONObj GeneratedQuery614::projection = fromjson("{d:1,\"c\":1,b:1}");
struct GeneratedQuery615 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return -10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery615::query("{\"$or\":[{\"b\":{\"$mod\":[314159215,314159225]}}]}");
struct GeneratedQuery616 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery616::query("{c:{\"$not\":{\"$not\":{\"$not\":{\"$all\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,25]}}]}}}}}");
struct GeneratedQuery617 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery617::query("{\"$or\":[{\"arrayField\":{\"$elemMatch\":{d:0,c:{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}}}}]}");    Query GeneratedQuery617::sortedQuery = appendSort(GeneratedQuery617::query);    
struct GeneratedQuery618 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery618::query("{\"_id\":314159265002}");    BSONObj GeneratedQuery618::projection = fromjson("{\"d\":1,\"b\":1}");
struct GeneratedQuery619 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery619::query("{\"arrayField\":null}");
struct GeneratedQuery620 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery620::query("{_id:'Usted debe ser el cambio que deseas ver en el mundo.'}");    Query GeneratedQuery620::sortedQuery = appendSort(GeneratedQuery620::query);    BSONObj GeneratedQuery620::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery621 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery621::query("{\"$or\":[{\"arrayField\":0},{\"a\":{\"$ne\":0.00000000049406564841,\"$exists\":true,\"$elemMatch\":{\"arrayField\":314159265007,\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'},\"$ne\":'',\"$mod\":[314159285,314159235],\"$not\":{\"$nin\":[{\"$date\": -111100000}]}}},{\"b\":'You must be the change you wish to see in the world. anything'},{\"a\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}]}");    Query GeneratedQuery621::sortedQuery = appendSort(GeneratedQuery621::query);    BSONObj GeneratedQuery621::projection = fromjson("{\"arrayField.$\":1,\"a\":1,b:1}");
struct GeneratedQuery622 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery622::query("{\"c\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":'sms'}}");    BSONObj GeneratedQuery622::projection = fromjson("{\"arrayField.$\":1,c:1}");
struct GeneratedQuery623 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery623::query("{\"arrayField\":['You miss 100 percent of the shots you never take. anything',null],\"arrayField.c\":{\"$mod\":[314159255,314159255]},\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}");    BSONObj GeneratedQuery623::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery624 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery624::query("{\"arrayField\":0}");
struct GeneratedQuery625 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery625::query("{\"arrayField.b\":{\"$mod\":[314159265,2147483647],\"$mod\":[314159265,314159245]}}");    Query GeneratedQuery625::sortedQuery = appendSort(GeneratedQuery625::query);    
struct GeneratedQuery626 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery626::query("{\"arrayField.d._id\":{\"$not\":{\"$all\":['You must be the change you wish to see in the world. anything',{\"locHaystack\":[179.9,-33.3],\"arrayField\":[314159265014],\"locHaystack\":[-179.9,89.9]},{\"$date\": 1500000},{\"$date\": -111100000},{\"arrayField\":[{\"locHaystack\":{ 'lng': 180, 'lat': -33.3}},'You can do anything, but not everything.',{\"arrayField\":['You can do anything, but not everything.',0,{\"$date\": -111100000},'',{\"a\":{\"arrayField\":[314159265001]}}]},'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything']},{},'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas',[{\"b\":{\"arrayField\":[{\"d\":'You can do anything, but not everything.',\"arrayField\":[{}],\"locHaystack\":{ 'lng': 0, 'lat': -33.3}}]}},{\"$date\": -111100000}]]}}}");
struct GeneratedQuery627 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery627::query("{a:{\"$in\":['Echa de menos el 100 por ciento de los tiros que nunca toma.'],\"$in\":[0.00002225073858072014],\"$type\":14}}");
struct GeneratedQuery628 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery628::query("{\"c\":{\"$regex\":\"/cat/\"}}");    Query GeneratedQuery628::sortedQuery = appendSort(GeneratedQuery628::query);    BSONObj GeneratedQuery628::projection = fromjson("{_id:{$slice:2},c:1}");
struct GeneratedQuery629 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery629::query("{\"_id\":{\"$size\":NumberLong(314159265358979383)}}");    Query GeneratedQuery629::sortedQuery = appendSort(GeneratedQuery629::query);    
struct GeneratedQuery630 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery630::query("{\"$nor\":[{\"_id\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''}},{\"arrayField\":0},{\"arrayField\":null},{\"$where\":'this.d != undefined'}]}");
struct GeneratedQuery631 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery631::query("{\"c\":314159265002}");
struct GeneratedQuery632 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery632::query("{b:{\"$type\":2}}");    Query GeneratedQuery632::sortedQuery = appendSort(GeneratedQuery632::query);    BSONObj GeneratedQuery632::projection = fromjson("{b:1}");
struct GeneratedQuery633 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery633::query("{\"c\":'Usted puede hacer cualquier cosa, pero no todo.'}");    Query GeneratedQuery633::sortedQuery = appendSort(GeneratedQuery633::query);    BSONObj GeneratedQuery633::projection = fromjson("{_id:1}");
struct GeneratedQuery634 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery634::query("{\"d\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'msss'}}");
struct GeneratedQuery635 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery635::query("{\"a\":{\"$in\":['Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything',{\"d\":{\"a\":{\"b\":'',\"arrayField\":[314159265003,314159265015,{\"locLegacy\":[25,90]},{\"$date\": 1391633433037},null,{\"arrayField\":['You can do anything, but not everything.']}],\"arrayField\":[314159265008,'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything']}}}]}}");    Query GeneratedQuery635::sortedQuery = appendSort(GeneratedQuery635::query);    BSONObj GeneratedQuery635::projection = fromjson("{\"arrayField.$\":1,\"d\":{$elemMatch:{\"loc\":{\"$geoIntersects\":{\"$geometry\":{\"type\":\"Polygon\",\"coordinates\":[[ [0,0],[3,6],[6,1],[0,0] ]]}}},\"_id\":{\"$not\":{\"$elemMatch\":{\"arrayField.a\":{\"$not\":{\"$not\":{\"$mod\":[314159295,314159265]}},\"$lt\":3.14159265359}}}},a:{\"$mod\":[314159275,314159205]},\"arrayField.b\":{\"$exists\":{\"$date\": -111100000},\"$mod\":[314159225,314159295]}}}}");
struct GeneratedQuery636 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery636::query("{\"arrayField\":{\"$size\":314159225}}");    BSONObj GeneratedQuery636::projection = fromjson("{\"c\":1}");
struct GeneratedQuery637 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery637::query("{\"d\":{\"$regex\":\"/(a)|(b)/\"},\"d\":{\"$regex\":\"/abc\\def/\"}}");    Query GeneratedQuery637::sortedQuery = appendSort(GeneratedQuery637::query);    BSONObj GeneratedQuery637::projection = fromjson("{\"a\":1}");
struct GeneratedQuery638 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery638::query("{\"$and\":[{\"arrayField\":false}]}");
struct GeneratedQuery639 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery639::query("{\"b\":{\"$regex\":\"/^abc/\"}}");    BSONObj GeneratedQuery639::projection = fromjson("{\"d\":1}");
struct GeneratedQuery640 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery640::query("{\"$or\":[{\"c\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'iim'}},{\"arrayField\":'I quit therapy because my analyst was trying to help me behind my back. anything'},{a:{\"$mod\":[314159285,314159255]}},{\"arrayField\":'You can do anything, but not everything.'},{d:314159265013},{\"_id\":'You can do anything, but not everything.'},{\"c\":{\"$regex\":\"/^abc/\"}}]}");
struct GeneratedQuery641 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery641::query("{\"arrayField\":{\"$date\": 1202331498200}}");
struct GeneratedQuery642 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery642::query("{d:{\"$not\":{\"$size\":NumberInt(314159235)}}}");    BSONObj GeneratedQuery642::projection = fromjson("{\"c\":1}");
struct GeneratedQuery643 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery643::query("{\"b\":0}");
struct GeneratedQuery644 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery644::query("{\"arrayField\":{\"$all\":['You can do anything, but not everything.',1797693134862315799999,{\"arrayField\":[{\"$date\": 1500000}]},{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,-25]},\"arrayField\":[{\"a\":{\"arrayField\":[{\"$date\": 1500000}]},\"arrayField\":[0,[{\"locHaystack\":{ 'lng': -25, 'lat': 90.0}}]]},{\"arrayField\":['Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'],\"arrayField\":[{\"d\":'I quit therapy because my analyst was trying to help me behind my back. anything'},{\"arrayField\":[{\"_id\":'I quit therapy because my analyst was trying to help me behind my back. anything'}]}]}],\"_id\":'',\"locHaystack\":[-179.9,-25],\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,-33.3]}},null]},1]}}");
struct GeneratedQuery645 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery645::query("{\"arrayField\":{\"$exists\":false}}");
struct GeneratedQuery646 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery646::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");    Query GeneratedQuery646::sortedQuery = appendSort(GeneratedQuery646::query);    BSONObj GeneratedQuery646::projection = fromjson("{\"d\":1}");
struct GeneratedQuery647 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery647::query("{\"a\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'ii'}}");    BSONObj GeneratedQuery647::projection = fromjson("{\"c\":1}");
struct GeneratedQuery648 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery648::query("{\"c\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":''}}");
struct GeneratedQuery649 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery649::query("{\"arrayField\":{\"$date\": -111100000}}");    Query GeneratedQuery649::sortedQuery = appendSort(GeneratedQuery649::query);    
struct GeneratedQuery650 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery650::query("{\"d\":0}");
struct GeneratedQuery651 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery651::query("{\"$nor\":[{\"arrayField\":''},{a:{\"$regex\":\"c a t #looks for cats\",\"$options\":'siimmm'}}]}");    Query GeneratedQuery651::sortedQuery = appendSort(GeneratedQuery651::query);    
struct GeneratedQuery652 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{_id:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery652::query("{\"arrayField\":{\"$date\": -111100000}}");    Query GeneratedQuery652::sortedQuery = appendSort(GeneratedQuery652::query);    BSONObj GeneratedQuery652::projection = fromjson("{c:1}");
struct GeneratedQuery653 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery653::query("{c:{\"$not\":{\"$ne\":314159265006}}}");
struct GeneratedQuery654 {      static Query getQuery() { return query; }      static int nToSkip() { return 100; }      static int nToLimit() { return -10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery654::query("{\"$nor\":[{\"d\":['',{\"a\":'You can do anything, but not everything.'}]}]}");
struct GeneratedQuery655 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery655::query("{\"a\":true}");    Query GeneratedQuery655::sortedQuery = appendSort(GeneratedQuery655::query);    
struct GeneratedQuery656 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery656::query("{\"a\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'sm'}}");    Query GeneratedQuery656::sortedQuery = appendSort(GeneratedQuery656::query);    
struct GeneratedQuery657 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery657::query("{\"arrayField\":''}");    Query GeneratedQuery657::sortedQuery = appendSort(GeneratedQuery657::query);    BSONObj GeneratedQuery657::projection = fromjson("{\"a\":{$slice:1}}");
struct GeneratedQuery658 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery658::query("{\"$or\":[{\"d\":''}]}");    Query GeneratedQuery658::sortedQuery = appendSort(GeneratedQuery658::query);    BSONObj GeneratedQuery658::projection = fromjson("{d:1}");
struct GeneratedQuery659 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery659::query("{\"$or\":[{b:false},{\"arrayField\":{\"$all\":['You can do anything, but not everything.']}},{\"b\":314159265017}]}");    Query GeneratedQuery659::sortedQuery = appendSort(GeneratedQuery659::query);    BSONObj GeneratedQuery659::projection = fromjson("{\"b\":1}");
struct GeneratedQuery660 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery660::query("{\"a\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":''}}");
struct GeneratedQuery661 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery661::query("{\"c\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":'mm'}}");    BSONObj GeneratedQuery661::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery662 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery662::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }',c:314159265018,\"c\":{\"$all\":[]},\"c\":1}");
struct GeneratedQuery663 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery663::query("{\"_id\":{\"$all\":[0.00002225073858072014,{\"_id\":{\"locLegacy\":[0.0,-90.0]},\"c\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-90.0]}}}]}}");    Query GeneratedQuery663::sortedQuery = appendSort(GeneratedQuery663::query);    
struct GeneratedQuery664 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery664::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");
struct GeneratedQuery665 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery665::query("{\"arrayField\":{\"$date\": 1202331498200}}");
struct GeneratedQuery666 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery666::query("{\"$nor\":[{\"$where\":'this.d != undefined'}]}");    Query GeneratedQuery666::sortedQuery = appendSort(GeneratedQuery666::query);    
struct GeneratedQuery667 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery667::query("{\"$nor\":[{d:'You can do anything, but not everything.'},{a:''},{\"d\":{\"$date\": 1391633433037}}]}");
struct GeneratedQuery668 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery668::query("{\"$or\":[{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'},{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'},{\"arrayField\":{\"$date\": -111100000}},{b:{\"$mod\":[314159265,314159205]}}]}");
struct GeneratedQuery669 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery669::query("{\"$nor\":[{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'},{\"c\":{\"$not\":{\"$all\":[{\"b\":[false]}]}}}]}");    Query GeneratedQuery669::sortedQuery = appendSort(GeneratedQuery669::query);    
struct GeneratedQuery670 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery670::query("{\"a\":{\"$regex\":\"c a t #looks for cats\",\"$options\":''}}");
struct GeneratedQuery671 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery671::query("{\"arrayField\":null}");
struct GeneratedQuery672 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery672::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");
struct GeneratedQuery673 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery673::query("{\"_id\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'}");
struct GeneratedQuery674 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery674::query("{\"$or\":[{\"arrayField\":[{\"arrayField\":['You can do anything, but not everything.','Echa de menos el 100 por ciento de los tiros que nunca toma.']},'',[314159265004]]}]}");
struct GeneratedQuery675 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery675::query("{\"$or\":[{\"arrayField\":{\"$date\": 1500000}}]}");
struct GeneratedQuery676 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery676::query("{d:'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}");
struct GeneratedQuery677 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery677::query("{\"$nor\":[{\"arrayField\":true},{\"arrayField._id\":{\"$size\":NumberInt(314159205)}},{\"a\":{\"$date\": -111100000}},{\"$where\":'function myFunction() { return this.d != undefined; }'}]}");
struct GeneratedQuery678 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery678::query("{\"arrayField\":-3.14159265359}");    BSONObj GeneratedQuery678::projection = fromjson("{\"d\":1}");
struct GeneratedQuery679 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery679::query("{\"a\":{\"$nin\":[true,'You can do anything, but not everything.']}}");    BSONObj GeneratedQuery679::projection = fromjson("{a:1}");
struct GeneratedQuery680 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery680::query("{\"b\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}}");
struct GeneratedQuery681 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery681::query("{\"d._id\":{\"$date\": 1500000}}");    BSONObj GeneratedQuery681::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery682 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery682::query("{\"loc\":{\"$geoWithin\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-33.3,-33.3]},\"$uniqueDocs\":0}}}");    BSONObj GeneratedQuery682::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery683 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery683::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");
struct GeneratedQuery684 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery684::query("{\"a\":314159265012}");
struct GeneratedQuery685 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery685::query("{\"d\":{\"$regex\":\"/^abc(\\d+)/\"}}");    BSONObj GeneratedQuery685::projection = fromjson("{_id:1,\"d\":1,c:{$slice:1}}");
struct GeneratedQuery686 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery686::query("{\"$and\":[{\"a\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180,0]}}]},{\"b\":{\"_id\":314159265008}}]}");
struct GeneratedQuery687 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery687::query("{\"arrayField.c\":{\"$elemMatch\":{\"_id\":{\"$date\": 1500000}}}}");
struct GeneratedQuery688 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery688::query("{\"b\":false}");    Query GeneratedQuery688::sortedQuery = appendSort(GeneratedQuery688::query);    
struct GeneratedQuery689 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery689::query("{\"c.b.d\":{\"$elemMatch\":{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}}}");
struct GeneratedQuery690 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery690::query("{\"_id\":{\"$lte\":{\"arrayField\":[null],\"b\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'}}}");    Query GeneratedQuery690::sortedQuery = appendSort(GeneratedQuery690::query);    BSONObj GeneratedQuery690::projection = fromjson("{\"a\":1}");
struct GeneratedQuery691 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery691::query("{d:{\"$date\": 1391633433037}}");
struct GeneratedQuery692 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery692::query("{\"_id\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}");
struct GeneratedQuery693 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery693::query("{\"b\":{\"$not\":{\"$gte\":[{\"locHaystack\":{ 'lng': -180.0, 'lat': 0.0}},{\"arrayField\":[null]}]}}}");    BSONObj GeneratedQuery693::projection = fromjson("{\"a\":{$slice:10},\"b\":1}");
struct GeneratedQuery694 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery694::query("{\"$nor\":[{\"loc\":{\"$geoWithin\":{\"$geometry\":{\"type\":\"Polygon\",\"coordinates\":[[ [0,0],[3,0], [4,2], [2,3],[-1,11], [-2,7], [-3,5], [-8,2],[-7,-2], [-5,-5], [-1,-19],[1,-20], [3,-10], [2,-3],[0,0]],[ [0,0],[2,0], [3,4], [2,5], [1,9],[-1,9], [-2,5], [-3,6], [-4,2],[-9,-1], [-7,-3], [-2,-7],[2,-8], [2,-5],[0,0]]]},\"$uniqueDocs\":false}}},{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}]}");    BSONObj GeneratedQuery694::projection = fromjson("{a:1}");
struct GeneratedQuery695 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery695::query("{d:'You miss 100 percent of the shots you never take. anything'}");
struct GeneratedQuery696 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery696::query("{\"$or\":[{\"arrayField\":314159265008},{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'},{\"arrayField\":{\"$size\":NumberLong(314159265358979393)}}]}");    Query GeneratedQuery696::sortedQuery = appendSort(GeneratedQuery696::query);    BSONObj GeneratedQuery696::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery697 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return -100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery697::query("{a:{\"$regex\":\"/abc\\def/\"}}");
struct GeneratedQuery698 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery698::query("{\"b\":0.00002225073858072014}");
struct GeneratedQuery699 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery699::query("{\"arrayField\":0}");    Query GeneratedQuery699::sortedQuery = appendSort(GeneratedQuery699::query);    
struct GeneratedQuery700 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery700::query("{\"c\":314159265013}");
struct GeneratedQuery701 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery701::query("{c:'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'}");
struct GeneratedQuery702 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery702::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");    Query GeneratedQuery702::sortedQuery = appendSort(GeneratedQuery702::query);    BSONObj GeneratedQuery702::projection = fromjson("{d:1,\"d\":1}");
struct GeneratedQuery703 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery703::query("{\"$nor\":[{\"arrayField.a\":{\"$size\":NumberInt(314159255)}},{\"arrayField\":0}]}");
struct GeneratedQuery704 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery704::query("{\"a\":{\"$regex\":\"/abc\\def/\"}}");    Query GeneratedQuery704::sortedQuery = appendSort(GeneratedQuery704::query);    BSONObj GeneratedQuery704::projection = fromjson("{\"d\":{$slice:1}}");
struct GeneratedQuery705 {      static Query getQuery() { return query; }      static int nToSkip() { return 100; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery705::query("{d:'You miss 100 percent of the shots you never take. anything'}");
struct GeneratedQuery706 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery706::query("{\"c\":{\"$not\":{\"$mod\":[314159215,314159275]}}}");    Query GeneratedQuery706::sortedQuery = appendSort(GeneratedQuery706::query);    
struct GeneratedQuery707 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery707::query("{\"d\":'You must be the change you wish to see in the world. anything'}");    BSONObj GeneratedQuery707::projection = fromjson("{b:1}");
struct GeneratedQuery708 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery708::query("{d:1797693134862315799999}");
struct GeneratedQuery709 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery709::query("{\"a\":{\"$date\": 1202331498200}}");
struct GeneratedQuery710 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery710::query("{b:{\"$not\":{\"$not\":{\"$type\":15}}}}");
struct GeneratedQuery711 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery711::query("{d:{\"$regex\":\"c a t #looks for cats\",\"$options\":''}}");
struct GeneratedQuery712 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery712::query("{\"$or\":[{\"b\":{\"$date\": 1500000}},{\"a\":{\"$regex\":\"/\\d?[A-E]\\*/\"}},{\"$where\":'function myFunction() { return this.d != undefined; }'}]}");    Query GeneratedQuery712::sortedQuery = appendSort(GeneratedQuery712::query);    
struct GeneratedQuery713 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery713::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9',\"a\":{\"$regex\":\"/^\\d?\\d(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\d\\d$/\"},\"d\":null}");
struct GeneratedQuery714 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery714::query("{\"b\":{\"$not\":{\"$mod\":[314159215,314159235]}}}");    Query GeneratedQuery714::sortedQuery = appendSort(GeneratedQuery714::query);    BSONObj GeneratedQuery714::projection = fromjson("{\"d\":1}");
struct GeneratedQuery715 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery715::query("{\"d\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''}}");
struct GeneratedQuery716 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery716::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");
struct GeneratedQuery717 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery717::query("{\"$nor\":[{\"c\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":''}},{a:{\"$mod\":[314159255,0]}}]}");
struct GeneratedQuery718 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery718::query("{\"d\":{\"$all\":['']}}");
struct GeneratedQuery719 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery719::query("{\"arrayField\":{\"$not\":{\"$gt\":false}}}");
struct GeneratedQuery720 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery720::query("{\"$or\":[{\"b\":2225073858072009000.99}]}");    Query GeneratedQuery720::sortedQuery = appendSort(GeneratedQuery720::query);    BSONObj GeneratedQuery720::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery721 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery721::query("{\"c\":{\"$not\":{\"$mod\":[314159295,314159215]}}}");    BSONObj GeneratedQuery721::projection = fromjson("{b:1}");
struct GeneratedQuery722 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery722::query("{\"arrayField\":{\"$not\":{\"$not\":{\"$not\":{\"$lt\":0}}}}}");    Query GeneratedQuery722::sortedQuery = appendSort(GeneratedQuery722::query);    BSONObj GeneratedQuery722::projection = fromjson("{\"c\":1}");
struct GeneratedQuery723 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery723::query("{\"b\":'You can do anything, but not everything.'}");    Query GeneratedQuery723::sortedQuery = appendSort(GeneratedQuery723::query);    BSONObj GeneratedQuery723::projection = fromjson("{\"c\":1}");
struct GeneratedQuery724 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery724::query("{\"$where\":'function myFunction() { return this.d != undefined; }'}");
struct GeneratedQuery725 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery725::query("{\"$and\":[{\"arrayField._id\":{\"$not\":{\"$mod\":[314159265,314159215]}}},{\"c\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}]}");    BSONObj GeneratedQuery725::projection = fromjson("{\"b\":1}");
struct GeneratedQuery726 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery726::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");    Query GeneratedQuery726::sortedQuery = appendSort(GeneratedQuery726::query);    
struct GeneratedQuery727 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery727::query("{\"d\":'Usted debe ser el cambio que deseas ver en el mundo.'}");    BSONObj GeneratedQuery727::projection = fromjson("{\"d\":1}");
struct GeneratedQuery728 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery728::query("{\"a\":314159265001}");
struct GeneratedQuery729 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery729::query("{\"_id\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,-25]},\"c\":{\"locHaystack\":{ 'lng': -180, 'lat': 0}}}}");
struct GeneratedQuery730 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery730::query("{\"$nor\":[{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'},{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'},{\"arrayField\":1}]}");
struct GeneratedQuery731 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery731::query("{\"c.a\":{\"$regex\":\"c a t #looks for cats\",\"$options\":'ms'}}");
struct GeneratedQuery732 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery732::query("{\"a\":{\"$exists\":0}}");
struct GeneratedQuery733 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery733::query("{\"c\":{\"$date\": 1500000}}");
struct GeneratedQuery734 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery734::query("{\"arrayField.a\":{\"$mod\":[314159275,314159255]}}");    BSONObj GeneratedQuery734::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery735 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery735::query("{\"arrayField\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'}");
struct GeneratedQuery736 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery736::query("{a:{\"$mod\":[314159245,2147483647]}}");
struct GeneratedQuery737 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery737::query("{\"$nor\":[{a:{\"$size\":2147483647}},{\"loc\":{\"$geoWithin\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-25,0.0]},\"$uniqueDocs\":true}}},{\"b\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}},{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'},{a:{\"$regex\":\"/\\Big(\\w\\w)i/\"}},{\"arrayField\":{\"$date\": -111100000}}]}");    Query GeneratedQuery737::sortedQuery = appendSort(GeneratedQuery737::query);    
struct GeneratedQuery738 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery738::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");
struct GeneratedQuery739 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery739::query("{\"b\":{\"$date\": 1202331498200}}");    BSONObj GeneratedQuery739::projection = fromjson("{\"b\":1}");
struct GeneratedQuery740 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery740::query("{\"d\":{\"$all\":[-3.14159265000]}}");    BSONObj GeneratedQuery740::projection = fromjson("{\"b\":1}");
struct GeneratedQuery741 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery741::query("{\"arrayField.d\":{\"$all\":[{\"b\":314159265008},{\"arrayField\":['']}]}}");    Query GeneratedQuery741::sortedQuery = appendSort(GeneratedQuery741::query);    BSONObj GeneratedQuery741::projection = fromjson("{\"b\":1}");
struct GeneratedQuery742 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery742::query("{\"loc\":{\"$nearSphere\":[25,0],\"$maxDistance\":314159265016}}");
struct GeneratedQuery743 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery743::query("{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}");
struct GeneratedQuery744 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery744::query("{\"_id\":{\"$regex\":\"/\\d?[A-E]\\*/\"}}");    BSONObj GeneratedQuery744::projection = fromjson("{b:{$slice:10},\"a\":1,\"d\":1}");
struct GeneratedQuery745 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery745::query("{\"b\":{\"$regex\":\"/\\Big(\\w\\w)i/\"}}");    BSONObj GeneratedQuery745::projection = fromjson("{d:1}");
struct GeneratedQuery746 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery746::query("{\"arrayField.c\":{\"$type\":3}}");    Query GeneratedQuery746::sortedQuery = appendSort(GeneratedQuery746::query);    
struct GeneratedQuery747 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery747::query("{\"arrayField._id\":{\"$all\":[{\"c\":'You miss 100 percent of the shots you never take. anything'},'You miss 100 percent of the shots you never take. anything']}}");
struct GeneratedQuery748 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery748::query("{a:{\"$gte\":false}}");    BSONObj GeneratedQuery748::projection = fromjson("{\"a\":1}");
struct GeneratedQuery749 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery749::query("{\"$or\":[{\"b\":false},{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}]}");
struct GeneratedQuery750 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery750::query("{\"$and\":[{\"d\":'You must be the change you wish to see in the world. anything'}]}");    BSONObj GeneratedQuery750::projection = fromjson("{\"_id\":1,d:1}");
struct GeneratedQuery751 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery751::query("{\"b\":false}");    Query GeneratedQuery751::sortedQuery = appendSort(GeneratedQuery751::query);    
struct GeneratedQuery752 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery752::query("{\"b\":{\"$not\":{\"$mod\":[2147483647,2147483647]},\"$gt\":false}}");
struct GeneratedQuery753 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery753::query("{\"a\":''}");    Query GeneratedQuery753::sortedQuery = appendSort(GeneratedQuery753::query);    
struct GeneratedQuery754 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery754::query("{\"a\":-3.14159265859}");    Query GeneratedQuery754::sortedQuery = appendSort(GeneratedQuery754::query);    
struct GeneratedQuery755 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery755::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");    BSONObj GeneratedQuery755::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery756 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery756::query("{\"arrayField\":0}");
struct GeneratedQuery757 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery757::query("{\"$or\":[{a:314159265000},{\"_id\":'You can do anything, but not everything.'},{\"arrayField\":0.00002225073858072014}]}");    Query GeneratedQuery757::sortedQuery = appendSort(GeneratedQuery757::query);    BSONObj GeneratedQuery757::projection = fromjson("{\"d\":1}");
struct GeneratedQuery758 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery758::query("{\"$nor\":[{\"_id\":'You can do anything, but not everything.'},{\"b\":{\"$elemMatch\":{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }',\"arrayField\":{\"$elemMatch\":{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}}}}}]}");    Query GeneratedQuery758::sortedQuery = appendSort(GeneratedQuery758::query);    BSONObj GeneratedQuery758::projection = fromjson("{c:1}");
struct GeneratedQuery759 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery759::query("{\"c\":{\"$date\": 1391633433037}}");
struct GeneratedQuery760 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery760::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");
struct GeneratedQuery761 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{d:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery761::query("{\"d\":{\"$exists\":true},\"arrayField\":{\"$date\": 1202331498200},\"_id\":{\"$gt\":'You can do anything, but not everything.'},a:{\"c\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,90]}},\"locHaystack\":[25,33.3]},\"_id\":{\"$gt\":true}}");    Query GeneratedQuery761::sortedQuery = appendSort(GeneratedQuery761::query);    
struct GeneratedQuery762 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery762::query("{\"b\":{\"$date\": -111100000}}");
struct GeneratedQuery763 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery763::query("{\"loc\":{\"$geoIntersects\":{\"$geometry\":{\"type\":\"Polygon\",\"coordinates\":[[ [2,2],[3,3],[4,2],[2,2] ]]}}}}");
struct GeneratedQuery764 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery764::query("{\"arrayField\":'You must be the change you wish to see in the world. anything'}");    BSONObj GeneratedQuery764::projection = fromjson("{\"b\":1,\"a\":1,\"a\":{$elemMatch:{\"b\":{\"$all\":[null,'To the man who only has a hammer, everything he encounters begins to look like a nail. anything']}}}}");
struct GeneratedQuery765 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery765::query("{\"loc\":{\"$near\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[180.0,90]},\"$maxDistance\":314159265012}}}");    BSONObj GeneratedQuery765::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery766 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery766::query("{\"$nor\":[{\"arrayField\":{\"$exists\":1,\"$mod\":[314159295,314159235]}}]}");    BSONObj GeneratedQuery766::projection = fromjson("{\"b\":1}");
struct GeneratedQuery767 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery767::query("{\"$nor\":[{\"arrayField.a\":{\"$mod\":[314159265,314159295]}}]}");
struct GeneratedQuery768 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery768::query("{\"loc\":{\"$nearSphere\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-33.3,90.0]},\"$maxDistance\":314159265008}}}");    Query GeneratedQuery768::sortedQuery = appendSort(GeneratedQuery768::query);    
struct GeneratedQuery769 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery769::query("{\"c\":{\"$size\":NumberInt(314159275)}}");    BSONObj GeneratedQuery769::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery770 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery770::query("{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}");
struct GeneratedQuery771 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery771::query("{_id:{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}}");    Query GeneratedQuery771::sortedQuery = appendSort(GeneratedQuery771::query);    BSONObj GeneratedQuery771::projection = fromjson("{\"d\":1}");
struct GeneratedQuery772 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery772::query("{\"arrayField\":{\"$date\": -111100000}}");
struct GeneratedQuery773 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery773::query("{\"arrayField\":0}");
struct GeneratedQuery774 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery774::query("{\"b\":{\"$mod\":[314159275,314159265],\"$elemMatch\":{\"$where\":'(this.a || this.b || this.c || this.d) > 10'},\"$size\":NumberLong(314159265358979393),\"$size\":NumberLong(314159265358979393)}}");
struct GeneratedQuery775 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery775::query("{\"d\":{\"$lt\":0}}");
struct GeneratedQuery776 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery776::query("{\"arrayField\":false}");    BSONObj GeneratedQuery776::projection = fromjson("{\"d\":{$slice:2}}");
struct GeneratedQuery777 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery777::query("{\"d\":{\"$mod\":[314159215,314159245]}}");
struct GeneratedQuery778 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery778::query("{\"c\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}");    Query GeneratedQuery778::sortedQuery = appendSort(GeneratedQuery778::query);    BSONObj GeneratedQuery778::projection = fromjson("{a:{$elemMatch:{\"_id.c\":{\"$elemMatch\":{\"b\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}}},\"c\":{\"$mod\":[314159245,314159255]},\"d\":{\"$mod\":[314159255,314159215]}}}}");
struct GeneratedQuery779 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery779::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");    Query GeneratedQuery779::sortedQuery = appendSort(GeneratedQuery779::query);    BSONObj GeneratedQuery779::projection = fromjson("{a:1}");
struct GeneratedQuery780 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery780::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");    Query GeneratedQuery780::sortedQuery = appendSort(GeneratedQuery780::query);    
struct GeneratedQuery781 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery781::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");
struct GeneratedQuery782 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery782::query("{\"d\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'i'}}");
struct GeneratedQuery783 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery783::query("{\"c\":{\"$regex\":\"c a t #looks for cats\",\"$options\":'i'}}");    Query GeneratedQuery783::sortedQuery = appendSort(GeneratedQuery783::query);    
struct GeneratedQuery784 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery784::query("{\"d\":{\"$regex\":\"/\\Big(\\w\\w)i/\"}}");    Query GeneratedQuery784::sortedQuery = appendSort(GeneratedQuery784::query);    
struct GeneratedQuery785 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery785::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");    Query GeneratedQuery785::sortedQuery = appendSort(GeneratedQuery785::query);    BSONObj GeneratedQuery785::projection = fromjson("{\"arrayField.$\":1,\"a\":1}");
struct GeneratedQuery786 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{d:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery786::query("{\"d\":{\"$in\":[]}}");    Query GeneratedQuery786::sortedQuery = appendSort(GeneratedQuery786::query);    
struct GeneratedQuery787 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery787::query("{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'}");
struct GeneratedQuery788 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery788::query("{\"b\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'m'}}");    BSONObj GeneratedQuery788::projection = fromjson("{\"c\":1}");
struct GeneratedQuery789 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery789::query("{\"arrayField\":{\"$size\":NumberInt(314159215)}}");    BSONObj GeneratedQuery789::projection = fromjson("{\"d\":1}");
struct GeneratedQuery790 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery790::query("{\"arrayField.d\":{\"$all\":[{\"arrayField\":[{\"a\":0.0}],\"locHaystack\":[180.0,90.0]},null,false,'You must be the change you wish to see in the world. anything']}}");    BSONObj GeneratedQuery790::projection = fromjson("{b:{$slice:2}}");
struct GeneratedQuery791 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery791::query("{\"d\":{}}");
struct GeneratedQuery792 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 100; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery792::query("{\"arrayField\":{\"$date\": -111100000}}");    Query GeneratedQuery792::sortedQuery = appendSort(GeneratedQuery792::query);    
struct GeneratedQuery793 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery793::query("{b:{\"$regex\":\"(a|bc)x+yz\",\"$options\":'m'}}");
struct GeneratedQuery794 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery794::query("{\"$nor\":[{\"c\":314159265009},{\"arrayField.b\":{\"$all\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,33.3]}},314159265006]}},{\"b\":'The richest man is not he who has the most, but he who needs the least. anything'},{\"c\":{\"$mod\":[314159255,314159205]}},{\"b\":{\"arrayField\":[1],\"arrayField\":[314159265000,{\"locLegacy\":[-180.0,-90]}]}}]}");
struct GeneratedQuery795 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery795::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");    Query GeneratedQuery795::sortedQuery = appendSort(GeneratedQuery795::query);    BSONObj GeneratedQuery795::projection = fromjson("{\"c\":{$slice:1}}");
struct GeneratedQuery796 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery796::query("{\"arrayField\":{\"$mod\":[314159285,314159265]}}");    Query GeneratedQuery796::sortedQuery = appendSort(GeneratedQuery796::query);    
struct GeneratedQuery797 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery797::query("{\"d\":'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}");
struct GeneratedQuery798 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery798::query("{c:{\"$regex\":\"/(a)|(b)/\"}}");    Query GeneratedQuery798::sortedQuery = appendSort(GeneratedQuery798::query);    BSONObj GeneratedQuery798::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery799 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery799::query("{\"$nor\":[{\"a\":-3.14159265859},{c:'You can do anything, but not everything.'},{\"b\":null}]}");    Query GeneratedQuery799::sortedQuery = appendSort(GeneratedQuery799::query);    
struct GeneratedQuery800 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery800::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");    Query GeneratedQuery800::sortedQuery = appendSort(GeneratedQuery800::query);    
struct GeneratedQuery801 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery801::query("{\"a\":null}");    BSONObj GeneratedQuery801::projection = fromjson("{c:{$elemMatch:{\"a\":{\"$in\":[{\"d\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,90]}},\"a\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything',\"locHaystack\":[180.0,89.9]}]},\"d\":{\"$type\":9},\"a\":{\"$nin\":[314159265007]}}},\"b\":1}");
struct GeneratedQuery802 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery802::query("{b:314159265017}");
struct GeneratedQuery803 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery803::query("{\"arrayField\":''}");    BSONObj GeneratedQuery803::projection = fromjson("{\"b\":1,\"_id\":1}");
struct GeneratedQuery804 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery804::query("{\"$where\":'this.d != undefined'}");    BSONObj GeneratedQuery804::projection = fromjson("{\"a\":1}");
struct GeneratedQuery805 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery805::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");
struct GeneratedQuery806 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery806::query("{\"arrayField\":[{\"_id\":{\"arrayField\":[0],\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,-33.3]}}},{\"c\":'You can do anything, but not everything.',\"loc\":{\"type\":\"Point\",\"coordinates\":[-179.9,90.0]}},null]}");
struct GeneratedQuery807 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery807::query("{\"$nor\":[{\"loc\":{\"$geoIntersects\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[-33.3,0]}}}},{\"a\":false},{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}]}");
struct GeneratedQuery808 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery808::query("{\"a\":true}");
struct GeneratedQuery809 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery809::query("{\"d\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'s'}}");    BSONObj GeneratedQuery809::projection = fromjson("{b:1}");
struct GeneratedQuery810 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery810::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");    Query GeneratedQuery810::sortedQuery = appendSort(GeneratedQuery810::query);    BSONObj GeneratedQuery810::projection = fromjson("{\"d\":1}");
struct GeneratedQuery811 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery811::query("{\"arrayField.b.b\":{\"$not\":{\"$nin\":[{\"$date\": -111100000}]}}}");    Query GeneratedQuery811::sortedQuery = appendSort(GeneratedQuery811::query);    
struct GeneratedQuery812 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery812::query("{\"$nor\":[{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}]}");
struct GeneratedQuery813 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery813::query("{\"c\":{\"$elemMatch\":{\"arrayField\":3.14159265359,\"$where\":'(this.a || this.b || this.c || this.d) > 10'}}}");    Query GeneratedQuery813::sortedQuery = appendSort(GeneratedQuery813::query);    
struct GeneratedQuery814 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery814::query("{\"_id\":{\"$all\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[0,25]}},{\"$date\": 1391633433037}]}}");    BSONObj GeneratedQuery814::projection = fromjson("{c:1,b:1,\"_id\":1,\"a\":1}");
struct GeneratedQuery815 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery815::query("{\"$where\":'function myFunction() { var x = 1 + 2; }'}");
struct GeneratedQuery816 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 100; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery816::query("{\"arrayField\":314159265009}");    Query GeneratedQuery816::sortedQuery = appendSort(GeneratedQuery816::query);    BSONObj GeneratedQuery816::projection = fromjson("{a:1}");
struct GeneratedQuery817 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery817::query("{b:{\"$regex\":\"/cat/\"}}");    BSONObj GeneratedQuery817::projection = fromjson("{\"d\":1}");
struct GeneratedQuery818 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery818::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");
struct GeneratedQuery819 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery819::query("{\"b\":0.00000000049406564841}");
struct GeneratedQuery820 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery820::query("{\"a\":{\"$date\": -111100000}}");
struct GeneratedQuery821 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{b:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery821::query("{\"arrayField\":{\"$date\": 1202331498200}}");    Query GeneratedQuery821::sortedQuery = appendSort(GeneratedQuery821::query);    
struct GeneratedQuery822 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery822::query("{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}");
struct GeneratedQuery823 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery823::query("{\"c\":{\"$elemMatch\":{\"_id\":''},\"$elemMatch\":{\"d\":true}}}");    BSONObj GeneratedQuery823::projection = fromjson("{\"a\":1,b:1}");
struct GeneratedQuery824 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery824::query("{\"d\":{\"$mod\":[314159215,314159275]}}");    Query GeneratedQuery824::sortedQuery = appendSort(GeneratedQuery824::query);    BSONObj GeneratedQuery824::projection = fromjson("{a:1}");
struct GeneratedQuery825 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery825::query("{\"arrayField\":['The richest man is not he who has the most, but he who needs the least. anything','','Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas']}");
struct GeneratedQuery826 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery826::query("{a:{\"$regex\":\"/(a|bc)x+yz/\"}}");
struct GeneratedQuery827 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery827::query("{b:{\"$regex\":\"/^\\d?\\d(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\d\\d$/\"}}");
struct GeneratedQuery828 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery828::query("{\"c\":'You can do anything, but not everything.'}");
struct GeneratedQuery829 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery829::query("{\"arrayField\":{\"$date\": 1391633433037}}");
struct GeneratedQuery830 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery830::query("{\"d\":true}");
struct GeneratedQuery831 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery831::query("{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}");
struct GeneratedQuery832 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery832::query("{\"$nor\":[{\"d\":{\"$size\":314159275}}]}");    Query GeneratedQuery832::sortedQuery = appendSort(GeneratedQuery832::query);    BSONObj GeneratedQuery832::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery833 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery833::query("{c:null}");
struct GeneratedQuery834 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return -100; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery834::query("{d:{\"$regex\":\"(a|bc)x+yz\",\"$options\":'s'}}");    Query GeneratedQuery834::sortedQuery = appendSort(GeneratedQuery834::query);    BSONObj GeneratedQuery834::projection = fromjson("{\"arrayField.$\":1,\"b\":1}");
struct GeneratedQuery835 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery835::query("{a:{\"$date\": -111100000}}");
struct GeneratedQuery836 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a._id._id\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery836::query("{\"a\":{\"$mod\":[314159245,2147483647]}}");    Query GeneratedQuery836::sortedQuery = appendSort(GeneratedQuery836::query);    
struct GeneratedQuery837 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery837::query("{\"b\":true}");
struct GeneratedQuery838 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery838::query("{\"arrayField\":0}");
struct GeneratedQuery839 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery839::query("{d:{\"$date\": -111100000}}");
struct GeneratedQuery840 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery840::query("{\"arrayField\":{\"$elemMatch\":{a:{\"$lt\":314159265009},\"_id\":{\"$lt\":314159265011},\"d\":{\"$not\":{\"$not\":{\"$ne\":{\"$date\": -111100000}}}},\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }',\"a\":1}}}");    BSONObj GeneratedQuery840::projection = fromjson("{c:1}");
struct GeneratedQuery841 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 100; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery841::query("{\"d\":{\"$regex\":\"/^abc/\"}}");    BSONObj GeneratedQuery841::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery842 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery842::query("{\"$nor\":[{b:{\"$elemMatch\":{\"arrayField\":0.0,\"arrayField.d\":{\"$elemMatch\":{\"b\":{\"$regex\":\"/^abc(\\d+)/\"}}}}}},{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'},{\"arrayField\":'You can do anything, but not everything.'}]}");
struct GeneratedQuery843 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery843::query("{\"$nor\":[{\"arrayField\":{\"$exists\":true,\"$not\":{\"$elemMatch\":{a:{\"$mod\":[314159235,314159285]}}}}}]}");
struct GeneratedQuery844 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery844::query("{\"$nor\":[{\"a\":314159265012},{\"arrayField\":[{\"loc\":{\"type\":\"Point\",\"coordinates\":[-33.3,-90]}}]}]}");    BSONObj GeneratedQuery844::projection = fromjson("{\"a\":1}");
struct GeneratedQuery845 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery845::query("{\"arrayField\":false}");
struct GeneratedQuery846 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery846::query("{\"$and\":[{\"b\":314159265005},{\"b\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}},{\"$where\":'(this.a || this.b || this.c || this.d) > 10'},{\"d\":'When hungry, eat your rice; when tired, close your eyes. Fools may laugh at me, but wise men will know what I mean. anything'}]}");    BSONObj GeneratedQuery846::projection = fromjson("{\"d\":1}");
struct GeneratedQuery847 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery847::query("{\"$and\":[{\"a\":{\"$date\": 1500000}}]}");    BSONObj GeneratedQuery847::projection = fromjson("{b:1}");
struct GeneratedQuery848 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery848::query("{\"b\":{\"$date\": 1500000}}");    BSONObj GeneratedQuery848::projection = fromjson("{\"d\":1,\"d\":1}");
struct GeneratedQuery849 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery849::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");
struct GeneratedQuery850 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery850::query("{\"c\":null}");    Query GeneratedQuery850::sortedQuery = appendSort(GeneratedQuery850::query);    BSONObj GeneratedQuery850::projection = fromjson("{\"d\":1}");
struct GeneratedQuery851 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery851::query("{\"a.b\":1}");
struct GeneratedQuery852 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery852::query("{c:true}");    BSONObj GeneratedQuery852::projection = fromjson("{\"d\":1}");
struct GeneratedQuery853 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery853::query("{\"b\":{\"$regex\":\"c a t #looks for cats\",\"$options\":'s'}}");
struct GeneratedQuery854 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery854::query("{a:0}");
struct GeneratedQuery855 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery855::query("{\"$nor\":[{\"arrayField\":{\"$date\": -111100000}},{\"c\":{\"$mod\":[314159215,2147483647]}},{\"b\":{\"$regex\":\"/\\Big(\\w\\w)i/\"}},{\"a\":0.0},{\"a.a\":null}]}");
struct GeneratedQuery856 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery856::query("{\"a\":{\"$not\":{\"$all\":[0,{\"arrayField\":[[{\"locLegacy\":[0,89.9]}]]}]}}}");
struct GeneratedQuery857 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery857::query("{\"$or\":[{_id:false},{\"b\":{\"$not\":{\"$mod\":[314159265,314159255]}}},{\"arrayField\":null},{c:{\"$regex\":\"/(a|bc)x+yz/\"}},{\"arrayField\":false},{d:{\"$not\":{\"$exists\":{\"$date\": 1202331498200}}}},{\"b\":{\"$exists\":1}},{\"b\":'Usted puede hacer cualquier cosa, pero no todo.'}]}");    Query GeneratedQuery857::sortedQuery = appendSort(GeneratedQuery857::query);    
struct GeneratedQuery858 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery858::query("{\"$nor\":[{\"arrayField\":{\"$all\":[{\"arrayField\":['You can do anything, but not everything.',['You can do anything, but not everything.']]},{\"$date\": 1500000}]}}]}");    BSONObj GeneratedQuery858::projection = fromjson("{_id:1}");
struct GeneratedQuery859 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery859::query("{\"arrayField\":false}");
struct GeneratedQuery860 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery860::query("{\"b\":{\"$size\":NumberInt(314159265)}}");
struct GeneratedQuery861 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery861::query("{\"loc\":{\"$geoWithin\":{\"$polygon\":[[-180,89.9],[-180.0,-90.0],[0.0,90]],\"$uniqueDocs\":0}}}");    BSONObj GeneratedQuery861::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery862 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery862::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");    Query GeneratedQuery862::sortedQuery = appendSort(GeneratedQuery862::query);    BSONObj GeneratedQuery862::projection = fromjson("{c:{$slice:2}}");
struct GeneratedQuery863 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery863::query("{d:{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":'sm'}}");
struct GeneratedQuery864 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery864::query("{\"arrayField\":{\"$in\":[1]}}");
struct GeneratedQuery865 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery865::query("{\"arrayField.c\":{\"$elemMatch\":{\"arrayField\":1}}}");    BSONObj GeneratedQuery865::projection = fromjson("{\"_id\":{$elemMatch:{\"a\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas',\"a\":{\"$elemMatch\":{\"c\":{\"$mod\":[314159225,314159245]}}},\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }',\"arrayField\":314159265002,\"arrayField\":314159265014}}}");
struct GeneratedQuery866 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery866::query("{\"loc\":{\"$near\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[179.9,90]},\"$maxDistance\":314159265016}}}");    BSONObj GeneratedQuery866::projection = fromjson("{\"arrayField.$\":1,\"a\":1}");
struct GeneratedQuery867 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery867::query("{\"_id\":{\"$nin\":[null]}}");    BSONObj GeneratedQuery867::projection = fromjson("{\"b\":1}");
struct GeneratedQuery868 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery868::query("{\"b\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}}");
struct GeneratedQuery869 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery869::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");
struct GeneratedQuery870 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery870::query("{\"$and\":[{\"b\":''},{\"a\":{\"$regex\":\"/(a|bc)x+yz/\"}},{\"arrayField\":{\"locLegacy\":[-33.3,-89.9]}},{\"a\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":'m'}}]}");
struct GeneratedQuery871 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery871::query("{b:{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}}");
struct GeneratedQuery872 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery872::query("{\"arrayField\":{\"$all\":[]}}");    Query GeneratedQuery872::sortedQuery = appendSort(GeneratedQuery872::query);    
struct GeneratedQuery873 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery873::query("{\"d\":{\"$date\": -111100000}}");
struct GeneratedQuery874 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery874::query("{\"arrayField\":{\"$date\": -111100000}}");    BSONObj GeneratedQuery874::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery875 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery875::query("{\"c\":{\"$date\": 1500000}}");
struct GeneratedQuery876 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery876::query("{\"d.b\":{\"$lt\":'To the man who only has a hammer, everything he encounters begins to look like a nail. anything'}}");    BSONObj GeneratedQuery876::projection = fromjson("{\"arrayField.$\":1,\"b\":1}");
struct GeneratedQuery877 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery877::query("{\"$or\":[{a:0}]}");
struct GeneratedQuery878 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery878::query("{\"arrayField\":314159265000}");    BSONObj GeneratedQuery878::projection = fromjson("{\"c\":{$elemMatch:{\"arrayField._id\":{\"$type\":17,\"$size\":NumberLong(314159265358979343)}}}}");
struct GeneratedQuery879 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery879::query("{\"b\":3.14159265359}");
struct GeneratedQuery880 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery880::query("{\"arrayField.c\":{\"$size\":NumberInt(314159225)}}");
struct GeneratedQuery881 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery881::query("{_id:'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything'}");
struct GeneratedQuery882 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"b\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery882::query("{\"d\":{\"$size\":0}}");    Query GeneratedQuery882::sortedQuery = appendSort(GeneratedQuery882::query);    BSONObj GeneratedQuery882::projection = fromjson("{\"d\":1}");
struct GeneratedQuery883 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery883::query("{\"$and\":[{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'},{\"arrayField\":2225073858072009000.99},{\"arrayField\":-314159265359}]}");    BSONObj GeneratedQuery883::projection = fromjson("{\"c\":1}");
struct GeneratedQuery884 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery884::query("{\"_id\":{\"$not\":{\"$size\":314159225},\"$not\":{\"$not\":{\"$gt\":{\"$date\": 1202331498200}}}}}");
struct GeneratedQuery885 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery885::query("{\"$and\":[{\"_id\":{\"$gt\":''}},{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}]}");
struct GeneratedQuery886 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery886::query("{b:{\"$lt\":''}}");
struct GeneratedQuery887 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery887::query("{d:{\"$type\":4,\"$elemMatch\":{\"b\":314159265009}}}");    BSONObj GeneratedQuery887::projection = fromjson("{\"c\":{$slice:2}}");
struct GeneratedQuery888 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery888::query("{\"arrayField\":{\"$date\": 1500000}}");
struct GeneratedQuery889 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery889::query("{\"d\":{\"$regex\":\"c a t #looks for cats\",\"$options\":'m'}}");    Query GeneratedQuery889::sortedQuery = appendSort(GeneratedQuery889::query);    
struct GeneratedQuery890 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery890::query("{\"a\":{\"$type\":1,\"$not\":{\"$gt\":{\"$date\": 1202331498200}}}}");    BSONObj GeneratedQuery890::projection = fromjson("{\"a\":1}");
struct GeneratedQuery891 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery891::query("{\"$or\":[{\"b\":{\"$exists\":'You miss 100 percent of the shots you never take. anything',\"$exists\":0}}]}");
struct GeneratedQuery892 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery892::query("{\"$or\":[{\"a\":'I quit therapy because my analyst was trying to help me behind my back. anything'}]}");    Query GeneratedQuery892::sortedQuery = appendSort(GeneratedQuery892::query);    BSONObj GeneratedQuery892::projection = fromjson("{\"b\":1}");
struct GeneratedQuery893 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery893::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");    BSONObj GeneratedQuery893::projection = fromjson("{\"arrayField.$\":1}");
struct GeneratedQuery894 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery894::query("{\"arrayField\":{\"$date\": 1500000}}");
struct GeneratedQuery895 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery895::query("{\"c\":{\"a\":'You can do anything, but not everything.'}}");    BSONObj GeneratedQuery895::projection = fromjson("{\"d\":{$slice:0}}");
struct GeneratedQuery896 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery896::query("{\"$and\":[{\"arrayField._id.d\":{\"$not\":{\"$mod\":[314159245,314159215]}}}]}");
struct GeneratedQuery897 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery897::query("{\"arrayField\":{\"$date\": 1391633433037}}");    BSONObj GeneratedQuery897::projection = fromjson("{\"c\":1}");
struct GeneratedQuery898 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery898::query("{\"b\":{\"$regex\":\"/^abc/m\"}}");
struct GeneratedQuery899 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery899::query("{\"$nor\":[{\"_id\":{\"$regex\":\"c a t #looks for cats\",\"$options\":''}}]}");
struct GeneratedQuery900 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery900::query("{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}");    BSONObj GeneratedQuery900::projection = fromjson("{d:1}");
struct GeneratedQuery901 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery901::query("{\"$nor\":[{\"arrayField\":false}]}");
struct GeneratedQuery902 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery902::query("{\"_id\":{\"$date\": 1500000}}");
struct GeneratedQuery903 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery903::query("{\"d\":{\"$date\": 1500000}}");
struct GeneratedQuery904 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery904::query("{\"_id\":{\"$regex\":\"/^abc(\\d+)/\"}}");
struct GeneratedQuery905 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery905::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");
struct GeneratedQuery906 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery906::query("{\"_id\":[['']]}");
struct GeneratedQuery907 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery907::query("{\"$nor\":[{\"d\":{\"arrayField\":['Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. anything']}},{\"arrayField\":'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything'}]}");
struct GeneratedQuery908 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery908::query("{\"d\":1}");
struct GeneratedQuery909 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery909::query("{\"$and\":[{\"arrayField.c\":{\"$all\":['Usted puede hacer cualquier cosa, pero no todo.']}},{\"c\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}},{\"arrayField.b\":{\"$size\":314159225}}]}");    Query GeneratedQuery909::sortedQuery = appendSort(GeneratedQuery909::query);    
struct GeneratedQuery910 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{_id:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery910::query("{\"arrayField\":false}");    Query GeneratedQuery910::sortedQuery = appendSort(GeneratedQuery910::query);    
struct GeneratedQuery911 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery911::query("{\"d\":{\"$date\": 1391633433037}}");    BSONObj GeneratedQuery911::projection = fromjson("{a:1}");
struct GeneratedQuery912 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery912::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");
struct GeneratedQuery913 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery913::query("{\"c\":{\"$gte\":'I quit therapy because my analyst was trying to help me behind my back. anything'}}");
struct GeneratedQuery914 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery914::query("{\"a\":314159265016}");    Query GeneratedQuery914::sortedQuery = appendSort(GeneratedQuery914::query);    
struct GeneratedQuery915 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery915::query("{\"$where\":'String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99;'}");
struct GeneratedQuery916 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery916::query("{\"a\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'sm'}}");
struct GeneratedQuery917 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery917::query("{a:{\"$regex\":\"(a|bc)x+yz\",\"$options\":'m'}}");
struct GeneratedQuery918 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery918::query("{\"$or\":[{\"$where\":'(this.a || this.b || this.c || this.d) > 10'},{\"d\":{\"$date\": 1391633433037}},{\"d\":314159265000},{\"_id\":314159265005},{\"$where\":'this.d != undefined'},{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'},{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'},{b:{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''}}]}");
struct GeneratedQuery919 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery919::query("{\"c\":{\"$exists\":true}}");
struct GeneratedQuery920 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery920::query("{\"$nor\":[{a:false},{\"d\":{\"$ne\":0.0}},{c:{\"$regex\":\"c a t #looks for cats\",\"$options\":''}},{\"_id\":{\"$regex\":\"(s|t|y|n)\\..\",\"$options\":''}},{\"a\":314159265018}]}");
struct GeneratedQuery921 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery921::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");    BSONObj GeneratedQuery921::projection = fromjson("{\"d\":1}");
struct GeneratedQuery922 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery922::query("{\"d\":314159265009}");
struct GeneratedQuery923 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery923::query("{\"a\":{\"$lt\":false}}");    BSONObj GeneratedQuery923::projection = fromjson("{\"arrayField.$\":1,\"d\":1}");
struct GeneratedQuery924 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery924::query("{\"$or\":[{\"d\":314159265015}]}");
struct GeneratedQuery925 {      static Query getQuery() { return query; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery925::query("{\"$or\":[{b:{\"$mod\":[314159285,314159215]}},{\"arrayField._id\":{\"$type\":11}},{\"$where\":'this.d != undefined'},{\"arrayField.d\":{\"$not\":{\"$not\":{\"$nin\":[['I quit therapy because my analyst was trying to help me behind my back. anything',{\"a\":'Todo el mundo es un genio al menos una vez al ano. Los verdaderos genios simplemente tienen sus ideas brillantes mas juntas'}]]}}}},{\"arrayField.a\":{\"$size\":NumberLong(314159265358979393)}}]}");
struct GeneratedQuery926 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery926::query("{\"$or\":[{\"d\":{\"$date\": -111100000}}]}");
struct GeneratedQuery927 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 0; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery927::query("{d:{\"$not\":{\"$elemMatch\":{\"arrayField.a.b\":{\"$size\":314159235}}}},b:{\"$date\": -111100000},\"loc\":{\"$geoWithin\":{\"$geometry\":{\"type\":\"Point\",\"coordinates\":[180.0,25]},\"$uniqueDocs\":true}}}");
struct GeneratedQuery928 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery928::query("{\"$where\":'this.d != undefined',b:{\"$mod\":[314159295,314159215]},\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }',\"arrayField.a\":{\"$all\":[{\"c\":{\"$date\": -111100000}},null,{\"arrayField\":[{\"arrayField\":['',[null,{\"d\":{\"b\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[33.3,89.9]},\"locHaystack\":{ 'lng': 180.0, 'lat': 0}}}}],'Courage is not the absence of fear, but rather the judgement that something else is more important than fear. anything','You can do anything, but not everything.']},{\"locHaystack\":[180,90]},'',{\"a\":'You can do anything, but not everything.'},'']}]},\"arrayField.b\":{\"$all\":[-3.14159265000,{\"arrayField\":[]}]}}");
struct GeneratedQuery929 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery929::query("{\"arrayField\":{\"$elemMatch\":{\"arrayField\":0,\"d\":{\"$ne\":0}}}}");    Query GeneratedQuery929::sortedQuery = appendSort(GeneratedQuery929::query);    
struct GeneratedQuery930 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return -100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery930::query("{\"$where\":'function myFunction() { return this.d != undefined; }'}");
struct GeneratedQuery931 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery931::query("{\"c\":0.00000000049406564841}");
struct GeneratedQuery932 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery932::query("{d:{\"$regex\":\"(a|bc)x+yz\",\"$options\":'i'}}");    Query GeneratedQuery932::sortedQuery = appendSort(GeneratedQuery932::query);    
struct GeneratedQuery933 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery933::query("{\"b\":''}");
struct GeneratedQuery934 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return -1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery934::query("{\"$or\":[{\"arrayField.b\":{\"$all\":[{\"locHaystack\":[180,90]}]}}]}");    BSONObj GeneratedQuery934::projection = fromjson("{\"c\":1}");
struct GeneratedQuery935 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery935::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");
struct GeneratedQuery936 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery936::query("{\"_id\":314159265013}");
struct GeneratedQuery937 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery937::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");
struct GeneratedQuery938 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery938::query("{a:{\"$not\":{\"$lte\":[null]}}}");    BSONObj GeneratedQuery938::projection = fromjson("{\"b\":1,\"b\":{$elemMatch:{\"c\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":''},\"c\":{\"$regex\":\"/(a)|(b)/\"},\"b.c\":{\"$not\":{\"$all\":[{\"b\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[180.0,-25]}}}]}},\"$where\":'this.d != undefined',d:{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":'s'}}}}");
struct GeneratedQuery939 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery939::query("{\"arrayField\":314159265001}");
struct GeneratedQuery940 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery940::query("{\"a\":314159265002}");    BSONObj GeneratedQuery940::projection = fromjson("{\"c\":1,\"b\":1}");
struct GeneratedQuery941 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery941::query("{\"$and\":[{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }'},{\"b\":{\"$regex\":\"/^abc/\"}},{\"b\":{\"$regex\":\"(tang|tangerine|tan)\",\"$options\":'ssis'}},{a:-3.14159265359}]}");
struct GeneratedQuery942 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery942::query("{\"c\":true}");    Query GeneratedQuery942::sortedQuery = appendSort(GeneratedQuery942::query);    BSONObj GeneratedQuery942::projection = fromjson("{\"arrayField.$\":1,\"b\":1}");
struct GeneratedQuery943 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery943::query("{\"c\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}}");
struct GeneratedQuery944 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery944::query("{\"$and\":[{\"d\":{\"$mod\":[314159255,0]}},{c:false}]}");
struct GeneratedQuery945 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery945::query("{\"arrayField\":{\"$elemMatch\":{\"b\":'Everyone is a genius at least once a year. The real geniuses simply have their bright ideas closer together. anything',\"b\":false}}}");    BSONObj GeneratedQuery945::projection = fromjson("{\"b\":1}");
struct GeneratedQuery946 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery946::query("{\"_id\":'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.'}");
struct GeneratedQuery947 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{d:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery947::query("{c:{\"$mod\":[314159215,314159245]}}");    Query GeneratedQuery947::sortedQuery = appendSort(GeneratedQuery947::query);    BSONObj GeneratedQuery947::projection = fromjson("{\"c\":1}");
struct GeneratedQuery948 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery948::query("{\"arrayField.b.c\":{\"$mod\":[314159235,314159265],\"$size\":0,\"$gte\":[null,314159265013,null,null,null,'']}}");
struct GeneratedQuery949 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery949::query("{\"d\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'sms'}}");    BSONObj GeneratedQuery949::projection = fromjson("{\"c\":1}");
struct GeneratedQuery950 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{_id:1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery950::query("{\"arrayField\":true}");    Query GeneratedQuery950::sortedQuery = appendSort(GeneratedQuery950::query);    
struct GeneratedQuery951 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery951::query("{\"a\":{\"$date\": 1391633433037}}");
struct GeneratedQuery952 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery952::query("{\"$and\":[{\"d\":''}]}");
struct GeneratedQuery953 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery953::query("{\"arrayField.b\":{\"$mod\":[314159225,314159255]}}");    Query GeneratedQuery953::sortedQuery = appendSort(GeneratedQuery953::query);    BSONObj GeneratedQuery953::projection = fromjson("{\"c\":1,b:1,\"b\":1}");
struct GeneratedQuery954 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return -1; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{c:-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery954::query("{\"a\":{\"$regex\":\"/^\\d?\\d(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\d\\d$/\"}}");    Query GeneratedQuery954::sortedQuery = appendSort(GeneratedQuery954::query);    
struct GeneratedQuery955 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery955::query("{_id:1797693134862315799999}");
struct GeneratedQuery956 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery956::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");    Query GeneratedQuery956::sortedQuery = appendSort(GeneratedQuery956::query);    
struct GeneratedQuery957 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery957::query("{\"arrayField\":{\"$not\":{\"$mod\":[314159205,314159205]}}}");
struct GeneratedQuery958 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery958::query("{\"$where\":'function myFunction() { return String(this.a || this.b || this.c || this.d).length > 9; }'}");    Query GeneratedQuery958::sortedQuery = appendSort(GeneratedQuery958::query);    BSONObj GeneratedQuery958::projection = fromjson("{_id:1}");
struct GeneratedQuery959 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery959::query("{\"b\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'}");
struct GeneratedQuery960 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery960::query("{\"a\":{\"$all\":['Echa de menos el 100 por ciento de los tiros que nunca toma.',{\"$date\": 1202331498200}],\"$elemMatch\":{\"arrayField\":false},\"$gte\":314159265016,\"$size\":314159285,\"$gt\":1,\"$ne\":-3.14159265859}}");    BSONObj GeneratedQuery960::projection = fromjson("{\"d\":1}");
struct GeneratedQuery961 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery961::query("{\"c\":{\"$elemMatch\":{d:{\"$elemMatch\":{\"_id\":314159265010}}}}}");
struct GeneratedQuery962 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery962::query("{\"arrayField\":null}");
struct GeneratedQuery963 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery963::query("{\"arrayField\":'You can do anything, but not everything.'}");
struct GeneratedQuery964 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery964::query("{\"$or\":[{\"arrayField\":{\"$date\": 1202331498200}},{\"arrayField\":''},{\"$where\":'this.d != undefined'},{\"a\":false}]}");    BSONObj GeneratedQuery964::projection = fromjson("{\"c\":1}");
struct GeneratedQuery965 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 10; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery965::query("{\"b\":314159265000}");    Query GeneratedQuery965::sortedQuery = appendSort(GeneratedQuery965::query);    
struct GeneratedQuery966 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery966::query("{\"d\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":'mm'}}");    Query GeneratedQuery966::sortedQuery = appendSort(GeneratedQuery966::query);    
struct GeneratedQuery967 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery967::query("{\"b\":{\"$all\":[{\"arrayField\":[{\"_id\":{\"b\":'You miss 100 percent of the shots you never take. anything',\"arrayField\":[],\"locHaystack\":{ 'lng': 0, 'lat': 0},\"b\":{\"arrayField\":['You can do anything, but not everything.'],\"loc\":{\"type\":\"Point\",\"coordinates\":[25,-33.3]}}},\"arrayField\":['You miss 100 percent of the shots you never take. anything'],\"c\":{\"$date\": 1500000}},'Cuando hambre, come el arroz, cuando esta cansado, cierra los ojos. Fools pueden reirse de mi, pero los sabios sabran a que me refiero.',null,0,{\"loc\":{\"type\":\"Point\",\"coordinates\":[-25,-90.0]},\"a\":{\"d\":{\"a\":'Echa de menos el 100 por ciento de los tiros que nunca toma.'},\"locHaystack\":{ 'lng': -180, 'lat': -89.9}}}]}]}}");
struct GeneratedQuery968 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery968::query("{\"$or\":[{\"arrayField\":{\"$date\": 1202331498200}}]}");
struct GeneratedQuery969 {      static Query getQuery() { return query; }      static int nToSkip() { return 1; }      static int nToLimit() { return 10; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery969::query("{\"$where\":'(this.a || this.b || this.c || this.d) > 10'}");
struct GeneratedQuery970 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery970::query("{\"$or\":[{\"d\":{\"$date\": -111100000}}]}");
struct GeneratedQuery971 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery971::query("{c:{\"$exists\":1}}");
struct GeneratedQuery972 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery972::query("{\"arrayField\":{\"$nin\":[{\"$date\": 1202331498200}],\"$lt\":{\"$date\": -111100000}}}");
struct GeneratedQuery973 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"a\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery973::query("{d:{\"$regex\":\"c a t #looks for cats\",\"$options\":'m'}}");    Query GeneratedQuery973::sortedQuery = appendSort(GeneratedQuery973::query);    
struct GeneratedQuery974 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery974::query("{\"_id\":{\"$mod\":[314159225,2147483647]}}");
struct GeneratedQuery975 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return 100; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery975::query("{_id:{\"$regex\":\"/^abc/m\"}}");
struct GeneratedQuery976 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery976::query("{\"$or\":[{\"arrayField\":{\"$all\":[{},[{\"arrayField\":['',null]},{\"locHaystack\":[180,-25]}],{\"loc\":{\"type\":\"Point\",\"coordinates\":[-180.0,0.0]}},null,1,{\"$date\": 1500000}]}}]}");    BSONObj GeneratedQuery976::projection = fromjson("{\"a\":1,\"a.c\":1}");
struct GeneratedQuery977 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"_id\":1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery977::query("{\"arrayField\":false}");    Query GeneratedQuery977::sortedQuery = appendSort(GeneratedQuery977::query);    BSONObj GeneratedQuery977::projection = fromjson("{c:{$elemMatch:{\"a\":''}}}");
struct GeneratedQuery978 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 10; }      static int nToLimit() { return 10; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery978::query("{\"$and\":[{\"d\":null},{a:[{\"locLegacy\":[-179.9,-90.0]},null]}]}");    BSONObj GeneratedQuery978::projection = fromjson("{d:{$slice:0}}");
struct GeneratedQuery979 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery979::query("{\"b\":false}");
struct GeneratedQuery980 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery980::query("{\"arrayField\":{\"$gte\":314159265000,\"$elemMatch\":{c:true},\"$size\":NumberInt(314159255),\"$not\":{\"$not\":{\"$not\":{\"$all\":[-314159265359,{\"arrayField\":[{\"locLegacy\":[0.0,33.3]}]}]}}},\"$not\":{\"$type\":5}}}");
struct GeneratedQuery981 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{a:1}")); }      static Query query;      static Query sortedQuery;      static BSONObj projection;  }; Query GeneratedQuery981::query("{\"d\":{\"loc\":{\"type\":\"Point\",\"coordinates\":[179.9,0.0]},\"arrayField\":['']}}");    Query GeneratedQuery981::sortedQuery = appendSort(GeneratedQuery981::query);    BSONObj GeneratedQuery981::projection = fromjson("{d:1}");
struct GeneratedQuery982 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery982::query("{\"c\":-3.14159265000}");
struct GeneratedQuery983 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery983::query("{\"a\":1,\"arrayField\":{\"arrayField\":[-314159265359]}}");
struct GeneratedQuery984 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery984::query("{\"a\":314159265017}");    BSONObj GeneratedQuery984::projection = fromjson("{a:1}");
struct GeneratedQuery985 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery985::query("{\"d\":314159265005}");
struct GeneratedQuery986 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery986::query("{d:{\"$date\": 1391633433037}}");
struct GeneratedQuery987 {      static Query getQuery() { return query; }      static int nToSkip() { return 0; }      static int nToLimit() { return -1; }      static BSONObj* getProjection() { return NULL; }      static Query query;  }; Query GeneratedQuery987::query("{\"$nor\":[{\"b\":{\"$regex\":\"(a|bc)x+yz\",\"$options\":''}},{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}]}");
struct GeneratedQuery988 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery988::query("{\"a\":''}");
struct GeneratedQuery989 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery989::query("{\"$or\":[{\"d\":{\"$regex\":\"/cat/\"}}]}");
struct GeneratedQuery990 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 1; }      static int nToLimit() { return 1; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery990::query("{\"$or\":[{c:{\"$regex\":\"/cat/\"}}]}");    BSONObj GeneratedQuery990::projection = fromjson("{b:1}");
struct GeneratedQuery991 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery991::query("{\"arrayField\":{\"$size\":314159215}}");
struct GeneratedQuery992 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"d\":1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery992::query("{\"arrayField\":{\"$size\":314159265}}");    Query GeneratedQuery992::sortedQuery = appendSort(GeneratedQuery992::query);    
struct GeneratedQuery993 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery993::query("{\"$where\":'String(this.a || this.b || this.c || this.d).length > 9'}");    BSONObj GeneratedQuery993::projection = fromjson("{_id:1}");
struct GeneratedQuery994 {      static Query getQuery() { return sortedQuery; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 1; }      static int nToLimit() { return -10; }      static Query& appendSort(Query& query) { return query.sort(fromjson("{\"c\":-1}")); }      static Query query;      static Query sortedQuery;  }; Query GeneratedQuery994::query("{\"arrayField.d\":{\"$mod\":[314159235,314159265],\"$exists\":true,\"$mod\":[2147483647,2147483647]}}");    Query GeneratedQuery994::sortedQuery = appendSort(GeneratedQuery994::query);    
struct GeneratedQuery995 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery995::query("{\"arrayField\":{\"$all\":[314159265009]}}");
struct GeneratedQuery996 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return NULL; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;  }; Query GeneratedQuery996::query("{d:{\"$regex\":\"c a t #looks for cats\",\"$options\":'s'}}");
struct GeneratedQuery997 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery997::query("{\"$nor\":[{\"_id\":'You can do anything, but not everything.'}]}");    BSONObj GeneratedQuery997::projection = fromjson("{d:1}");
struct GeneratedQuery998 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery998::query("{\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}");    BSONObj GeneratedQuery998::projection = fromjson("{\"_id\":1}");
struct GeneratedQuery999 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery999::query("{\"a\":-3.14159265859}");    BSONObj GeneratedQuery999::projection = fromjson("{\"d\":1}");
struct GeneratedQuery1000 {      static Query getQuery() { return query; }      static BSONObj* getProjection() { return &projection; }      static int nToSkip() { return 0; }      static int nToLimit() { return 0; }      static Query query;      static BSONObj projection;  }; Query GeneratedQuery1000::query("{\"a\":{\"$date\": 1391633433037}}");    BSONObj GeneratedQuery1000::projection = fromjson("{\"b\":1,\"d\":1,\"_id\":1,\"c\":1,\"d\":{$elemMatch:{\"$where\":'function myFunction() { return (String(this.a || this.b || this.c || this.d).charCodeAt(0) < 99); }',\"a\":{\"$not\":{\"$in\":[]}},\"$where\":'function myFunction() { return (this.a || this.b || this.c || this.d) > 10; }'}}}");


    class All : public Suite {
    public:
        All() : Suite( "GeneratedQueries" ) { }
        void setupTests() {
            add< InsertDocuments >();   // must be run before the generated queries
            add< GeneratedQueryRunner<GeneratedQuery1> >();
            add< GeneratedQueryRunner<GeneratedQuery2> >();
            add< GeneratedQueryRunner<GeneratedQuery3> >();
            add< GeneratedQueryRunner<GeneratedQuery4> >();
            add< GeneratedQueryRunner<GeneratedQuery5> >();
            add< GeneratedQueryRunner<GeneratedQuery6> >();
            add< GeneratedQueryRunner<GeneratedQuery7> >();
            add< GeneratedQueryRunner<GeneratedQuery8> >();
            add< GeneratedQueryRunner<GeneratedQuery9> >();
            add< GeneratedQueryRunner<GeneratedQuery10> >();
            add< GeneratedQueryRunner<GeneratedQuery11> >();
            add< GeneratedQueryRunner<GeneratedQuery12> >();
            add< GeneratedQueryRunner<GeneratedQuery13> >();
            add< GeneratedQueryRunner<GeneratedQuery14> >();
            add< GeneratedQueryRunner<GeneratedQuery15> >();
            add< GeneratedQueryRunner<GeneratedQuery16> >();
            add< GeneratedQueryRunner<GeneratedQuery17> >();
            add< GeneratedQueryRunner<GeneratedQuery18> >();
            add< GeneratedQueryRunner<GeneratedQuery19> >();
            add< GeneratedQueryRunner<GeneratedQuery20> >();
            add< GeneratedQueryRunner<GeneratedQuery21> >();
            add< GeneratedQueryRunner<GeneratedQuery22> >();
            add< GeneratedQueryRunner<GeneratedQuery23> >();
            add< GeneratedQueryRunner<GeneratedQuery24> >();
            add< GeneratedQueryRunner<GeneratedQuery25> >();
            add< GeneratedQueryRunner<GeneratedQuery26> >();
            add< GeneratedQueryRunner<GeneratedQuery27> >();
            add< GeneratedQueryRunner<GeneratedQuery28> >();
            add< GeneratedQueryRunner<GeneratedQuery29> >();
            add< GeneratedQueryRunner<GeneratedQuery30> >();
            add< GeneratedQueryRunner<GeneratedQuery31> >();
            add< GeneratedQueryRunner<GeneratedQuery32> >();
            add< GeneratedQueryRunner<GeneratedQuery33> >();
            add< GeneratedQueryRunner<GeneratedQuery34> >();
            add< GeneratedQueryRunner<GeneratedQuery35> >();
            add< GeneratedQueryRunner<GeneratedQuery36> >();
            add< GeneratedQueryRunner<GeneratedQuery37> >();
            add< GeneratedQueryRunner<GeneratedQuery38> >();
            add< GeneratedQueryRunner<GeneratedQuery39> >();
            add< GeneratedQueryRunner<GeneratedQuery40> >();
            add< GeneratedQueryRunner<GeneratedQuery41> >();
            add< GeneratedQueryRunner<GeneratedQuery42> >();
            add< GeneratedQueryRunner<GeneratedQuery43> >();
            add< GeneratedQueryRunner<GeneratedQuery44> >();
            add< GeneratedQueryRunner<GeneratedQuery45> >();
            add< GeneratedQueryRunner<GeneratedQuery46> >();
            add< GeneratedQueryRunner<GeneratedQuery47> >();
            add< GeneratedQueryRunner<GeneratedQuery48> >();
            add< GeneratedQueryRunner<GeneratedQuery49> >();
            add< GeneratedQueryRunner<GeneratedQuery50> >();
            add< GeneratedQueryRunner<GeneratedQuery51> >();
            add< GeneratedQueryRunner<GeneratedQuery52> >();
            add< GeneratedQueryRunner<GeneratedQuery53> >();
            add< GeneratedQueryRunner<GeneratedQuery54> >();
            add< GeneratedQueryRunner<GeneratedQuery55> >();
            add< GeneratedQueryRunner<GeneratedQuery56> >();
            add< GeneratedQueryRunner<GeneratedQuery57> >();
            add< GeneratedQueryRunner<GeneratedQuery58> >();
            add< GeneratedQueryRunner<GeneratedQuery59> >();
            add< GeneratedQueryRunner<GeneratedQuery60> >();
            add< GeneratedQueryRunner<GeneratedQuery61> >();
            add< GeneratedQueryRunner<GeneratedQuery62> >();
            add< GeneratedQueryRunner<GeneratedQuery63> >();
            add< GeneratedQueryRunner<GeneratedQuery64> >();
            add< GeneratedQueryRunner<GeneratedQuery65> >();
            add< GeneratedQueryRunner<GeneratedQuery66> >();
            add< GeneratedQueryRunner<GeneratedQuery67> >();
            add< GeneratedQueryRunner<GeneratedQuery68> >();
            add< GeneratedQueryRunner<GeneratedQuery69> >();
            add< GeneratedQueryRunner<GeneratedQuery70> >();
            add< GeneratedQueryRunner<GeneratedQuery71> >();
            add< GeneratedQueryRunner<GeneratedQuery72> >();
            add< GeneratedQueryRunner<GeneratedQuery73> >();
            add< GeneratedQueryRunner<GeneratedQuery74> >();
            add< GeneratedQueryRunner<GeneratedQuery75> >();
            add< GeneratedQueryRunner<GeneratedQuery76> >();
            add< GeneratedQueryRunner<GeneratedQuery77> >();
            add< GeneratedQueryRunner<GeneratedQuery78> >();
            add< GeneratedQueryRunner<GeneratedQuery79> >();
            add< GeneratedQueryRunner<GeneratedQuery80> >();
            add< GeneratedQueryRunner<GeneratedQuery81> >();
            add< GeneratedQueryRunner<GeneratedQuery82> >();
            add< GeneratedQueryRunner<GeneratedQuery83> >();
            add< GeneratedQueryRunner<GeneratedQuery84> >();
            add< GeneratedQueryRunner<GeneratedQuery85> >();
            add< GeneratedQueryRunner<GeneratedQuery86> >();
            add< GeneratedQueryRunner<GeneratedQuery87> >();
            add< GeneratedQueryRunner<GeneratedQuery88> >();
            add< GeneratedQueryRunner<GeneratedQuery89> >();
            add< GeneratedQueryRunner<GeneratedQuery90> >();
            add< GeneratedQueryRunner<GeneratedQuery91> >();
            add< GeneratedQueryRunner<GeneratedQuery92> >();
            add< GeneratedQueryRunner<GeneratedQuery93> >();
            add< GeneratedQueryRunner<GeneratedQuery94> >();
            add< GeneratedQueryRunner<GeneratedQuery95> >();
            add< GeneratedQueryRunner<GeneratedQuery96> >();
            add< GeneratedQueryRunner<GeneratedQuery97> >();
            add< GeneratedQueryRunner<GeneratedQuery98> >();
            add< GeneratedQueryRunner<GeneratedQuery99> >();
            add< GeneratedQueryRunner<GeneratedQuery100> >();
            add< GeneratedQueryRunner<GeneratedQuery101> >();
            add< GeneratedQueryRunner<GeneratedQuery102> >();
            add< GeneratedQueryRunner<GeneratedQuery103> >();
            add< GeneratedQueryRunner<GeneratedQuery104> >();
            add< GeneratedQueryRunner<GeneratedQuery105> >();
            add< GeneratedQueryRunner<GeneratedQuery106> >();
            add< GeneratedQueryRunner<GeneratedQuery107> >();
            add< GeneratedQueryRunner<GeneratedQuery108> >();
            add< GeneratedQueryRunner<GeneratedQuery109> >();
            add< GeneratedQueryRunner<GeneratedQuery110> >();
            add< GeneratedQueryRunner<GeneratedQuery111> >();
            add< GeneratedQueryRunner<GeneratedQuery112> >();
            add< GeneratedQueryRunner<GeneratedQuery113> >();
            add< GeneratedQueryRunner<GeneratedQuery114> >();
            add< GeneratedQueryRunner<GeneratedQuery115> >();
            add< GeneratedQueryRunner<GeneratedQuery116> >();
            add< GeneratedQueryRunner<GeneratedQuery117> >();
            add< GeneratedQueryRunner<GeneratedQuery118> >();
            add< GeneratedQueryRunner<GeneratedQuery119> >();
            add< GeneratedQueryRunner<GeneratedQuery120> >();
            add< GeneratedQueryRunner<GeneratedQuery121> >();
            add< GeneratedQueryRunner<GeneratedQuery122> >();
            add< GeneratedQueryRunner<GeneratedQuery123> >();
            add< GeneratedQueryRunner<GeneratedQuery124> >();
            add< GeneratedQueryRunner<GeneratedQuery125> >();
            add< GeneratedQueryRunner<GeneratedQuery126> >();
            add< GeneratedQueryRunner<GeneratedQuery127> >();
            add< GeneratedQueryRunner<GeneratedQuery128> >();
            add< GeneratedQueryRunner<GeneratedQuery129> >();
            add< GeneratedQueryRunner<GeneratedQuery130> >();
            add< GeneratedQueryRunner<GeneratedQuery131> >();
            add< GeneratedQueryRunner<GeneratedQuery132> >();
            add< GeneratedQueryRunner<GeneratedQuery133> >();
            add< GeneratedQueryRunner<GeneratedQuery134> >();
            add< GeneratedQueryRunner<GeneratedQuery135> >();
            add< GeneratedQueryRunner<GeneratedQuery136> >();
            add< GeneratedQueryRunner<GeneratedQuery137> >();
            add< GeneratedQueryRunner<GeneratedQuery138> >();
            add< GeneratedQueryRunner<GeneratedQuery139> >();
            add< GeneratedQueryRunner<GeneratedQuery140> >();
            add< GeneratedQueryRunner<GeneratedQuery141> >();
            add< GeneratedQueryRunner<GeneratedQuery142> >();
            add< GeneratedQueryRunner<GeneratedQuery143> >();
            add< GeneratedQueryRunner<GeneratedQuery144> >();
            add< GeneratedQueryRunner<GeneratedQuery145> >();
            add< GeneratedQueryRunner<GeneratedQuery146> >();
            add< GeneratedQueryRunner<GeneratedQuery147> >();
            add< GeneratedQueryRunner<GeneratedQuery148> >();
            add< GeneratedQueryRunner<GeneratedQuery149> >();
            add< GeneratedQueryRunner<GeneratedQuery150> >();
            add< GeneratedQueryRunner<GeneratedQuery151> >();
            add< GeneratedQueryRunner<GeneratedQuery152> >();
            add< GeneratedQueryRunner<GeneratedQuery153> >();
            add< GeneratedQueryRunner<GeneratedQuery154> >();
            add< GeneratedQueryRunner<GeneratedQuery155> >();
            add< GeneratedQueryRunner<GeneratedQuery156> >();
            add< GeneratedQueryRunner<GeneratedQuery157> >();
            add< GeneratedQueryRunner<GeneratedQuery158> >();
            add< GeneratedQueryRunner<GeneratedQuery159> >();
            add< GeneratedQueryRunner<GeneratedQuery160> >();
            add< GeneratedQueryRunner<GeneratedQuery161> >();
            add< GeneratedQueryRunner<GeneratedQuery162> >();
            add< GeneratedQueryRunner<GeneratedQuery163> >();
            add< GeneratedQueryRunner<GeneratedQuery164> >();
            add< GeneratedQueryRunner<GeneratedQuery165> >();
            add< GeneratedQueryRunner<GeneratedQuery166> >();
            add< GeneratedQueryRunner<GeneratedQuery167> >();
            add< GeneratedQueryRunner<GeneratedQuery168> >();
            add< GeneratedQueryRunner<GeneratedQuery169> >();
            add< GeneratedQueryRunner<GeneratedQuery170> >();
            add< GeneratedQueryRunner<GeneratedQuery171> >();
            add< GeneratedQueryRunner<GeneratedQuery172> >();
            add< GeneratedQueryRunner<GeneratedQuery173> >();
            add< GeneratedQueryRunner<GeneratedQuery174> >();
            add< GeneratedQueryRunner<GeneratedQuery175> >();
            add< GeneratedQueryRunner<GeneratedQuery176> >();
            add< GeneratedQueryRunner<GeneratedQuery177> >();
            add< GeneratedQueryRunner<GeneratedQuery178> >();
            add< GeneratedQueryRunner<GeneratedQuery179> >();
            add< GeneratedQueryRunner<GeneratedQuery180> >();
            add< GeneratedQueryRunner<GeneratedQuery181> >();
            add< GeneratedQueryRunner<GeneratedQuery182> >();
            add< GeneratedQueryRunner<GeneratedQuery183> >();
            add< GeneratedQueryRunner<GeneratedQuery184> >();
            add< GeneratedQueryRunner<GeneratedQuery185> >();
            add< GeneratedQueryRunner<GeneratedQuery186> >();
            add< GeneratedQueryRunner<GeneratedQuery187> >();
            add< GeneratedQueryRunner<GeneratedQuery188> >();
            add< GeneratedQueryRunner<GeneratedQuery189> >();
            add< GeneratedQueryRunner<GeneratedQuery190> >();
            add< GeneratedQueryRunner<GeneratedQuery191> >();
            add< GeneratedQueryRunner<GeneratedQuery192> >();
            add< GeneratedQueryRunner<GeneratedQuery193> >();
            add< GeneratedQueryRunner<GeneratedQuery194> >();
            add< GeneratedQueryRunner<GeneratedQuery195> >();
            add< GeneratedQueryRunner<GeneratedQuery196> >();
            add< GeneratedQueryRunner<GeneratedQuery197> >();
            add< GeneratedQueryRunner<GeneratedQuery198> >();
            add< GeneratedQueryRunner<GeneratedQuery199> >();
            add< GeneratedQueryRunner<GeneratedQuery200> >();
            add< GeneratedQueryRunner<GeneratedQuery201> >();
            add< GeneratedQueryRunner<GeneratedQuery202> >();
            add< GeneratedQueryRunner<GeneratedQuery203> >();
            add< GeneratedQueryRunner<GeneratedQuery204> >();
            add< GeneratedQueryRunner<GeneratedQuery205> >();
            add< GeneratedQueryRunner<GeneratedQuery206> >();
            add< GeneratedQueryRunner<GeneratedQuery207> >();
            add< GeneratedQueryRunner<GeneratedQuery208> >();
            add< GeneratedQueryRunner<GeneratedQuery209> >();
            add< GeneratedQueryRunner<GeneratedQuery210> >();
            add< GeneratedQueryRunner<GeneratedQuery211> >();
            add< GeneratedQueryRunner<GeneratedQuery212> >();
            add< GeneratedQueryRunner<GeneratedQuery213> >();
            add< GeneratedQueryRunner<GeneratedQuery214> >();
            add< GeneratedQueryRunner<GeneratedQuery215> >();
            add< GeneratedQueryRunner<GeneratedQuery216> >();
            add< GeneratedQueryRunner<GeneratedQuery217> >();
            add< GeneratedQueryRunner<GeneratedQuery218> >();
            add< GeneratedQueryRunner<GeneratedQuery219> >();
            add< GeneratedQueryRunner<GeneratedQuery220> >();
            add< GeneratedQueryRunner<GeneratedQuery221> >();
            add< GeneratedQueryRunner<GeneratedQuery222> >();
            add< GeneratedQueryRunner<GeneratedQuery223> >();
            add< GeneratedQueryRunner<GeneratedQuery224> >();
            add< GeneratedQueryRunner<GeneratedQuery225> >();
            add< GeneratedQueryRunner<GeneratedQuery226> >();
            add< GeneratedQueryRunner<GeneratedQuery227> >();
            add< GeneratedQueryRunner<GeneratedQuery228> >();
            add< GeneratedQueryRunner<GeneratedQuery229> >();
            add< GeneratedQueryRunner<GeneratedQuery230> >();
            add< GeneratedQueryRunner<GeneratedQuery231> >();
            add< GeneratedQueryRunner<GeneratedQuery232> >();
            add< GeneratedQueryRunner<GeneratedQuery233> >();
            add< GeneratedQueryRunner<GeneratedQuery234> >();
            add< GeneratedQueryRunner<GeneratedQuery235> >();
            add< GeneratedQueryRunner<GeneratedQuery236> >();
            add< GeneratedQueryRunner<GeneratedQuery237> >();
            add< GeneratedQueryRunner<GeneratedQuery238> >();
            add< GeneratedQueryRunner<GeneratedQuery239> >();
            add< GeneratedQueryRunner<GeneratedQuery240> >();
            add< GeneratedQueryRunner<GeneratedQuery241> >();
            add< GeneratedQueryRunner<GeneratedQuery242> >();
            add< GeneratedQueryRunner<GeneratedQuery243> >();
            add< GeneratedQueryRunner<GeneratedQuery244> >();
            add< GeneratedQueryRunner<GeneratedQuery245> >();
            add< GeneratedQueryRunner<GeneratedQuery246> >();
            add< GeneratedQueryRunner<GeneratedQuery247> >();
            add< GeneratedQueryRunner<GeneratedQuery248> >();
            add< GeneratedQueryRunner<GeneratedQuery249> >();
            add< GeneratedQueryRunner<GeneratedQuery250> >();
            add< GeneratedQueryRunner<GeneratedQuery251> >();
            add< GeneratedQueryRunner<GeneratedQuery252> >();
            add< GeneratedQueryRunner<GeneratedQuery253> >();
            add< GeneratedQueryRunner<GeneratedQuery254> >();
            add< GeneratedQueryRunner<GeneratedQuery255> >();
            add< GeneratedQueryRunner<GeneratedQuery256> >();
            add< GeneratedQueryRunner<GeneratedQuery257> >();
            add< GeneratedQueryRunner<GeneratedQuery258> >();
            add< GeneratedQueryRunner<GeneratedQuery259> >();
            add< GeneratedQueryRunner<GeneratedQuery260> >();
            add< GeneratedQueryRunner<GeneratedQuery261> >();
            add< GeneratedQueryRunner<GeneratedQuery262> >();
            add< GeneratedQueryRunner<GeneratedQuery263> >();
            add< GeneratedQueryRunner<GeneratedQuery264> >();
            add< GeneratedQueryRunner<GeneratedQuery265> >();
            add< GeneratedQueryRunner<GeneratedQuery266> >();
            add< GeneratedQueryRunner<GeneratedQuery267> >();
            add< GeneratedQueryRunner<GeneratedQuery268> >();
            add< GeneratedQueryRunner<GeneratedQuery269> >();
            add< GeneratedQueryRunner<GeneratedQuery270> >();
            add< GeneratedQueryRunner<GeneratedQuery271> >();
            add< GeneratedQueryRunner<GeneratedQuery272> >();
            add< GeneratedQueryRunner<GeneratedQuery273> >();
            add< GeneratedQueryRunner<GeneratedQuery274> >();
            add< GeneratedQueryRunner<GeneratedQuery275> >();
            add< GeneratedQueryRunner<GeneratedQuery276> >();
            add< GeneratedQueryRunner<GeneratedQuery277> >();
            add< GeneratedQueryRunner<GeneratedQuery278> >();
            add< GeneratedQueryRunner<GeneratedQuery279> >();
            add< GeneratedQueryRunner<GeneratedQuery280> >();
            add< GeneratedQueryRunner<GeneratedQuery281> >();
            add< GeneratedQueryRunner<GeneratedQuery282> >();
            add< GeneratedQueryRunner<GeneratedQuery283> >();
            add< GeneratedQueryRunner<GeneratedQuery284> >();
            add< GeneratedQueryRunner<GeneratedQuery285> >();
            add< GeneratedQueryRunner<GeneratedQuery286> >();
            add< GeneratedQueryRunner<GeneratedQuery287> >();
            add< GeneratedQueryRunner<GeneratedQuery288> >();
            add< GeneratedQueryRunner<GeneratedQuery289> >();
            add< GeneratedQueryRunner<GeneratedQuery290> >();
            add< GeneratedQueryRunner<GeneratedQuery291> >();
            add< GeneratedQueryRunner<GeneratedQuery292> >();
            add< GeneratedQueryRunner<GeneratedQuery293> >();
            add< GeneratedQueryRunner<GeneratedQuery294> >();
            add< GeneratedQueryRunner<GeneratedQuery295> >();
            add< GeneratedQueryRunner<GeneratedQuery296> >();
            add< GeneratedQueryRunner<GeneratedQuery297> >();
            add< GeneratedQueryRunner<GeneratedQuery298> >();
            add< GeneratedQueryRunner<GeneratedQuery299> >();
            add< GeneratedQueryRunner<GeneratedQuery300> >();
            add< GeneratedQueryRunner<GeneratedQuery301> >();
            add< GeneratedQueryRunner<GeneratedQuery302> >();
            add< GeneratedQueryRunner<GeneratedQuery303> >();
            add< GeneratedQueryRunner<GeneratedQuery304> >();
            add< GeneratedQueryRunner<GeneratedQuery305> >();
            add< GeneratedQueryRunner<GeneratedQuery306> >();
            add< GeneratedQueryRunner<GeneratedQuery307> >();
            add< GeneratedQueryRunner<GeneratedQuery308> >();
            add< GeneratedQueryRunner<GeneratedQuery309> >();
            add< GeneratedQueryRunner<GeneratedQuery310> >();
            add< GeneratedQueryRunner<GeneratedQuery311> >();
            add< GeneratedQueryRunner<GeneratedQuery312> >();
            add< GeneratedQueryRunner<GeneratedQuery313> >();
            add< GeneratedQueryRunner<GeneratedQuery314> >();
            add< GeneratedQueryRunner<GeneratedQuery315> >();
            add< GeneratedQueryRunner<GeneratedQuery316> >();
            add< GeneratedQueryRunner<GeneratedQuery317> >();
            add< GeneratedQueryRunner<GeneratedQuery318> >();
            add< GeneratedQueryRunner<GeneratedQuery319> >();
            add< GeneratedQueryRunner<GeneratedQuery320> >();
            add< GeneratedQueryRunner<GeneratedQuery321> >();
            add< GeneratedQueryRunner<GeneratedQuery322> >();
            add< GeneratedQueryRunner<GeneratedQuery323> >();
            add< GeneratedQueryRunner<GeneratedQuery324> >();
            add< GeneratedQueryRunner<GeneratedQuery325> >();
            add< GeneratedQueryRunner<GeneratedQuery326> >();
            add< GeneratedQueryRunner<GeneratedQuery327> >();
            add< GeneratedQueryRunner<GeneratedQuery328> >();
            add< GeneratedQueryRunner<GeneratedQuery329> >();
            add< GeneratedQueryRunner<GeneratedQuery330> >();
            add< GeneratedQueryRunner<GeneratedQuery331> >();
            add< GeneratedQueryRunner<GeneratedQuery332> >();
            add< GeneratedQueryRunner<GeneratedQuery333> >();
            add< GeneratedQueryRunner<GeneratedQuery334> >();
            add< GeneratedQueryRunner<GeneratedQuery335> >();
            add< GeneratedQueryRunner<GeneratedQuery336> >();
            add< GeneratedQueryRunner<GeneratedQuery337> >();
            add< GeneratedQueryRunner<GeneratedQuery338> >();
            add< GeneratedQueryRunner<GeneratedQuery339> >();
            add< GeneratedQueryRunner<GeneratedQuery340> >();
            add< GeneratedQueryRunner<GeneratedQuery341> >();
            add< GeneratedQueryRunner<GeneratedQuery342> >();
            add< GeneratedQueryRunner<GeneratedQuery343> >();
            add< GeneratedQueryRunner<GeneratedQuery344> >();
            add< GeneratedQueryRunner<GeneratedQuery345> >();
            add< GeneratedQueryRunner<GeneratedQuery346> >();
            add< GeneratedQueryRunner<GeneratedQuery347> >();
            add< GeneratedQueryRunner<GeneratedQuery348> >();
            add< GeneratedQueryRunner<GeneratedQuery349> >();
            add< GeneratedQueryRunner<GeneratedQuery350> >();
            add< GeneratedQueryRunner<GeneratedQuery351> >();
            add< GeneratedQueryRunner<GeneratedQuery352> >();
            add< GeneratedQueryRunner<GeneratedQuery353> >();
            add< GeneratedQueryRunner<GeneratedQuery354> >();
            add< GeneratedQueryRunner<GeneratedQuery355> >();
            add< GeneratedQueryRunner<GeneratedQuery356> >();
            add< GeneratedQueryRunner<GeneratedQuery357> >();
            add< GeneratedQueryRunner<GeneratedQuery358> >();
            add< GeneratedQueryRunner<GeneratedQuery359> >();
            add< GeneratedQueryRunner<GeneratedQuery360> >();
            add< GeneratedQueryRunner<GeneratedQuery361> >();
            add< GeneratedQueryRunner<GeneratedQuery362> >();
            add< GeneratedQueryRunner<GeneratedQuery363> >();
            add< GeneratedQueryRunner<GeneratedQuery364> >();
            add< GeneratedQueryRunner<GeneratedQuery365> >();
            add< GeneratedQueryRunner<GeneratedQuery366> >();
            add< GeneratedQueryRunner<GeneratedQuery367> >();
            add< GeneratedQueryRunner<GeneratedQuery368> >();
            add< GeneratedQueryRunner<GeneratedQuery369> >();
            add< GeneratedQueryRunner<GeneratedQuery370> >();
            add< GeneratedQueryRunner<GeneratedQuery371> >();
            add< GeneratedQueryRunner<GeneratedQuery372> >();
            add< GeneratedQueryRunner<GeneratedQuery373> >();
            add< GeneratedQueryRunner<GeneratedQuery374> >();
            add< GeneratedQueryRunner<GeneratedQuery375> >();
            add< GeneratedQueryRunner<GeneratedQuery376> >();
            add< GeneratedQueryRunner<GeneratedQuery377> >();
            add< GeneratedQueryRunner<GeneratedQuery378> >();
            add< GeneratedQueryRunner<GeneratedQuery379> >();
            add< GeneratedQueryRunner<GeneratedQuery380> >();
            add< GeneratedQueryRunner<GeneratedQuery381> >();
            add< GeneratedQueryRunner<GeneratedQuery382> >();
            add< GeneratedQueryRunner<GeneratedQuery383> >();
            add< GeneratedQueryRunner<GeneratedQuery384> >();
            add< GeneratedQueryRunner<GeneratedQuery385> >();
            add< GeneratedQueryRunner<GeneratedQuery386> >();
            add< GeneratedQueryRunner<GeneratedQuery387> >();
            add< GeneratedQueryRunner<GeneratedQuery388> >();
            add< GeneratedQueryRunner<GeneratedQuery389> >();
            add< GeneratedQueryRunner<GeneratedQuery390> >();
            add< GeneratedQueryRunner<GeneratedQuery391> >();
            add< GeneratedQueryRunner<GeneratedQuery392> >();
            add< GeneratedQueryRunner<GeneratedQuery393> >();
            add< GeneratedQueryRunner<GeneratedQuery394> >();
            add< GeneratedQueryRunner<GeneratedQuery395> >();
            add< GeneratedQueryRunner<GeneratedQuery396> >();
            add< GeneratedQueryRunner<GeneratedQuery397> >();
            add< GeneratedQueryRunner<GeneratedQuery398> >();
            add< GeneratedQueryRunner<GeneratedQuery399> >();
            add< GeneratedQueryRunner<GeneratedQuery400> >();
            add< GeneratedQueryRunner<GeneratedQuery401> >();
            add< GeneratedQueryRunner<GeneratedQuery402> >();
            add< GeneratedQueryRunner<GeneratedQuery403> >();
            add< GeneratedQueryRunner<GeneratedQuery404> >();
            add< GeneratedQueryRunner<GeneratedQuery405> >();
            add< GeneratedQueryRunner<GeneratedQuery406> >();
            add< GeneratedQueryRunner<GeneratedQuery407> >();
            add< GeneratedQueryRunner<GeneratedQuery408> >();
            add< GeneratedQueryRunner<GeneratedQuery409> >();
            add< GeneratedQueryRunner<GeneratedQuery410> >();
            add< GeneratedQueryRunner<GeneratedQuery411> >();
            add< GeneratedQueryRunner<GeneratedQuery412> >();
            add< GeneratedQueryRunner<GeneratedQuery413> >();
            add< GeneratedQueryRunner<GeneratedQuery414> >();
            add< GeneratedQueryRunner<GeneratedQuery415> >();
            add< GeneratedQueryRunner<GeneratedQuery416> >();
            add< GeneratedQueryRunner<GeneratedQuery417> >();
            add< GeneratedQueryRunner<GeneratedQuery418> >();
            add< GeneratedQueryRunner<GeneratedQuery419> >();
            add< GeneratedQueryRunner<GeneratedQuery420> >();
            add< GeneratedQueryRunner<GeneratedQuery421> >();
            add< GeneratedQueryRunner<GeneratedQuery422> >();
            add< GeneratedQueryRunner<GeneratedQuery423> >();
            add< GeneratedQueryRunner<GeneratedQuery424> >();
            add< GeneratedQueryRunner<GeneratedQuery425> >();
            add< GeneratedQueryRunner<GeneratedQuery426> >();
            add< GeneratedQueryRunner<GeneratedQuery427> >();
            add< GeneratedQueryRunner<GeneratedQuery428> >();
            add< GeneratedQueryRunner<GeneratedQuery429> >();
            add< GeneratedQueryRunner<GeneratedQuery430> >();
            add< GeneratedQueryRunner<GeneratedQuery431> >();
            add< GeneratedQueryRunner<GeneratedQuery432> >();
            add< GeneratedQueryRunner<GeneratedQuery433> >();
            add< GeneratedQueryRunner<GeneratedQuery434> >();
            add< GeneratedQueryRunner<GeneratedQuery435> >();
            add< GeneratedQueryRunner<GeneratedQuery436> >();
            add< GeneratedQueryRunner<GeneratedQuery437> >();
            add< GeneratedQueryRunner<GeneratedQuery438> >();
            add< GeneratedQueryRunner<GeneratedQuery439> >();
            add< GeneratedQueryRunner<GeneratedQuery440> >();
            add< GeneratedQueryRunner<GeneratedQuery441> >();
            add< GeneratedQueryRunner<GeneratedQuery442> >();
            add< GeneratedQueryRunner<GeneratedQuery443> >();
            add< GeneratedQueryRunner<GeneratedQuery444> >();
            add< GeneratedQueryRunner<GeneratedQuery445> >();
            add< GeneratedQueryRunner<GeneratedQuery446> >();
            add< GeneratedQueryRunner<GeneratedQuery447> >();
            add< GeneratedQueryRunner<GeneratedQuery448> >();
            add< GeneratedQueryRunner<GeneratedQuery449> >();
            add< GeneratedQueryRunner<GeneratedQuery450> >();
            add< GeneratedQueryRunner<GeneratedQuery451> >();
            add< GeneratedQueryRunner<GeneratedQuery452> >();
            add< GeneratedQueryRunner<GeneratedQuery453> >();
            add< GeneratedQueryRunner<GeneratedQuery454> >();
            add< GeneratedQueryRunner<GeneratedQuery455> >();
            add< GeneratedQueryRunner<GeneratedQuery456> >();
            add< GeneratedQueryRunner<GeneratedQuery457> >();
            add< GeneratedQueryRunner<GeneratedQuery458> >();
            add< GeneratedQueryRunner<GeneratedQuery459> >();
            add< GeneratedQueryRunner<GeneratedQuery460> >();
            add< GeneratedQueryRunner<GeneratedQuery461> >();
            add< GeneratedQueryRunner<GeneratedQuery462> >();
            add< GeneratedQueryRunner<GeneratedQuery463> >();
            add< GeneratedQueryRunner<GeneratedQuery464> >();
            add< GeneratedQueryRunner<GeneratedQuery465> >();
            add< GeneratedQueryRunner<GeneratedQuery466> >();
            add< GeneratedQueryRunner<GeneratedQuery467> >();
            add< GeneratedQueryRunner<GeneratedQuery468> >();
            add< GeneratedQueryRunner<GeneratedQuery469> >();
            add< GeneratedQueryRunner<GeneratedQuery470> >();
            add< GeneratedQueryRunner<GeneratedQuery471> >();
            add< GeneratedQueryRunner<GeneratedQuery472> >();
            add< GeneratedQueryRunner<GeneratedQuery473> >();
            add< GeneratedQueryRunner<GeneratedQuery474> >();
            add< GeneratedQueryRunner<GeneratedQuery475> >();
            add< GeneratedQueryRunner<GeneratedQuery476> >();
            add< GeneratedQueryRunner<GeneratedQuery477> >();
            add< GeneratedQueryRunner<GeneratedQuery478> >();
            add< GeneratedQueryRunner<GeneratedQuery479> >();
            add< GeneratedQueryRunner<GeneratedQuery480> >();
            add< GeneratedQueryRunner<GeneratedQuery481> >();
            add< GeneratedQueryRunner<GeneratedQuery482> >();
            add< GeneratedQueryRunner<GeneratedQuery483> >();
            add< GeneratedQueryRunner<GeneratedQuery484> >();
            add< GeneratedQueryRunner<GeneratedQuery485> >();
            add< GeneratedQueryRunner<GeneratedQuery486> >();
            add< GeneratedQueryRunner<GeneratedQuery487> >();
            add< GeneratedQueryRunner<GeneratedQuery488> >();
            add< GeneratedQueryRunner<GeneratedQuery489> >();
            add< GeneratedQueryRunner<GeneratedQuery490> >();
            add< GeneratedQueryRunner<GeneratedQuery491> >();
            add< GeneratedQueryRunner<GeneratedQuery492> >();
            add< GeneratedQueryRunner<GeneratedQuery493> >();
            add< GeneratedQueryRunner<GeneratedQuery494> >();
            add< GeneratedQueryRunner<GeneratedQuery495> >();
            add< GeneratedQueryRunner<GeneratedQuery496> >();
            add< GeneratedQueryRunner<GeneratedQuery497> >();
            add< GeneratedQueryRunner<GeneratedQuery498> >();
            add< GeneratedQueryRunner<GeneratedQuery499> >();
            add< GeneratedQueryRunner<GeneratedQuery500> >();
            add< GeneratedQueryRunner<GeneratedQuery501> >();
            add< GeneratedQueryRunner<GeneratedQuery502> >();
            add< GeneratedQueryRunner<GeneratedQuery503> >();
            add< GeneratedQueryRunner<GeneratedQuery504> >();
            add< GeneratedQueryRunner<GeneratedQuery505> >();
            add< GeneratedQueryRunner<GeneratedQuery506> >();
            add< GeneratedQueryRunner<GeneratedQuery507> >();
            add< GeneratedQueryRunner<GeneratedQuery508> >();
            add< GeneratedQueryRunner<GeneratedQuery509> >();
            add< GeneratedQueryRunner<GeneratedQuery510> >();
            add< GeneratedQueryRunner<GeneratedQuery511> >();
            add< GeneratedQueryRunner<GeneratedQuery512> >();
            add< GeneratedQueryRunner<GeneratedQuery513> >();
            add< GeneratedQueryRunner<GeneratedQuery514> >();
            add< GeneratedQueryRunner<GeneratedQuery515> >();
            add< GeneratedQueryRunner<GeneratedQuery516> >();
            add< GeneratedQueryRunner<GeneratedQuery517> >();
            add< GeneratedQueryRunner<GeneratedQuery518> >();
            add< GeneratedQueryRunner<GeneratedQuery519> >();
            add< GeneratedQueryRunner<GeneratedQuery520> >();
            add< GeneratedQueryRunner<GeneratedQuery521> >();
            add< GeneratedQueryRunner<GeneratedQuery522> >();
            add< GeneratedQueryRunner<GeneratedQuery523> >();
            add< GeneratedQueryRunner<GeneratedQuery524> >();
            add< GeneratedQueryRunner<GeneratedQuery525> >();
            add< GeneratedQueryRunner<GeneratedQuery526> >();
            add< GeneratedQueryRunner<GeneratedQuery527> >();
            add< GeneratedQueryRunner<GeneratedQuery528> >();
            add< GeneratedQueryRunner<GeneratedQuery529> >();
            add< GeneratedQueryRunner<GeneratedQuery530> >();
            add< GeneratedQueryRunner<GeneratedQuery531> >();
            add< GeneratedQueryRunner<GeneratedQuery532> >();
            add< GeneratedQueryRunner<GeneratedQuery533> >();
            add< GeneratedQueryRunner<GeneratedQuery534> >();
            add< GeneratedQueryRunner<GeneratedQuery535> >();
            add< GeneratedQueryRunner<GeneratedQuery536> >();
            add< GeneratedQueryRunner<GeneratedQuery537> >();
            add< GeneratedQueryRunner<GeneratedQuery538> >();
            add< GeneratedQueryRunner<GeneratedQuery539> >();
            add< GeneratedQueryRunner<GeneratedQuery540> >();
            add< GeneratedQueryRunner<GeneratedQuery541> >();
            add< GeneratedQueryRunner<GeneratedQuery542> >();
            add< GeneratedQueryRunner<GeneratedQuery543> >();
            add< GeneratedQueryRunner<GeneratedQuery544> >();
            add< GeneratedQueryRunner<GeneratedQuery545> >();
            add< GeneratedQueryRunner<GeneratedQuery546> >();
            add< GeneratedQueryRunner<GeneratedQuery547> >();
            add< GeneratedQueryRunner<GeneratedQuery548> >();
            add< GeneratedQueryRunner<GeneratedQuery549> >();
            add< GeneratedQueryRunner<GeneratedQuery550> >();
            add< GeneratedQueryRunner<GeneratedQuery551> >();
            add< GeneratedQueryRunner<GeneratedQuery552> >();
            add< GeneratedQueryRunner<GeneratedQuery553> >();
            add< GeneratedQueryRunner<GeneratedQuery554> >();
            add< GeneratedQueryRunner<GeneratedQuery555> >();
            add< GeneratedQueryRunner<GeneratedQuery556> >();
            add< GeneratedQueryRunner<GeneratedQuery557> >();
            add< GeneratedQueryRunner<GeneratedQuery558> >();
            add< GeneratedQueryRunner<GeneratedQuery559> >();
            add< GeneratedQueryRunner<GeneratedQuery560> >();
            add< GeneratedQueryRunner<GeneratedQuery561> >();
            add< GeneratedQueryRunner<GeneratedQuery562> >();
            add< GeneratedQueryRunner<GeneratedQuery563> >();
            add< GeneratedQueryRunner<GeneratedQuery564> >();
            add< GeneratedQueryRunner<GeneratedQuery565> >();
            add< GeneratedQueryRunner<GeneratedQuery566> >();
            add< GeneratedQueryRunner<GeneratedQuery567> >();
            add< GeneratedQueryRunner<GeneratedQuery568> >();
            add< GeneratedQueryRunner<GeneratedQuery569> >();
            add< GeneratedQueryRunner<GeneratedQuery570> >();
            add< GeneratedQueryRunner<GeneratedQuery571> >();
            add< GeneratedQueryRunner<GeneratedQuery572> >();
            add< GeneratedQueryRunner<GeneratedQuery573> >();
            add< GeneratedQueryRunner<GeneratedQuery574> >();
            add< GeneratedQueryRunner<GeneratedQuery575> >();
            add< GeneratedQueryRunner<GeneratedQuery576> >();
            add< GeneratedQueryRunner<GeneratedQuery577> >();
            add< GeneratedQueryRunner<GeneratedQuery578> >();
            add< GeneratedQueryRunner<GeneratedQuery579> >();
            add< GeneratedQueryRunner<GeneratedQuery580> >();
            add< GeneratedQueryRunner<GeneratedQuery581> >();
            add< GeneratedQueryRunner<GeneratedQuery582> >();
            add< GeneratedQueryRunner<GeneratedQuery583> >();
            add< GeneratedQueryRunner<GeneratedQuery584> >();
            add< GeneratedQueryRunner<GeneratedQuery585> >();
            add< GeneratedQueryRunner<GeneratedQuery586> >();
            add< GeneratedQueryRunner<GeneratedQuery587> >();
            add< GeneratedQueryRunner<GeneratedQuery588> >();
            add< GeneratedQueryRunner<GeneratedQuery589> >();
            add< GeneratedQueryRunner<GeneratedQuery590> >();
            add< GeneratedQueryRunner<GeneratedQuery591> >();
            add< GeneratedQueryRunner<GeneratedQuery592> >();
            add< GeneratedQueryRunner<GeneratedQuery593> >();
            add< GeneratedQueryRunner<GeneratedQuery594> >();
            add< GeneratedQueryRunner<GeneratedQuery595> >();
            add< GeneratedQueryRunner<GeneratedQuery596> >();
            add< GeneratedQueryRunner<GeneratedQuery597> >();
            add< GeneratedQueryRunner<GeneratedQuery598> >();
            add< GeneratedQueryRunner<GeneratedQuery599> >();
            add< GeneratedQueryRunner<GeneratedQuery600> >();
            add< GeneratedQueryRunner<GeneratedQuery601> >();
            add< GeneratedQueryRunner<GeneratedQuery602> >();
            add< GeneratedQueryRunner<GeneratedQuery603> >();
            add< GeneratedQueryRunner<GeneratedQuery604> >();
            add< GeneratedQueryRunner<GeneratedQuery605> >();
            add< GeneratedQueryRunner<GeneratedQuery606> >();
            add< GeneratedQueryRunner<GeneratedQuery607> >();
            add< GeneratedQueryRunner<GeneratedQuery608> >();
            add< GeneratedQueryRunner<GeneratedQuery609> >();
            add< GeneratedQueryRunner<GeneratedQuery610> >();
            add< GeneratedQueryRunner<GeneratedQuery611> >();
            add< GeneratedQueryRunner<GeneratedQuery612> >();
            add< GeneratedQueryRunner<GeneratedQuery613> >();
            add< GeneratedQueryRunner<GeneratedQuery614> >();
            add< GeneratedQueryRunner<GeneratedQuery615> >();
            add< GeneratedQueryRunner<GeneratedQuery616> >();
            add< GeneratedQueryRunner<GeneratedQuery617> >();
            add< GeneratedQueryRunner<GeneratedQuery618> >();
            add< GeneratedQueryRunner<GeneratedQuery619> >();
            add< GeneratedQueryRunner<GeneratedQuery620> >();
            add< GeneratedQueryRunner<GeneratedQuery621> >();
            add< GeneratedQueryRunner<GeneratedQuery622> >();
            add< GeneratedQueryRunner<GeneratedQuery623> >();
            add< GeneratedQueryRunner<GeneratedQuery624> >();
            add< GeneratedQueryRunner<GeneratedQuery625> >();
            add< GeneratedQueryRunner<GeneratedQuery626> >();
            add< GeneratedQueryRunner<GeneratedQuery627> >();
            add< GeneratedQueryRunner<GeneratedQuery628> >();
            add< GeneratedQueryRunner<GeneratedQuery629> >();
            add< GeneratedQueryRunner<GeneratedQuery630> >();
            add< GeneratedQueryRunner<GeneratedQuery631> >();
            add< GeneratedQueryRunner<GeneratedQuery632> >();
            add< GeneratedQueryRunner<GeneratedQuery633> >();
            add< GeneratedQueryRunner<GeneratedQuery634> >();
            add< GeneratedQueryRunner<GeneratedQuery635> >();
            add< GeneratedQueryRunner<GeneratedQuery636> >();
            add< GeneratedQueryRunner<GeneratedQuery637> >();
            add< GeneratedQueryRunner<GeneratedQuery638> >();
            add< GeneratedQueryRunner<GeneratedQuery639> >();
            add< GeneratedQueryRunner<GeneratedQuery640> >();
            add< GeneratedQueryRunner<GeneratedQuery641> >();
            add< GeneratedQueryRunner<GeneratedQuery642> >();
            add< GeneratedQueryRunner<GeneratedQuery643> >();
            add< GeneratedQueryRunner<GeneratedQuery644> >();
            add< GeneratedQueryRunner<GeneratedQuery645> >();
            add< GeneratedQueryRunner<GeneratedQuery646> >();
            add< GeneratedQueryRunner<GeneratedQuery647> >();
            add< GeneratedQueryRunner<GeneratedQuery648> >();
            add< GeneratedQueryRunner<GeneratedQuery649> >();
            add< GeneratedQueryRunner<GeneratedQuery650> >();
            add< GeneratedQueryRunner<GeneratedQuery651> >();
            add< GeneratedQueryRunner<GeneratedQuery652> >();
            add< GeneratedQueryRunner<GeneratedQuery653> >();
            add< GeneratedQueryRunner<GeneratedQuery654> >();
            add< GeneratedQueryRunner<GeneratedQuery655> >();
            add< GeneratedQueryRunner<GeneratedQuery656> >();
            add< GeneratedQueryRunner<GeneratedQuery657> >();
            add< GeneratedQueryRunner<GeneratedQuery658> >();
            add< GeneratedQueryRunner<GeneratedQuery659> >();
            add< GeneratedQueryRunner<GeneratedQuery660> >();
            add< GeneratedQueryRunner<GeneratedQuery661> >();
            add< GeneratedQueryRunner<GeneratedQuery662> >();
            add< GeneratedQueryRunner<GeneratedQuery663> >();
            add< GeneratedQueryRunner<GeneratedQuery664> >();
            add< GeneratedQueryRunner<GeneratedQuery665> >();
            add< GeneratedQueryRunner<GeneratedQuery666> >();
            add< GeneratedQueryRunner<GeneratedQuery667> >();
            add< GeneratedQueryRunner<GeneratedQuery668> >();
            add< GeneratedQueryRunner<GeneratedQuery669> >();
            add< GeneratedQueryRunner<GeneratedQuery670> >();
            add< GeneratedQueryRunner<GeneratedQuery671> >();
            add< GeneratedQueryRunner<GeneratedQuery672> >();
            add< GeneratedQueryRunner<GeneratedQuery673> >();
            add< GeneratedQueryRunner<GeneratedQuery674> >();
            add< GeneratedQueryRunner<GeneratedQuery675> >();
            add< GeneratedQueryRunner<GeneratedQuery676> >();
            add< GeneratedQueryRunner<GeneratedQuery677> >();
            add< GeneratedQueryRunner<GeneratedQuery678> >();
            add< GeneratedQueryRunner<GeneratedQuery679> >();
            add< GeneratedQueryRunner<GeneratedQuery680> >();
            add< GeneratedQueryRunner<GeneratedQuery681> >();
            add< GeneratedQueryRunner<GeneratedQuery682> >();
            add< GeneratedQueryRunner<GeneratedQuery683> >();
            add< GeneratedQueryRunner<GeneratedQuery684> >();
            add< GeneratedQueryRunner<GeneratedQuery685> >();
            add< GeneratedQueryRunner<GeneratedQuery686> >();
            add< GeneratedQueryRunner<GeneratedQuery687> >();
            add< GeneratedQueryRunner<GeneratedQuery688> >();
            add< GeneratedQueryRunner<GeneratedQuery689> >();
            add< GeneratedQueryRunner<GeneratedQuery690> >();
            add< GeneratedQueryRunner<GeneratedQuery691> >();
            add< GeneratedQueryRunner<GeneratedQuery692> >();
            add< GeneratedQueryRunner<GeneratedQuery693> >();
            add< GeneratedQueryRunner<GeneratedQuery694> >();
            add< GeneratedQueryRunner<GeneratedQuery695> >();
            add< GeneratedQueryRunner<GeneratedQuery696> >();
            add< GeneratedQueryRunner<GeneratedQuery697> >();
            add< GeneratedQueryRunner<GeneratedQuery698> >();
            add< GeneratedQueryRunner<GeneratedQuery699> >();
            add< GeneratedQueryRunner<GeneratedQuery700> >();
            add< GeneratedQueryRunner<GeneratedQuery701> >();
            add< GeneratedQueryRunner<GeneratedQuery702> >();
            add< GeneratedQueryRunner<GeneratedQuery703> >();
            add< GeneratedQueryRunner<GeneratedQuery704> >();
            add< GeneratedQueryRunner<GeneratedQuery705> >();
            add< GeneratedQueryRunner<GeneratedQuery706> >();
            add< GeneratedQueryRunner<GeneratedQuery707> >();
            add< GeneratedQueryRunner<GeneratedQuery708> >();
            add< GeneratedQueryRunner<GeneratedQuery709> >();
            add< GeneratedQueryRunner<GeneratedQuery710> >();
            add< GeneratedQueryRunner<GeneratedQuery711> >();
            add< GeneratedQueryRunner<GeneratedQuery712> >();
            add< GeneratedQueryRunner<GeneratedQuery713> >();
            add< GeneratedQueryRunner<GeneratedQuery714> >();
            add< GeneratedQueryRunner<GeneratedQuery715> >();
            add< GeneratedQueryRunner<GeneratedQuery716> >();
            add< GeneratedQueryRunner<GeneratedQuery717> >();
            add< GeneratedQueryRunner<GeneratedQuery718> >();
            add< GeneratedQueryRunner<GeneratedQuery719> >();
            add< GeneratedQueryRunner<GeneratedQuery720> >();
            add< GeneratedQueryRunner<GeneratedQuery721> >();
            add< GeneratedQueryRunner<GeneratedQuery722> >();
            add< GeneratedQueryRunner<GeneratedQuery723> >();
            add< GeneratedQueryRunner<GeneratedQuery724> >();
            add< GeneratedQueryRunner<GeneratedQuery725> >();
            add< GeneratedQueryRunner<GeneratedQuery726> >();
            add< GeneratedQueryRunner<GeneratedQuery727> >();
            add< GeneratedQueryRunner<GeneratedQuery728> >();
            add< GeneratedQueryRunner<GeneratedQuery729> >();
            add< GeneratedQueryRunner<GeneratedQuery730> >();
            add< GeneratedQueryRunner<GeneratedQuery731> >();
            add< GeneratedQueryRunner<GeneratedQuery732> >();
            add< GeneratedQueryRunner<GeneratedQuery733> >();
            add< GeneratedQueryRunner<GeneratedQuery734> >();
            add< GeneratedQueryRunner<GeneratedQuery735> >();
            add< GeneratedQueryRunner<GeneratedQuery736> >();
            add< GeneratedQueryRunner<GeneratedQuery737> >();
            add< GeneratedQueryRunner<GeneratedQuery738> >();
            add< GeneratedQueryRunner<GeneratedQuery739> >();
            add< GeneratedQueryRunner<GeneratedQuery740> >();
            add< GeneratedQueryRunner<GeneratedQuery741> >();
            add< GeneratedQueryRunner<GeneratedQuery742> >();
            add< GeneratedQueryRunner<GeneratedQuery743> >();
            add< GeneratedQueryRunner<GeneratedQuery744> >();
            add< GeneratedQueryRunner<GeneratedQuery745> >();
            add< GeneratedQueryRunner<GeneratedQuery746> >();
            add< GeneratedQueryRunner<GeneratedQuery747> >();
            add< GeneratedQueryRunner<GeneratedQuery748> >();
            add< GeneratedQueryRunner<GeneratedQuery749> >();
            add< GeneratedQueryRunner<GeneratedQuery750> >();
            add< GeneratedQueryRunner<GeneratedQuery751> >();
            add< GeneratedQueryRunner<GeneratedQuery752> >();
            add< GeneratedQueryRunner<GeneratedQuery753> >();
            add< GeneratedQueryRunner<GeneratedQuery754> >();
            add< GeneratedQueryRunner<GeneratedQuery755> >();
            add< GeneratedQueryRunner<GeneratedQuery756> >();
            add< GeneratedQueryRunner<GeneratedQuery757> >();
            add< GeneratedQueryRunner<GeneratedQuery758> >();
            add< GeneratedQueryRunner<GeneratedQuery759> >();
            add< GeneratedQueryRunner<GeneratedQuery760> >();
            add< GeneratedQueryRunner<GeneratedQuery761> >();
            add< GeneratedQueryRunner<GeneratedQuery762> >();
            add< GeneratedQueryRunner<GeneratedQuery763> >();
            add< GeneratedQueryRunner<GeneratedQuery764> >();
            add< GeneratedQueryRunner<GeneratedQuery765> >();
            add< GeneratedQueryRunner<GeneratedQuery766> >();
            add< GeneratedQueryRunner<GeneratedQuery767> >();
            add< GeneratedQueryRunner<GeneratedQuery768> >();
            add< GeneratedQueryRunner<GeneratedQuery769> >();
            add< GeneratedQueryRunner<GeneratedQuery770> >();
            add< GeneratedQueryRunner<GeneratedQuery771> >();
            add< GeneratedQueryRunner<GeneratedQuery772> >();
            add< GeneratedQueryRunner<GeneratedQuery773> >();
            add< GeneratedQueryRunner<GeneratedQuery774> >();
            add< GeneratedQueryRunner<GeneratedQuery775> >();
            add< GeneratedQueryRunner<GeneratedQuery776> >();
            add< GeneratedQueryRunner<GeneratedQuery777> >();
            add< GeneratedQueryRunner<GeneratedQuery778> >();
            add< GeneratedQueryRunner<GeneratedQuery779> >();
            add< GeneratedQueryRunner<GeneratedQuery780> >();
            add< GeneratedQueryRunner<GeneratedQuery781> >();
            add< GeneratedQueryRunner<GeneratedQuery782> >();
            add< GeneratedQueryRunner<GeneratedQuery783> >();
            add< GeneratedQueryRunner<GeneratedQuery784> >();
            add< GeneratedQueryRunner<GeneratedQuery785> >();
            add< GeneratedQueryRunner<GeneratedQuery786> >();
            add< GeneratedQueryRunner<GeneratedQuery787> >();
            add< GeneratedQueryRunner<GeneratedQuery788> >();
            add< GeneratedQueryRunner<GeneratedQuery789> >();
            add< GeneratedQueryRunner<GeneratedQuery790> >();
            add< GeneratedQueryRunner<GeneratedQuery791> >();
            add< GeneratedQueryRunner<GeneratedQuery792> >();
            add< GeneratedQueryRunner<GeneratedQuery793> >();
            add< GeneratedQueryRunner<GeneratedQuery794> >();
            add< GeneratedQueryRunner<GeneratedQuery795> >();
            add< GeneratedQueryRunner<GeneratedQuery796> >();
            add< GeneratedQueryRunner<GeneratedQuery797> >();
            add< GeneratedQueryRunner<GeneratedQuery798> >();
            add< GeneratedQueryRunner<GeneratedQuery799> >();
            add< GeneratedQueryRunner<GeneratedQuery800> >();
            add< GeneratedQueryRunner<GeneratedQuery801> >();
            add< GeneratedQueryRunner<GeneratedQuery802> >();
            add< GeneratedQueryRunner<GeneratedQuery803> >();
            add< GeneratedQueryRunner<GeneratedQuery804> >();
            add< GeneratedQueryRunner<GeneratedQuery805> >();
            add< GeneratedQueryRunner<GeneratedQuery806> >();
            add< GeneratedQueryRunner<GeneratedQuery807> >();
            add< GeneratedQueryRunner<GeneratedQuery808> >();
            add< GeneratedQueryRunner<GeneratedQuery809> >();
            add< GeneratedQueryRunner<GeneratedQuery810> >();
            add< GeneratedQueryRunner<GeneratedQuery811> >();
            add< GeneratedQueryRunner<GeneratedQuery812> >();
            add< GeneratedQueryRunner<GeneratedQuery813> >();
            add< GeneratedQueryRunner<GeneratedQuery814> >();
            add< GeneratedQueryRunner<GeneratedQuery815> >();
            add< GeneratedQueryRunner<GeneratedQuery816> >();
            add< GeneratedQueryRunner<GeneratedQuery817> >();
            add< GeneratedQueryRunner<GeneratedQuery818> >();
            add< GeneratedQueryRunner<GeneratedQuery819> >();
            add< GeneratedQueryRunner<GeneratedQuery820> >();
            add< GeneratedQueryRunner<GeneratedQuery821> >();
            add< GeneratedQueryRunner<GeneratedQuery822> >();
            add< GeneratedQueryRunner<GeneratedQuery823> >();
            add< GeneratedQueryRunner<GeneratedQuery824> >();
            add< GeneratedQueryRunner<GeneratedQuery825> >();
            add< GeneratedQueryRunner<GeneratedQuery826> >();
            add< GeneratedQueryRunner<GeneratedQuery827> >();
            add< GeneratedQueryRunner<GeneratedQuery828> >();
            add< GeneratedQueryRunner<GeneratedQuery829> >();
            add< GeneratedQueryRunner<GeneratedQuery830> >();
            add< GeneratedQueryRunner<GeneratedQuery831> >();
            add< GeneratedQueryRunner<GeneratedQuery832> >();
            add< GeneratedQueryRunner<GeneratedQuery833> >();
            add< GeneratedQueryRunner<GeneratedQuery834> >();
            add< GeneratedQueryRunner<GeneratedQuery835> >();
            add< GeneratedQueryRunner<GeneratedQuery836> >();
            add< GeneratedQueryRunner<GeneratedQuery837> >();
            add< GeneratedQueryRunner<GeneratedQuery838> >();
            add< GeneratedQueryRunner<GeneratedQuery839> >();
            add< GeneratedQueryRunner<GeneratedQuery840> >();
            add< GeneratedQueryRunner<GeneratedQuery841> >();
            add< GeneratedQueryRunner<GeneratedQuery842> >();
            add< GeneratedQueryRunner<GeneratedQuery843> >();
            add< GeneratedQueryRunner<GeneratedQuery844> >();
            add< GeneratedQueryRunner<GeneratedQuery845> >();
            add< GeneratedQueryRunner<GeneratedQuery846> >();
            add< GeneratedQueryRunner<GeneratedQuery847> >();
            add< GeneratedQueryRunner<GeneratedQuery848> >();
            add< GeneratedQueryRunner<GeneratedQuery849> >();
            add< GeneratedQueryRunner<GeneratedQuery850> >();
            add< GeneratedQueryRunner<GeneratedQuery851> >();
            add< GeneratedQueryRunner<GeneratedQuery852> >();
            add< GeneratedQueryRunner<GeneratedQuery853> >();
            add< GeneratedQueryRunner<GeneratedQuery854> >();
            add< GeneratedQueryRunner<GeneratedQuery855> >();
            add< GeneratedQueryRunner<GeneratedQuery856> >();
            add< GeneratedQueryRunner<GeneratedQuery857> >();
            add< GeneratedQueryRunner<GeneratedQuery858> >();
            add< GeneratedQueryRunner<GeneratedQuery859> >();
            add< GeneratedQueryRunner<GeneratedQuery860> >();
            add< GeneratedQueryRunner<GeneratedQuery861> >();
            add< GeneratedQueryRunner<GeneratedQuery862> >();
            add< GeneratedQueryRunner<GeneratedQuery863> >();
            add< GeneratedQueryRunner<GeneratedQuery864> >();
            add< GeneratedQueryRunner<GeneratedQuery865> >();
            add< GeneratedQueryRunner<GeneratedQuery866> >();
            add< GeneratedQueryRunner<GeneratedQuery867> >();
            add< GeneratedQueryRunner<GeneratedQuery868> >();
            add< GeneratedQueryRunner<GeneratedQuery869> >();
            add< GeneratedQueryRunner<GeneratedQuery870> >();
            add< GeneratedQueryRunner<GeneratedQuery871> >();
            add< GeneratedQueryRunner<GeneratedQuery872> >();
            add< GeneratedQueryRunner<GeneratedQuery873> >();
            add< GeneratedQueryRunner<GeneratedQuery874> >();
            add< GeneratedQueryRunner<GeneratedQuery875> >();
            add< GeneratedQueryRunner<GeneratedQuery876> >();
            add< GeneratedQueryRunner<GeneratedQuery877> >();
            add< GeneratedQueryRunner<GeneratedQuery878> >();
            add< GeneratedQueryRunner<GeneratedQuery879> >();
            add< GeneratedQueryRunner<GeneratedQuery880> >();
            add< GeneratedQueryRunner<GeneratedQuery881> >();
            add< GeneratedQueryRunner<GeneratedQuery882> >();
            add< GeneratedQueryRunner<GeneratedQuery883> >();
            add< GeneratedQueryRunner<GeneratedQuery884> >();
            add< GeneratedQueryRunner<GeneratedQuery885> >();
            add< GeneratedQueryRunner<GeneratedQuery886> >();
            add< GeneratedQueryRunner<GeneratedQuery887> >();
            add< GeneratedQueryRunner<GeneratedQuery888> >();
            add< GeneratedQueryRunner<GeneratedQuery889> >();
            add< GeneratedQueryRunner<GeneratedQuery890> >();
            add< GeneratedQueryRunner<GeneratedQuery891> >();
            add< GeneratedQueryRunner<GeneratedQuery892> >();
            add< GeneratedQueryRunner<GeneratedQuery893> >();
            add< GeneratedQueryRunner<GeneratedQuery894> >();
            add< GeneratedQueryRunner<GeneratedQuery895> >();
            add< GeneratedQueryRunner<GeneratedQuery896> >();
            add< GeneratedQueryRunner<GeneratedQuery897> >();
            add< GeneratedQueryRunner<GeneratedQuery898> >();
            add< GeneratedQueryRunner<GeneratedQuery899> >();
            add< GeneratedQueryRunner<GeneratedQuery900> >();
            add< GeneratedQueryRunner<GeneratedQuery901> >();
            add< GeneratedQueryRunner<GeneratedQuery902> >();
            add< GeneratedQueryRunner<GeneratedQuery903> >();
            add< GeneratedQueryRunner<GeneratedQuery904> >();
            add< GeneratedQueryRunner<GeneratedQuery905> >();
            add< GeneratedQueryRunner<GeneratedQuery906> >();
            add< GeneratedQueryRunner<GeneratedQuery907> >();
            add< GeneratedQueryRunner<GeneratedQuery908> >();
            add< GeneratedQueryRunner<GeneratedQuery909> >();
            add< GeneratedQueryRunner<GeneratedQuery910> >();
            add< GeneratedQueryRunner<GeneratedQuery911> >();
            add< GeneratedQueryRunner<GeneratedQuery912> >();
            add< GeneratedQueryRunner<GeneratedQuery913> >();
            add< GeneratedQueryRunner<GeneratedQuery914> >();
            add< GeneratedQueryRunner<GeneratedQuery915> >();
            add< GeneratedQueryRunner<GeneratedQuery916> >();
            add< GeneratedQueryRunner<GeneratedQuery917> >();
            add< GeneratedQueryRunner<GeneratedQuery918> >();
            add< GeneratedQueryRunner<GeneratedQuery919> >();
            add< GeneratedQueryRunner<GeneratedQuery920> >();
            add< GeneratedQueryRunner<GeneratedQuery921> >();
            add< GeneratedQueryRunner<GeneratedQuery922> >();
            add< GeneratedQueryRunner<GeneratedQuery923> >();
            add< GeneratedQueryRunner<GeneratedQuery924> >();
            add< GeneratedQueryRunner<GeneratedQuery925> >();
            add< GeneratedQueryRunner<GeneratedQuery926> >();
            add< GeneratedQueryRunner<GeneratedQuery927> >();
            add< GeneratedQueryRunner<GeneratedQuery928> >();
            add< GeneratedQueryRunner<GeneratedQuery929> >();
            add< GeneratedQueryRunner<GeneratedQuery930> >();
            add< GeneratedQueryRunner<GeneratedQuery931> >();
            add< GeneratedQueryRunner<GeneratedQuery932> >();
            add< GeneratedQueryRunner<GeneratedQuery933> >();
            add< GeneratedQueryRunner<GeneratedQuery934> >();
            add< GeneratedQueryRunner<GeneratedQuery935> >();
            add< GeneratedQueryRunner<GeneratedQuery936> >();
            add< GeneratedQueryRunner<GeneratedQuery937> >();
            add< GeneratedQueryRunner<GeneratedQuery938> >();
            add< GeneratedQueryRunner<GeneratedQuery939> >();
            add< GeneratedQueryRunner<GeneratedQuery940> >();
            add< GeneratedQueryRunner<GeneratedQuery941> >();
            add< GeneratedQueryRunner<GeneratedQuery942> >();
            add< GeneratedQueryRunner<GeneratedQuery943> >();
            add< GeneratedQueryRunner<GeneratedQuery944> >();
            add< GeneratedQueryRunner<GeneratedQuery945> >();
            add< GeneratedQueryRunner<GeneratedQuery946> >();
            add< GeneratedQueryRunner<GeneratedQuery947> >();
            add< GeneratedQueryRunner<GeneratedQuery948> >();
            add< GeneratedQueryRunner<GeneratedQuery949> >();
            add< GeneratedQueryRunner<GeneratedQuery950> >();
            add< GeneratedQueryRunner<GeneratedQuery951> >();
            add< GeneratedQueryRunner<GeneratedQuery952> >();
            add< GeneratedQueryRunner<GeneratedQuery953> >();
            add< GeneratedQueryRunner<GeneratedQuery954> >();
            add< GeneratedQueryRunner<GeneratedQuery955> >();
            add< GeneratedQueryRunner<GeneratedQuery956> >();
            add< GeneratedQueryRunner<GeneratedQuery957> >();
            add< GeneratedQueryRunner<GeneratedQuery958> >();
            add< GeneratedQueryRunner<GeneratedQuery959> >();
            add< GeneratedQueryRunner<GeneratedQuery960> >();
            add< GeneratedQueryRunner<GeneratedQuery961> >();
            add< GeneratedQueryRunner<GeneratedQuery962> >();
            add< GeneratedQueryRunner<GeneratedQuery963> >();
            add< GeneratedQueryRunner<GeneratedQuery964> >();
            add< GeneratedQueryRunner<GeneratedQuery965> >();
            add< GeneratedQueryRunner<GeneratedQuery966> >();
            add< GeneratedQueryRunner<GeneratedQuery967> >();
            add< GeneratedQueryRunner<GeneratedQuery968> >();
            add< GeneratedQueryRunner<GeneratedQuery969> >();
            add< GeneratedQueryRunner<GeneratedQuery970> >();
            add< GeneratedQueryRunner<GeneratedQuery971> >();
            add< GeneratedQueryRunner<GeneratedQuery972> >();
            add< GeneratedQueryRunner<GeneratedQuery973> >();
            add< GeneratedQueryRunner<GeneratedQuery974> >();
            add< GeneratedQueryRunner<GeneratedQuery975> >();
            add< GeneratedQueryRunner<GeneratedQuery976> >();
            add< GeneratedQueryRunner<GeneratedQuery977> >();
            add< GeneratedQueryRunner<GeneratedQuery978> >();
            add< GeneratedQueryRunner<GeneratedQuery979> >();
            add< GeneratedQueryRunner<GeneratedQuery980> >();
            add< GeneratedQueryRunner<GeneratedQuery981> >();
            add< GeneratedQueryRunner<GeneratedQuery982> >();
            add< GeneratedQueryRunner<GeneratedQuery983> >();
            add< GeneratedQueryRunner<GeneratedQuery984> >();
            add< GeneratedQueryRunner<GeneratedQuery985> >();
            add< GeneratedQueryRunner<GeneratedQuery986> >();
            add< GeneratedQueryRunner<GeneratedQuery987> >();
            add< GeneratedQueryRunner<GeneratedQuery988> >();
            add< GeneratedQueryRunner<GeneratedQuery989> >();
            add< GeneratedQueryRunner<GeneratedQuery990> >();
            add< GeneratedQueryRunner<GeneratedQuery991> >();
            add< GeneratedQueryRunner<GeneratedQuery992> >();
            add< GeneratedQueryRunner<GeneratedQuery993> >();
            add< GeneratedQueryRunner<GeneratedQuery994> >();
            add< GeneratedQueryRunner<GeneratedQuery995> >();
            add< GeneratedQueryRunner<GeneratedQuery996> >();
            add< GeneratedQueryRunner<GeneratedQuery997> >();
            add< GeneratedQueryRunner<GeneratedQuery998> >();
            add< GeneratedQueryRunner<GeneratedQuery999> >();
            add< GeneratedQueryRunner<GeneratedQuery1000> >();
        }
    } myall;

}
